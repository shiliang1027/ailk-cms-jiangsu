<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   layout="absolute"
		   width="100%"
		   height="100%"
		   xmlns:pubflow="com.linkage.module.cms.alarm.pubflow.*"
		   xmlns:panel="com.linkage.system.component.panel.*"
		   xmlns:common="com.linkage.module.cms.perfmonitor.common.*"
		   creationComplete="application1_creationCompleteHandler(event)">
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ properties of parent ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Style ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Script ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<fx:Script>
		<![CDATA[
			import com.linkage.module.cms.alarm.framework.view.resource.imagesclass.IconParam;
			import com.linkage.module.cms.components.loadmanager.LoadManager;
			import com.linkage.module.cms.perfmonitor.common.BadKPIRender;
			import com.linkage.module.cms.perfmonitor.servperf.data.ServPerfMonitorDataMgr;
			import com.linkage.system.component.panel.events.WindowEvent;
			import com.linkage.system.logging.ILogger;
			import com.linkage.system.logging.ILoggingTarget;
			import com.linkage.system.logging.Log;
			import com.linkage.system.logging.LogEventLevel;
			import com.linkage.system.logging.targets.MonsterTarget2;

			import flash.utils.setTimeout;

			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.FaultEvent;

			public static const dateFormatter:DateFormatter = new DateFormatter();

			public static var _levelColorMap:Object = {'一级告警': 0XFF0000, '二级告警': 0XEE9800, '三级告警': 0XFED701, '四级告警': 0X4169E1, '0': 0X00CC00, '1': 0XFF0000, '2': 0XEE9800, '3': 0XFED701, '4': 0X4169E1};

			//日志
			public var log:ILogger = Log.getLogger("com.linkage.module.cms.perfmonitor.servperf.autodialtest.AutoDialTest");

			[Embed(source="../../img/up_gray.png")]
			[Bindable]
			private static var _up_gray:Class;

			[Embed(source="../../img/up_blue.png")]
			[Bindable]
			private static var _up_blue:Class;

			[Embed(source="../../img/down_gray.png")]
			[Bindable]
			private static var _down_gray:Class;

			[Embed(source="../../img/down_blue.png")]
			[Bindable]
			private static var _down_blue:Class;

			private var showAllImg:Image;

			//数据刷新定时器
			private var _alarmTimer:Timer = new Timer(300000);

			//告警默认过滤规则
			private var defaultFilter:String = 'nmsalarmtype=3&alarmlogicclass="综合监控_自动拨测告警"';

			//loading
			private var lm:LoadManager;

			public var parameters:Object;

			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				parameters = parentApplication.parameters;

				//-------------------------------------历史回退修改------------------------------------
				this.parentApplication.add(alarmFlow);
				//-------------------------------------历史回退修改------------------------------------

				//初始化日志
				var target:ILoggingTarget = new MonsterTarget2();
				target.level = LogEventLevel.INFO;
				target.filters = ["com.linkage.module.cms.perfmonitor.*", "com.linkage.module.cms.alarm*"];
				Log.addTarget(target);

				log.info("日志初始化完成！");

				//读取样式
				styleManager.loadStyleDeclarations2(this.parameters["styleUrl"]);

				//给数据类注入context
				ServPerfMonitorDataMgr.setContext(this.parameters['context'], this.parameters['accoId'], this.parameters['cityId']);


				dateFormatter.formatString = "YYYY-MM-DD JJ:NN:SS";

				//添加显示全部告警按钮
				log.info('初始化全部告警按钮~~');
				showAllImg = new Image();
				showAllImg.source = IconParam.iconShowAll;
				showAllImg.buttonMode = true;
				showAllImg.toolTip = "显示全部";
				showAllImg.visible = false;
				showAllImg.addEventListener(MouseEvent.CLICK, showAllAlarms);
				alarmFlow.addToolButton(showAllImg);

				lm = new LoadManager(mainDivBox);

				this.hideAlarm();

				//加载表格表头  同时用于 拨测任务下拉框  （拨测列表）
				loadHeaders();

				//加载属地列表
				initCitys();

				//初始化开始结束时间
				initDatesAndTimer();

				//加载表格数据
				loadTestData();
			}

			private function loadHeaders():void
			{
				ServPerfMonitorDataMgr.getBoceTypeInfo(function(data:Object):void
					{
						initTestTaskAndHeaders(data);
					}, function(e:FaultEvent):void
					{
						log.error('加载拨测任务（表头）数据失败！');
					});
			}

			private function initCitys():void
			{
				ServPerfMonitorDataMgr.getCityInfo(function(result:Object):void
					{
						citySelect.dataProvider = (result as IList);
						citySelect.selectedIndex = 0;
					}, function(data:FaultEvent):void
					{
						log.error('加载属地信息失败！');
					});
			}

			private function initDatesAndTimer():void
			{
				//开始、结束时间
				var date1:Date = new Date();
				var date2:Date = new Date();

				date1.setHours(0);
				date1.setMinutes(0);
				date1.setSeconds(0);
				date1.setMilliseconds(0);
				var nowStr1:String = dateFormatter.format(date1);
				startDate.text = nowStr1;

				var nowStr2:String = dateFormatter.format(date2);
				endDate.text = nowStr2;

				//初始化定时器
				log.info('初始化定时器 ~~');
				_alarmTimer.addEventListener(TimerEvent.TIMER, onAlarmTimer);
				_alarmTimer.start();

				//-------------------------------------历史回退修改------------------------------------
				setTimeout(function()
					{
						this.parentApplication.add(_alarmTimer);
					}, 2000);
				//-------------------------------------历史回退修改------------------------------------

			}

			private function onAlarmTimer(event:TimerEvent):void
			{
				log.info('定时刷新拨测表格数据。');
				loadTestData(true);
			}

			private function loadTestData(refreshFlag:Boolean = false):void
			{
				//表格点击 弹出拨测详情窗口 
				lm.showLoading();
				ServPerfMonitorDataMgr.getCityBocePerfAlarmMatrix(this.parameters['acc_oid'], function(result:Object):void
					{
						testDataGrid.dataProvider = result;
						testDataGrid.validateNow();

						//初始化告警流水
						if (!refreshFlag)
							initAlarms();

						lm.hideLoading();
					}, function(e:FaultEvent):void
					{
						log.error('加载拨测表格数据失败！');
						//初始化告警流水
						initAlarms();
						lm.hideLoading();
					});
			}


			private function initTestTaskAndHeaders(data:Object):void
			{
				//拨测任务下拉框
				this.testTask.dataProvider = (data as IList);
				testTask.selectedIndex = 0;

				//初始化表头
				initColumns(data, testDataGrid);
			}

			//addFlag  true：拨测表格      false：详情表格
			private function initColumns(data:Object, dg:AdvancedDataGrid, isTestGrid:Boolean = true):void
			{
				var alarmColArr:Array = new Array();

				if (isTestGrid)
				{
					var dgc:AdvancedDataGridColumn = new AdvancedDataGridColumn();
					dgc.headerText = "地市";
					dgc.dataField = 'city_name';
					dgc.width = 120;
					alarmColArr.push(dgc);
				}

				for each (var col:Object in data)
				{
					var dgColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
					if (isTestGrid)
					{
						dgColumn.headerText = col['label'];
						dgColumn.dataField = col['id'];
						dgColumn.itemRenderer = new ClassFactory(BadKPIRender);
					}
					else
					{
						dgColumn.headerText = col['perf_name'];
						dgColumn.dataField = col['perf_id'];
					}

					dgColumn.width = dgColumn.headerText.length * 18 + 15;

					if (dgColumn.headerText == "网元名称")
					{
						dgColumn.width = 150;
					}
					else
						(dgColumn.headerText == "采集时间")
					{
						dgColumn.width = 200;
					}

					alarmColArr.push(dgColumn);
				}

				dg.columns = alarmColArr;
			}

			//点击拨测表格数据 展示拨测详情
			protected function showHisChartDatasByGrid(e:ListEvent):void
			{
				//第一列不处理
				if (e.columnIndex == 0)
					return;

				testDetailWindow.visible = true;

				var cityId:Object = testDataGrid.dataProvider[e.rowIndex]['city_id'];
				var cityName:Object = testDataGrid.dataProvider[e.rowIndex]['city_name'];
				var boceId:Object = (testDataGrid.columns[e.columnIndex] as AdvancedDataGridColumn).dataField;

				var param:Object = {};
				param['cityId'] = cityId;
				param['boceId'] = boceId;

				//联动告警
				this.filterAlarm('alarmregion="' + cityName + '"&buss_id=' + boceId);

				//点击拨测表格 加载拨测详情
				ServPerfMonitorDataMgr.getAlarmBocePerfInfoByCityPerfId(param, function(data:Object):void
					{
						initColumns(data['head'], testDetailDataGrid, false);
						testDetailDataGrid.dataProvider = data['data'];
					}, function(e:FaultEvent):void
					{
						log.error('击拨测表格,加载拨测详情数据失败！');
					});
			}

			//根据条件 查询拨测详情
			protected function showHisChartDatasByQuery():void
			{
				testDetailWindow.visible = true;

				var param:Object = {};
				param['cityId'] = this.citySelect.selectedItem['id'];
				param['boceId'] = this.testTask.selectedItem['id'];
				param['startTime'] = this.startDate.text;
				param['endTime'] = this.endDate.text;

				//加载拨测详情
				ServPerfMonitorDataMgr.queryBocePerfInfo(param, function(data:Object):void
					{
						initColumns(data['head'], testDetailDataGrid, false);
						testDetailDataGrid.dataProvider = data['data'];
					}, function(e:FaultEvent):void
					{
						log.error('根据条件,加载拨测详情数据失败！');
					});
			}

			private function initAlarms():void
			{
				log.info('初始化告警流水：' + this.parameters['mapInfo']);
				//初始化告警流水
				alarmFlow.params = this.parameters;
				//设置过滤规则
				alarmFlow.ruleContent = defaultFilter;
				alarmFlow.initInfo();
			}

			//动态刷新告警流水 
			private function filterAlarm(filter:String):void
			{
				log.info("过滤页面reload告警：filter：" + filter);
				alarmFlow.reload(filter + '&' + defaultFilter);

				if (alarmVgroup.height < 50) //如果没有显示则显示流水窗口
					showAlarm();

				this.showAllImg.visible = true;
			}

			private function showAllAlarms(e:MouseEvent):void
			{
				alarmFlow.reload(defaultFilter);
				showAllImg.visible = false;
			}

			//-----------------------布局-------------------------------------
			protected function alarmWindow_resizeHandler(event:ResizeEvent):void
			{
				if (alarmVgroup.height >= 300)
				{
					img.source = _down_gray;
					img.name = "down";
				}
				else if (alarmVgroup.height <= mainDivBox.height - testDataGrid.height - queryDiv.height - 15)
				{
					img.source = _up_gray;
					img.name = "up";
				}
			}

			private function resizeWindow():void
			{
				if (img.name == "down")
				{
					hideAlarm();
				}
				else if (img.name == "up")
				{
					showAlarm();
				}
			}

			private function hideAlarm(dura:Number = 400):void
			{
				alarmFlow.visible = false;
				alarmFlow.includeInLayout = false;
				matrixGroup.bottom = 2;

				resize.duration = dura;
				//				resize.heightTo = 171;
				resize.heightTo = mainDivBox.height - testDataGrid.height - queryDiv.height - 17;
				resize.play();

				img.source = _up_gray;
				img.name = "up";
			}

			private function showAlarm(dura:Number = 400):void
			{
				alarmFlow.visible = false;
				alarmFlow.includeInLayout = false;

				alarmVgroup.percentWidth = 100;

				resize.duration = dura;
				resize.heightTo = mainDivBox.height - 100;
				resize.play();

				img.source = _down_gray;
				img.name = "down";
			}

			protected function resize_effectEndHandler(event:EffectEvent):void
			{
				alarmFlow.includeInLayout = true;
				alarmFlow.visible = true;
				alarmVgroup.percentWidth = 100;
			}

			protected function changeImg(type:Object):void
			{
				img.source = getImg(type);
			}

			private function getImg(type:Object):Object
			{
				if (img.name == "down")
				{
					if (type == 1)
						return _down_blue;
					else
						return _down_gray;
				}
				else if (img.name == "up")
				{
					if (type == 1)
						return _up_blue;
					else
						return _up_gray;
				}

				return _down_gray;
			}


			protected function testDetailWindow_closeHandler(event:WindowEvent):void
			{
				testDetailWindow.visible = false;
			}

			/**
			 * 格式化时间
			 */
			public function formatDate(date:Date):String
			{
				return dateFormatter.format(date);
			}

			protected function mainDivBox_resizeHandler(event:ResizeEvent):void
			{
				hideAlarm();
			}
		]]>
	</fx:Script>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Declarations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:Resize heightTo="0"
				  id="resize"
				  target="{alarmVgroup}"
				  effectEnd="resize_effectEndHandler(event)"/>
	</fx:Declarations>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ UI Components ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	<s:VGroup id="matrixGroup"
			  width="100%"
			  top="0">
		<mx:AdvancedDataGrid id="testDataGrid"
							 width="100%"
							 height="310"
							 draggableColumns="false"
							 itemClick="showHisChartDatasByGrid(event)"/>
		<s:BorderContainer id="queryDiv"
						   borderColor="gray"
						   borderStyle="solid"
						   width="100%"
						   height="33"
						   borderWeight="2">
			<s:HGroup width="100%"
					  height="100%"
					  verticalAlign="middle"
					  horizontalAlign="left"
					  gap="30"
					  paddingLeft="20">
				<s:Label text="历史拨测查询"/>
				<s:HGroup verticalAlign="middle">
					<s:Label text="  时间："/>
					<s:Label text="  开始"/>
					<common:UXDateField id="startDate"
										labelFunction="formatDate"
										yearNavigationEnabled="true"
										width="190"
										editable="false"/>
					<s:Label text="  结束"/>
					<common:UXDateField id="endDate"
										labelFunction="formatDate"
										yearNavigationEnabled="true"
										width="190"
										editable="false"/>
				</s:HGroup>
				<s:HGroup verticalAlign="middle">
					<s:Label text="  地市"/>
					<s:DropDownList id="citySelect"/>
				</s:HGroup>
				<s:HGroup verticalAlign="middle">
					<s:Label text="  拨测任务"/>
					<s:DropDownList id="testTask"/>
					<s:Button label="确定"
							  click="showHisChartDatasByQuery()"/>
				</s:HGroup>
			</s:HGroup>
		</s:BorderContainer>
	</s:VGroup>

	<mx:VDividedBox id="mainDivBox"
					width="100%"
					height="100%"
					resize="mainDivBox_resizeHandler(event)">
		<s:Group height="100%"
				 width="100%"/>
		<!--告警流水-->
		<s:VGroup id="alarmVgroup"
				  width="100%"
				  height="171"
				  gap="0"
				  bottom="0"
				  resize="alarmWindow_resizeHandler(event)">
			<s:Group width="100%"
					 height="100%">
				<panel:Window id="alarmWin"
							  width="100%"
							  height="100%"
							  minimizable="false"
							  maximizable="false"
							  closable="false"
							  title="告警流水窗口">
					<pubflow:alarm id="alarmFlow"
								   moduleKey="p2pflowalarm"
								   width="100%"
								   height="100%"/>
				</panel:Window>
				<s:HGroup width="100%"
						  height="5"
						  horizontalAlign="center"
						  gap="0"
						  y="{alarmWin.y + 1}">
					<mx:Image id="img"
							  source="{_down_gray}"
							  name="down"
							  click="resizeWindow()"
							  mouseOver="changeImg(1)"
							  mouseOut="changeImg(2)"
							  buttonMode="true"/>
				</s:HGroup>
			</s:Group>
		</s:VGroup>
	</mx:VDividedBox>

	<!-- 拨测详情窗口-->
	<panel:Window id="testDetailWindow"
				  width="80%"
				  height="300"
				  title="拨测详情"
				  maximizable="false"
				  minimizable="false"
				  closable="true"
				  dragable="true"
				  close="testDetailWindow_closeHandler(event)"
				  visible="false"
				  x="{testDetailWindow.width/8}"
				  y="100">
		<mx:AdvancedDataGrid id="testDetailDataGrid"
							 width="100%"
							 height="100%"
							 draggableColumns="false"
							 horizontalScrollPolicy="auto"
							 verticalScrollPolicy="auto"/>
	</panel:Window>
</mx:Module>
