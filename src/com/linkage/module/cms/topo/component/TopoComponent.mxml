<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:topo="com.linkage.module.topo.framework.view.*"
		 xmlns:component="com.linkage.module.topo.framework.view.component.*"
		 xmlns:toolbar="com.linkage.module.topo.framework.view.component.toolbar.*"
		 xmlns:action="com.linkage.module.topo.framework.view.component.toolbar.action.*"
		 xmlns:operation="com.linkage.module.topo.framework.view.component.toolbar.operation.*"
		 xmlns:hawkeye="com.linkage.module.topo.framework.view.component.hawkeye.*"
		 xmlns:cmscomponent="com.linkage.module.cms.topo.view.component.*"
		 xmlns:tree="com.linkage.module.topo.framework.view.component.tree.*"
		 xmlns:flow="com.linkage.module.cms.alarm.flow.*"
		 xmlns:panel="com.linkage.module.topo.framework.view.component.panel.*"
		 xmlns:navigation="com.linkage.module.topo.framework.view.component.navigation.*"
		 preinitialize="topoComponent_preinitializeHandler(event)"
		 width="100%"
		 height="100%">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.linkage.module.cms.topo.Version;
			import com.linkage.module.cms.topo.constant.CmsTopoConstants;
			import com.linkage.module.cms.topo.data.ICmsDataSource;
			import com.linkage.module.cms.topo.data.http.CmsHttpDataSource;
			import com.linkage.module.cms.topo.data.remoting.CmsRemoteDataSource;
			import com.linkage.module.cms.topo.event.TopoEventTypes;
			import com.linkage.module.cms.topo.service.extend.CmsExtendService;
			import com.linkage.module.cms.topo.service.extend.TopoLocateService;
			import com.linkage.module.cms.topo.util.CmsLoadingInfo;
			import com.linkage.module.cms.topo.util.CmsTopoUtil;
			import com.linkage.module.cms.topo.view.component.AttributePanel;
			import com.linkage.module.cms.topo.view.component.AutoCreateLinkPanel;
			import com.linkage.module.cms.topo.view.component.ChannelTopoPanel;
			import com.linkage.module.cms.topo.view.component.CircuitListPanel;
			import com.linkage.module.cms.topo.view.component.ImportDeviceInViewPanel;
			import com.linkage.module.cms.topo.view.component.ImportDevicePanel;
			import com.linkage.module.cms.topo.view.component.LegendPanel;
			import com.linkage.module.cms.topo.view.component.NodeModifyPanel;
			import com.linkage.module.cms.topo.view.component.OpticListPanel;
			import com.linkage.module.cms.topo.view.component.ResCustStatisticPanel;
			import com.linkage.module.cms.topo.view.component.ResourceStatisticPanel;
			import com.linkage.module.topo.framework.Constants;
			import com.linkage.module.topo.framework.controller.event.TopoAlarmEvent;
			import com.linkage.module.topo.framework.controller.event.TopoEvent;
			import com.linkage.module.topo.framework.core.model.element.point.INode;
			import com.linkage.module.topo.framework.core.parser.XmlParserFactory;
			import com.linkage.module.topo.framework.core.style.StyleFactory;
			import com.linkage.module.topo.framework.data.IDataSource;
			import com.linkage.module.topo.framework.data.http.HttpDataSource;
			import com.linkage.module.topo.framework.data.remotimg.RemoteDataSource;
			import com.linkage.module.topo.framework.service.ServiceContainer;
			import com.linkage.module.topo.framework.service.extend.HightLightService;
			import com.linkage.module.topo.framework.service.extend.alarm.DefaultAlarmRefService;
			import com.linkage.module.topo.framework.service.extend.data.DefaultDataService;
			import com.linkage.module.topo.framework.service.extend.menu.DefaultMenuService;
			import com.linkage.module.topo.framework.service.extend.menu.UrlMenuService;
			import com.linkage.module.topo.framework.service.extend.msg.DefaultMsgService;
			import com.linkage.module.topo.framework.util.DataUtil;
			import com.linkage.module.topo.framework.util.TopoUtil;
			import com.linkage.module.topo.framework.util.loading.ILoadingInfo;
			import com.linkage.module.topo.framework.util.loading.LoadingManager;
			import com.linkage.module.topo.framework.view.component.CanvasPanelCache;
			import com.linkage.module.topo.framework.view.component.panel.AlarmRendererConfigPanel;
			import com.linkage.module.topo.framework.view.component.panel.AutoLayoutPanel;
			import com.linkage.module.topo.framework.view.component.panel.CreateViewPanel;
			import com.linkage.module.topo.framework.view.component.panel.ElementPropertyConfigPanel;
			import com.linkage.module.topo.framework.view.component.panel.GroupModifyPanel;
			import com.linkage.module.topo.framework.view.component.panel.HLinkLayerModifyPanel;
			import com.linkage.module.topo.framework.view.component.panel.LineModifyPanel;
			import com.linkage.module.topo.framework.view.component.panel.LinkModifyPanel;
			import com.linkage.module.topo.framework.view.component.panel.SegmentMirrorModifyPanel;
			import com.linkage.module.topo.framework.view.component.panel.SegmentModifyPanel;
			import com.linkage.module.topo.framework.view.component.panel.ShapeModifyPanel;
			import com.linkage.module.topo.framework.view.component.panel.TPGridModifyPanel;
			import com.linkage.module.topo.framework.view.component.panel.TPViewModifyPanel;
			import com.linkage.module.topo.framework.view.component.panel.TextModifyPanel;
			import com.linkage.system.logging.ILogger;
			import com.linkage.system.logging.Log;
			import com.linkage.system.structure.map.IMap;
			import com.linkage.system.structure.map.Map;
			import com.linkage.system.utils.StringUtils;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			private var log:ILogger = Log.getLogger("com.linkage.module.cms.topo.container.SimpleGroupTopoContainer");

			// ------------------- 布局,样式 --------------------
			// 告警流水分隔条是否显示
			[Bindable]
			private var _alarmDividedVisible:Boolean = false;
			// 下面的分隔条向上样式
			private static const STYPE_BOTTOM_GO_TOP:String = "bottomGoTopDivider";
			// 下面的分隔条向下样式
			private static const STYPE_BOTTOM_GO_BOTTOM:String = "bottomGoBottomDivider";
			// ---------------------------------------

			// 业务逻辑容器
			[Bindable]
			private var serviceContainer:ServiceContainer;
			// 画布面板容器
			private var _canvasPanelCache:CanvasPanelCache;
			// 数据源
			[Bindable]
			private var _dataSource:IDataSource = null;
			// CMS数据源
			[Bindable]
			private var _dataSourceCms:ICmsDataSource = null;
			// 搜索类型
			[Bindable]
			private var _searchType:String = Constants.SEARCH_TYPE_ALL;
			// 拓扑搜索的toponame过滤的正则表达式
			[Bindable]
			private var _searchTopoNamesRegex:String = null;

			// 加载中提示
			private var _loadingInfo:CmsLoadingInfo = new CmsLoadingInfo();

			// -------------------------------- //
			//                参数
			// -------------------------------- //
			// 图标上下文
			[Bindable]
			private var _iconContext:String = null;
			// 填充图标上下文
			[Bindable]
			private var _iconFillContext:String = null;
			[Bindable]
			private var _isEoms:String = null;
			// url上下文
			[Bindable]
			private var _urlContext:String = null;
			// 会话id 
			private var _sessionId:String = null;
			// 用户信息 {account:'','roleId':'','areaId':''}
			private var _user:Object = null;
			// 是否是HTTP数据源 (默认是BlazeDS的数据源)
			private var _isHttpDS:Boolean = false;
			// 集客拓扑的toponame过滤的正则表达式
			private var _jkTopoNamesRegex:String = null;
			// 除集客之外的默认的toponame过滤的正则表达式
			private var _defaultTopoNamesRegex:String = null;
			// 是否是集客告警
			private var _isGroupTopo:Boolean = false;
			// 是否启用告警刷新
			private var _alarmEnabled:Boolean = true;
			// 是否启用导航
			[Bindable]
			private var _navigationEnabled:Boolean = false;
			// 是否启动资源统计面板
			[Bindable]
			private var _resStatEnabled:Boolean = false;
			// 资源统计面板默认是否显示
			[Bindable]
			private var _resStatDefaultShow:Boolean = false;
			// 是否启用工程状态刷新
			private var _workStatRefreshEnable:Boolean = false;
			// 菜单URL
			private var _menuUrl:String = null;
			// 是否启用告警流水
			[Bindable]
			private var _flowAlarmEnable:Boolean = false;
			// 告警的参数
			private var _alarmParam:String = null;
			


			/**
			 * 图标上下文
			 */
			public function set iconContext(value:String):void
			{
				_iconContext = TopoUtil.formatContext(value);
			}
			public function set isEoms(value:String):void
			{
				_isEoms = TopoUtil.formatContext(value);
			}

			/**
			 * 填充图片的上下文
			 */
			public function set iconFillContext(value:String):void
			{
				_iconFillContext = TopoUtil.formatContext(value);
			}

			/**
			 * URL上下文
			 */
			public function set urlContext(value:String):void
			{
				_urlContext = TopoUtil.formatContext(value);
			}

			/**
			 * 会话ID
			 */
			public function set sessionId(value:String):void
			{
				_sessionId = value;
			}

			/**
			 * 用户对象,要包含(account,roleId,areaId)这三个KEY
			 */
			public function set user(value:Object):void
			{
				_user = value;
			}

			/**
			 * 是否使用HTTP的远程数据源
			 */
			public function set isHttpDS(value:Boolean):void
			{
				_isHttpDS = value;
			}

			/**
			 * 是否启用告警刷新
			 */
			public function set alarmEnabled(value:Boolean):void
			{
				_alarmEnabled = value;
			}

			/**
			 * 是否启用导航
			 */
			public function set navigationEnabled(value:Boolean):void
			{
				_navigationEnabled = value;
			}

			/**
			 * 是否启用资源统计面板
			 */
			public function set resStatEnabled(value:Boolean):void
			{
				_resStatEnabled = value;
			}

			/**
			 * 资源统计面板默认是否显示
			 */
			public function set resStatDefaultShow(value:Boolean):void
			{
				_resStatDefaultShow = value;
			}

			/**
			 * 是否启用工程状态刷新
			 */
			public function set workStatRefreshEnable(value:Boolean):void
			{
				_workStatRefreshEnable = value;
			}

			/**
			 * 菜单url
			 */
			public function set menuUrl(value:String):void
			{
				_menuUrl = value;
			}

			/**
			 * 是否启用告警流水
			 */
			public function set flowAlarmEnable(value:Boolean):void
			{
				_flowAlarmEnable = value;
			}

			/**
			 * 集客拓扑名称过滤的正则表达式
			 */
			public function set jkTopoNamesRegex(value:String):void
			{
				_jkTopoNamesRegex = value;
			}

			/**
			 * 默认的拓扑名称过滤的正则表达式
			 */
			public function set defaultTopoNamesRegex(value:String):void
			{
				_defaultTopoNamesRegex = value;
			}

			/**
			 * 是否是集客拓扑
			 */
			public function set isGroupTopo(flag:Boolean):void
			{
				_isGroupTopo = flag;
			}

			// 执行数据校验
			private function doValidate():void
			{
				if (StringUtils.isEmpty(_iconContext))
				{
					throw new ArgumentError("请先设置参数[iconContext]后再启动拓扑!");
				}
				if (StringUtils.isEmpty(_iconFillContext))
				{
					throw new ArgumentError("请先设置参数[iconFillContext]后再启动拓扑!");
				}
				if (StringUtils.isEmpty(_urlContext))
				{
					throw new ArgumentError("请先设置参数[urlContext]后再启动拓扑!");
				}
				if (StringUtils.isEmpty(_sessionId))
				{
					throw new ArgumentError("请先设置参数[sessionId]后再启动拓扑!");
				}
				if (_user == null)
				{
					throw new ArgumentError("请先设置参数[user]后再启动拓扑!");
				}
				if (!_user.hasOwnProperty("areaId"))
				{
					throw new ArgumentError("参数[user]中必须要有[areaId]属性,请先设置 然后再启动拓扑!");
				}
				if (!_user.hasOwnProperty("roleId"))
				{
					throw new ArgumentError("参数[user]中必须要有[roleId]属性,请先设置 然后再启动拓扑!");
				}
				if (!_user.hasOwnProperty("account"))
				{
					throw new ArgumentError("参数[user]中必须要有[account]属性,请先设置 然后再启动拓扑!");
				}
				if (_flowAlarmEnable)
				{
					// 启动告警流水的情况下,拼装告警的参数
					/**
					 * 告警流水所需要的参数 <br>
					 * 下面的四个参数为必填<br>
					 * {'sessionId':'','account':'','areaId':'','context':''}
					 */
					_alarmParam = "{'sessionId':'" + _sessionId + "','account':'" + _user["account"] + "','areaId':'" + _user["areaId"] + "','roleId':'" + _user["roleId"] + "','context':'" + _urlContext +
						"'}";
				}

			}

			// 注册监听事件
			private function registerListeners():void
			{
				// 窗口变化后,让画布大小重置下
				this.addEventListener(ResizeEvent.RESIZE, function(event:ResizeEvent):void
					{
						resizeCanvas();
					});
			}

			// 上下的 分隔条更新之后
			private function vDividedBox_updateCompleteHandler(event:FlexEvent):void
			{
//				log.debug("[分隔条更新完毕事件] 上下分隔条");
				flowAlarm.percentWidth = 100;
				flowAlarm.percentHeight = 100;
				resizeCanvas();
			}

			// 重置画布大小
			private function resizeCanvas():void
			{
				// 核心容器
				coreContainer.percentHeight = 100;
				coreContainer.percentWidth = 100;
				// 画布
				topoCanvas.percentWidth = 100;
				topoCanvas.percentHeight = 100;
				// 告警流水
				flowAlarm.percentWidth = 100;

				this.validateNow();

				// 右侧的上下分隔容器
				vDividedBox.validateNow();

				// 右侧的上下分隔容器 流水
				vDivided_child2.validateNow();
				flowAlarm.validateNow();

				// 右侧的上下分隔容器 拓扑
				vDivided_child1.validateNow();
				coreContainer.validateNow();
				panelContainer.validateNow();

				topoCanvas.validateNow();
				topoCanvas.resizeCanvas(panelContainer.width, panelContainer.height);
			}

			// 点击隐藏/显示告警流水
			private function bottomDivider_clickHandler():void
			{
				switch (bottomDivider.styleName)
				{
					case STYPE_BOTTOM_GO_BOTTOM:
						flowAlarm.hide();
						_alarmDividedVisible = false;
						bottomDivider.styleName = STYPE_BOTTOM_GO_TOP;
						break;
					case STYPE_BOTTOM_GO_TOP:
						flowAlarm.show();
						_alarmDividedVisible = true;
						bottomDivider.styleName = STYPE_BOTTOM_GO_BOTTOM;
						break;
				}
				resizeCanvas();
			}

			// 显示告警流水面板
			private function showFlowAlarmPanel():void
			{
				if (bottomDivider.styleName != STYPE_BOTTOM_GO_BOTTOM)
				{
					flowAlarm.show();
					_alarmDividedVisible = true;
					resizeCanvas();
					bottomDivider.styleName = STYPE_BOTTOM_GO_BOTTOM;
				}
			}

			// 隐藏告警流水面板
			private function hideFlowAlarmPanel():void
			{
				if (bottomDivider.styleName != STYPE_BOTTOM_GO_TOP)
				{
					flowAlarm.hide();
					_alarmDividedVisible = false;
					resizeCanvas();
					bottomDivider.styleName = STYPE_BOTTOM_GO_TOP;
				}
			}

			/**
			 * 【核心】启动拓扑容器
			 */
			public function startTopo():void
			{
				doValidate();

				// 设置loading提示的parent
				_loadingInfo.parent = topoCanvas;

				// 权限先不做控制,先赋予全部权限
//				var allAuthKeys:Array = ['GoBack', 'Select', 'Pan', 'ZoomIn', 'ZoomOut', 'OneScreenView', 'OriginalView', 'ExportImage', 'Print', 'AttrToggle', 'LegendToggle', 'StatisticToggle', 'Edit',
//					'HawkEye', 'Move', 'AutoLayout', 'CreateHLinkLayer', 'CreateShape', 'CreateLink', 'CreateLine', 'SaveTopo', 'AlarmRendererConfig'];
//				toolBar.authKeys = allAuthKeys;
//				editToolBar.authKeys = allAuthKeys;

				// 注册监听器
				registerListeners();
				topoCanvas.menuManager.version = Version.VERSION;

				// 【第一步】初始化dataUtil中的默认参数
				DataUtil.addParameter("area_id", _user.areaId);

				// 【第二步】初始化画布
				topoCanvas.styleFactory = new StyleFactory(_iconContext, _iconFillContext);
				topoCanvas.parserFactory = new XmlParserFactory();
				topoCanvas.alarmEnabled = _alarmEnabled;

				// 【第三步】初始化数据源
				_dataSource = _isHttpDS ? new HttpDataSource(_sessionId, _urlContext) : new RemoteDataSource(_user, _urlContext);
				_dataSourceCms = _isHttpDS ? new CmsHttpDataSource(_sessionId, _urlContext) : new CmsRemoteDataSource(_user, _urlContext);

				// 【第四步】普通/集客对应初始化
				if (_isGroupTopo)
				{
					_searchType = Constants.SEARCH_TYPE_CUSTOMER;
					_searchTopoNamesRegex = _jkTopoNamesRegex;
					// 集客时不显示资源统计面板
					resStatEnabled = false;
				}
				else
				{
					_searchType = Constants.SEARCH_TYPE_ALL;
					_searchTopoNamesRegex = _defaultTopoNamesRegex;
				}

				// 【第五步】各种扩展面板
				_canvasPanelCache = new CanvasPanelCache(topoCanvas, panelContainer);
				initExtendPanels();

				// 【第六步】初始化扩展的业务类
				serviceContainer = new ServiceContainer(panelContainer, _urlContext);
				// >>>>>> 往逻辑容器中添加扩展的业务逻辑 >>>>>> 
				// [1] 菜单
				if (_menuUrl)
				{
					serviceContainer.addService(new UrlMenuService(_sessionId, _menuUrl));
				}
				else
				{
					serviceContainer.addService(new DefaultMenuService(_dataSource));
				}
				// [2]远程数据
				serviceContainer.addService(new DefaultDataService(_dataSource));
				// [3]告警刷新
				serviceContainer.addService(new DefaultAlarmRefService(_dataSource));
				// [4]消息提醒
				serviceContainer.addService(new DefaultMsgService());
				// [5]CMS扩展
				var cmsExtendService:CmsExtendService = new CmsExtendService(_dataSource, _dataSourceCms);
				cmsExtendService.workStatRefreshEnable = _workStatRefreshEnable;
				serviceContainer.addService(cmsExtendService);
				// [6]拓扑定位
				serviceContainer.addService(new TopoLocateService(_dataSource, elementListPanel, _searchTopoNamesRegex));
				// [7]高亮关联网元
				serviceContainer.addService(new HightLightService());
				// <<<<<< 往逻辑容器中添加扩展的业务逻辑 <<<<<<

				// 【第七步】启动业务逻辑
				serviceContainer.start();

				// 【第八步】启动告警流水
				if (_flowAlarmEnable)
				{
					flowAlarm.params = _alarmParam;
					flowAlarm.addEventListener(TopoAlarmEvent.SHOW_FLOW_ALARM, function(event:TopoAlarmEvent):void
						{
							showFlowAlarmPanel();
						});
					flowAlarm.addEventListener(TopoAlarmEvent.HIDE_FLOW_ALARM, function(event:TopoAlarmEvent):void
						{
							hideFlowAlarmPanel();
						});
					flowAlarm.defaultCustFlow = _isGroupTopo;
					flowAlarm.start();
				}
			}

			/**
			 * 初始化各种扩展面板
			 */
			private function initExtendPanels():void
			{
				// 1.自动布局面板
				var autoLayoutPanel:AutoLayoutPanel = new AutoLayoutPanel();
				autoLayoutPanel.dataSource = _dataSource;
				autoLayoutPanel.iTop = 36;
				autoLayoutPanel.iLeft = 10;
				_canvasPanelCache.addExtendPanel(autoLayoutPanel);

				// 2.属性配置面板
				var elementPropertyConfigPanel:ElementPropertyConfigPanel = new ElementPropertyConfigPanel();
				elementPropertyConfigPanel.dataSource = _dataSource;
				elementPropertyConfigPanel.iTop = 36;
				elementPropertyConfigPanel.iLeft = 10;
				_canvasPanelCache.addExtendPanel(elementPropertyConfigPanel);

				// 3.创建/编辑 网段面板
				var segmentModifyPanel:SegmentModifyPanel = new SegmentModifyPanel();
				segmentModifyPanel.dataSource = _dataSource;
				segmentModifyPanel.iconContext = _iconContext;
				segmentModifyPanel.iTop = 100;
				segmentModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(segmentModifyPanel);

				// 4.编辑 网段镜像面板
				var segmentMirrorModifyPanel:SegmentMirrorModifyPanel = new SegmentMirrorModifyPanel();
				segmentMirrorModifyPanel.dataSource = _dataSource;
				segmentMirrorModifyPanel.iconContext = _iconContext;
				segmentMirrorModifyPanel.iTop = 100;
				segmentMirrorModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(segmentMirrorModifyPanel);

				// 5.创建/编辑 缩略图面板
				var hLinkLayerModifyPanel:HLinkLayerModifyPanel = new HLinkLayerModifyPanel();
				hLinkLayerModifyPanel.dataSource = _dataSource;
				hLinkLayerModifyPanel.iTop = 100;
				hLinkLayerModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(hLinkLayerModifyPanel);

				// 6.创建/编辑 形状面板
				var shapeModifyPanel:ShapeModifyPanel = new ShapeModifyPanel();
				shapeModifyPanel.dataSource = _dataSource;
				shapeModifyPanel.iconContext = _iconContext;
				shapeModifyPanel.iTop = 100;
				shapeModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(shapeModifyPanel);

				// 7.创建/编辑 分组面板
				var groupModifyPanel:GroupModifyPanel = new GroupModifyPanel();
				groupModifyPanel.dataSource = _dataSource;
				groupModifyPanel.iconContext = _iconContext;
				groupModifyPanel.iTop = 100;
				groupModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(groupModifyPanel);

				// 8.创建/编辑 文本面板
				var textModifyPanel:TextModifyPanel = new TextModifyPanel();
				textModifyPanel.dataSource = _dataSource;
				textModifyPanel.iTop = 100;
				textModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(textModifyPanel);

				// 9.创建/编辑 链路面板
				var linkModifyPanel:LinkModifyPanel = new LinkModifyPanel();
				linkModifyPanel.dataSource = _dataSource;
				linkModifyPanel.iTop = 100;
				linkModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(linkModifyPanel);

				// 10.创建/编辑 线对象面板
				var lineModifyPanel:LineModifyPanel = new LineModifyPanel();
				lineModifyPanel.dataSource = _dataSource;
				lineModifyPanel.iTop = 100;
				lineModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(lineModifyPanel);

				// 11.创建/编辑 视图对象面板
				var tPViewModifyPanel:TPViewModifyPanel = new TPViewModifyPanel();
				tPViewModifyPanel.dataSource = _dataSource;
				tPViewModifyPanel.iconContext = _iconContext;
				tPViewModifyPanel.iTop = 100;
				tPViewModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(tPViewModifyPanel);

				// 12.创建视图面板
				var createViewPanel:CreateViewPanel = new CreateViewPanel();
				createViewPanel.dataSource = _dataSource;
				createViewPanel.iTop = 100;
				createViewPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(createViewPanel);

				// 13.告警渲染配置
				var alarmRendererConfigPanel:AlarmRendererConfigPanel = new AlarmRendererConfigPanel();
				alarmRendererConfigPanel.dataSource = _dataSource;
				alarmRendererConfigPanel.iTop = 100;
				alarmRendererConfigPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(alarmRendererConfigPanel);

				// 14.创建/编辑 网格对象面板
				var tPGridModifyPanel:TPGridModifyPanel = new TPGridModifyPanel();
				tPGridModifyPanel.dataSource = _dataSource;
				tPGridModifyPanel.iTop = 100;
				tPGridModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(tPGridModifyPanel);

				// ------------------- cms 面板 --------------------
				// 15.节点编辑面板
				var nodeModifyPanel:NodeModifyPanel = new NodeModifyPanel();
				nodeModifyPanel.dataSource = _dataSource;
				nodeModifyPanel.dataSourceCms = _dataSourceCms;
				nodeModifyPanel.iconContext = _iconContext;
				nodeModifyPanel.iTop = 100;
				nodeModifyPanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(nodeModifyPanel);

				// 16.资源统计面板
				var resourceStatisticPanel:ResourceStatisticPanel = new ResourceStatisticPanel();
				resourceStatisticPanel.dataSource = _dataSource;
				resourceStatisticPanel.resStatEnabled = _resStatEnabled;
				resourceStatisticPanel.defaultShow = _resStatDefaultShow;
				resourceStatisticPanel.iTop = 36;
				resourceStatisticPanel.iLeft = 10;
				_canvasPanelCache.addExtendPanel(resourceStatisticPanel);
				flowAlarm.resourceStatisticPanel = resourceStatisticPanel;

				// 18.电路列表
				var circuitListPanel:CircuitListPanel = new CircuitListPanel();
				circuitListPanel.dataSource = _dataSource;
				circuitListPanel.dataSourceCms = _dataSourceCms;
				circuitListPanel.urlContext = _urlContext;
				circuitListPanel.iTop = 36;
				circuitListPanel.iLeft = 10;
				_canvasPanelCache.addExtendPanel(circuitListPanel);

				// 19.光路列表
				var opticListPanel:OpticListPanel = new OpticListPanel();
				opticListPanel.dataSource = _dataSource;
				opticListPanel.dataSourceCms = _dataSourceCms;
				opticListPanel.urlContext = _urlContext;
				opticListPanel.iTop = 36;
				opticListPanel.iLeft = 10;
				_canvasPanelCache.addExtendPanel(opticListPanel);

				// 20.导入设备面板
				var importDevicePanel:ImportDevicePanel = new ImportDevicePanel();
				importDevicePanel.dataSource = _dataSource;
				importDevicePanel.dataSourceCms = _dataSourceCms;
				importDevicePanel.iTop = 36;
				importDevicePanel.iLeft = 10;
				_canvasPanelCache.addExtendPanel(importDevicePanel);

				// 21.视图中导入设备面板
				var importDeviceInViewPanel:ImportDeviceInViewPanel = new ImportDeviceInViewPanel();
				importDeviceInViewPanel.dataSource = _dataSource;
				importDeviceInViewPanel.dataSourceCms = _dataSourceCms;
				importDeviceInViewPanel.iTop = 36;
				importDeviceInViewPanel.iLeft = 10;
				_canvasPanelCache.addExtendPanel(importDeviceInViewPanel);

				// 22.自动生成链路面板
				var autoCreateLinkPanel:AutoCreateLinkPanel = new AutoCreateLinkPanel();
				autoCreateLinkPanel.dataSource = _dataSource;
				autoCreateLinkPanel.iTop = 36;
				autoCreateLinkPanel.iLeft = 10;
				_canvasPanelCache.addExtendPanel(autoCreateLinkPanel);

				// 23.属性面板
				var attributePanel:AttributePanel = new AttributePanel();
				attributePanel.dataSourceCms = _dataSourceCms;
				attributePanel.iTop = 80;
				attributePanel.iRight = 20;
				_canvasPanelCache.addExtendPanel(attributePanel);

				// 24.图例面板
				var legendPanel:LegendPanel = new LegendPanel();
				legendPanel.iTop = 36;
				legendPanel.iLeft = 10;
				_canvasPanelCache.addExtendPanel(legendPanel);


				//25.电路通道拓扑面板
				var channelPanel:ChannelTopoPanel = new ChannelTopoPanel();
				channelPanel.iBottom = 10;
				channelPanel.iLeft = 10;
				_canvasPanelCache.addExtendPanel(channelPanel);
				
			}

			/**
			 * 重置画布
			 */
			private function resetTopoCanvas():void
			{
				// 清空鹰眼
				topoCanvas.clearGoBackPaths();
				// 清空搜索
				deviceSearch.input.text = "";
				elementListPanel.hide();
			}

			/**
			 * 【加载拓扑】根据电路两端网元加载传输电路拓扑
			 * @param moId1
			 * @param moId2
			 * @param topoName 拓扑数据源名称
			 */
			public function loadCircuitTopoByDblMo(moId1:String, moId2:String, topoName:String):void
			{
				var properties:IMap = new Map();
				properties.put("moId1", moId1);
				properties.put("moId2", moId2);
				topoCanvas.dispatchEvent(new TopoEvent(TopoEventTypes.SHOW_CIRCUIT, null, properties));
			}

			/**
			 * 【加载拓扑】根据电路编号加载传输电路拓扑
			 * @param circId 电路id
			 * @param circCode 电路名称
			 * @param topoName 拓扑数据源名称
			 */
			public function loadCircuitTopoByCircCode(circId:String, circCode:String, topoName:String):void
			{
				var properties:IMap = new Map();
				properties.put("circId", circId);
				properties.put("circCode", circCode);
				properties.put("topoName", topoName);
				topoCanvas.dispatchEvent(new TopoEvent(TopoEventTypes.SHOW_CIRCUIT_BY_CIRCCODE, null, properties));
			}

			/**
			 * 【加载拓扑】加载指定层次的拓扑
			 * @param id 拓扑层次id
			 * @param topoName 拓扑数据源名称
			 * @param useCanvasTopoName topoName为空时是否使用画布的topoName
			 * @param resetCanvas 是否重置画布的标志位
			 */
			public function loadTopo(id:String, topoName:String = null, useCanvasTopoName:Boolean = true, resetCanvas:Boolean = true):void
			{
				if (resetCanvas)
				{
					resetTopoCanvas();
				}
				// 加载拓扑
				topoCanvas.loadTopo(id, topoName, useCanvasTopoName);
			}

			/**
			 * 【加载拓扑】根据模板和参数加载拓扑
			 * @param modelId 模板id
			 * @param modelParams  模板参数,格式为:  key:value#key:value#key:value
			 * @param topoName 拓扑数据源名称
			 */
			public function loadViewModelTopo(modelId:String, modelParams:String, topoName:String = null):void
			{
				resetTopoCanvas();
				topoCanvas.loadViewModelTopo(modelId, modelParams, topoName);
			}

			/**
			 * 【加载拓扑】加载指定的拓扑数据
			 * @param data 拓扑XML数据
			 */
			public function loadTopoXML(data:XML):void
			{
				resetTopoCanvas();
				topoCanvas.loadTopoXML(data);
			}

			/**
			 * 【搜索网元】
			 *
			 * @param moId 网元id
			 * @param rootPid 搜索的根
			 * @param topoName 拓扑数据源名称
			 * @param changeLayerConfirm 切换层次时是否弹出确认
			 * @param locateMultFirst 多个查询结果时是否定位到第一个
			 *
			 */
			public function searchMo(moId:String, rootPid:String, topoName:String = null, changeLayerConfirm:Boolean = false, locateMultFirst:Boolean = true):void
			{
				if (!StringUtils.isNullStr(topoName))
				{
					CmsTopoUtil.searchMoId(topoCanvas, _dataSource, elementListPanel, LoadingManager.getInstance().loadingInfo, topoName, moId, rootPid, changeLayerConfirm, locateMultFirst);
				}
				else
				{
					// 默认不去集客mc中进行搜索
					var topoNameRegex:String = "^((?!jtkh).)*$";
					CmsTopoUtil.searchMoIdByTopoNameRegex(topoCanvas, _dataSource, elementListPanel, LoadingManager.getInstance().loadingInfo, topoNameRegex, moId, rootPid, changeLayerConfirm, locateMultFirst);
				}
			}

			/**
			 * 【搜索集客】
			 *
			 * @param custId 集客id
			 * @param changeLayerConfirm 切换层次时是否弹出确认
			 * @param locateMultFirst 多个查询结果时是否定位到第一个
			 *
			 */
			public function searchCustId(custId:String, changeLayerConfirm:Boolean = false, locateMultFirst:Boolean = true):void
			{
				CmsTopoUtil.searchCustId(topoCanvas, _dataSource, elementListPanel, LoadingManager.getInstance().loadingInfo, custId, changeLayerConfirm, locateMultFirst);
			}

			/**
			 * 【定位当前层次中的第一个MO对象】
			 * @param moId
			 */
			public function locateMo(moId:String):void
			{
				topoCanvas.someNode(function(id:String, node:INode):void
					{
						if (node.getExtendProperty(CmsTopoConstants.XML_KEY_MO_ID) == moId)
						{
							topoCanvas.locateElement(id, node.name, topoCanvas.topoName);
						}
					});
			}

			private function topoComponent_preinitializeHandler(event:FlexEvent):void
			{
				LoadingManager.getInstance().loadingInfo = _loadingInfo;
			}
		]]>
	</fx:Script>
	<mx:VDividedBox id="vDividedBox"
					width="100%"
					height="100%"
					updateComplete="vDividedBox_updateCompleteHandler(event)">
		<s:VGroup id="vDivided_child1"
				  width="100%"
				  height="100%"
				  minHeight="100"
				  gap="0">
			<!-- 核心容器 -->
			<s:BorderContainer id="coreContainer"
							   width="100%"
							   height="100%"
							   cornerRadius="6">
				<topo:TopoPanelContainer id="panelContainer"
										 width="100%"
										 height="100%"
										 topoCanvas="{topoCanvas}">
					<topo:layout>
						<s:BasicLayout/>
					</topo:layout>
					<!-- 核心的画布 -->
					<component:TopoCanvas id="topoCanvas"
										  serviceContainer="{serviceContainer}"/>
					<!-- 鹰眼 -->
					<hawkeye:HawkEyeContainer id="hawkEyes"
											  bottom="5"
											  right="5"
											  topoCanvas="{topoCanvas}"/>
					<!-- 导航 -->
					<navigation:Navigation id="navigation"
										   visible="{_navigationEnabled}"
										   topoCanvas="{topoCanvas}"
										   top="10"
										   left="10"/>
					<!-- 工具栏 -->
					<toolbar:TopoToolBar id="editToolBar"
										 topoCanvas="{topoCanvas}"
										 top="36"
										 right="115">
						<!-- 移动模式 -->
						<action:MoveActionIcon/>
						<!-- 自动布局 -->
						<operation:AutoLayoutOptIcon/>
						<!-- 创建缩略图 -->
						<action:CreateHLinkLayerActionIcon/>
						<!-- 创建形状 -->
						<action:CreateShapeActionIcon/>
						<!-- 创建链路 -->
						<action:CreateLinkActionIcon/>
						<!-- 创建线对象 -->
						<action:CreateLineActionIcon/>
						<!-- 保存拓扑 -->
						<operation:SaveTopoOptIcon/>
						<!-- 告警渲染配置 -->
						<operation:AlarmRendererConfigOptIcon/>
					</toolbar:TopoToolBar>
					<toolbar:TopoToolBar id="toolBar"
										 topoCanvas="{topoCanvas}"
										 top="10"
										 right="15">
						<!-- 返回上一级 -->
						<operation:GoBackOptIcon/>
						<!-- 选择模式 -->
						<action:SelectActionIcon isDefault="true"/>
						<!-- 拖动模式 -->
						<action:PanActionIcon/>
						<!-- 放大操作 -->
						<action:ZoomOutActionIcon/>
						<!-- 缩小操作 -->
						<action:ZoomInActionIcon/>
						<!-- 一屏显示 -->
						<operation:OneScreenViewOptIcon/>
						<!-- 正常显示 -->
						<operation:OriginalViewOptIcon/>
						<!-- 导出图片 -->
						<operation:ExportImageOptIcon/>
						<!-- 打印 -->
						<operation:PrintOptIcon/>
						<!-- 属性显隐切换 -->
						<operation:AttrToggleOptIcon/>
						<!-- 图例显隐切换 -->
						<operation:LegendToggleOptIcon/>
						<!-- 统计面板显隐切换 -->
						<operation:StatisticToggleOptIcon visible="{_resStatEnabled}"
														  includeInLayout="{_resStatEnabled}"/>
						<!-- 编辑模式 -->
						<action:EditActionIcon subToolBar="{editToolBar}" id="edit"/>
						<!-- 鹰眼 -->
						<operation:HawkEyeOptIcon hawkEyes="{hawkEyes}"/>
						<!-- 搜索 -->
						<toolbar:DeviceSearch id="deviceSearch"
											  topoCanvas="{topoCanvas}"
											  dataSource="{_dataSource}"
											  elementListPanel="{elementListPanel}"
											  searchType="{_searchType}"
											  searchTopoNamesRegex="{_searchTopoNamesRegex}"/>
					</toolbar:TopoToolBar>

					<!-- 搜索列表面板 -->
					<panel:ElementListPanel id="elementListPanel"
											topoCanvas="{topoCanvas}"
											dataSource="{_dataSource}"
											right="15"
											top="62"/>

				</topo:TopoPanelContainer>
			</s:BorderContainer>
			<!-- 核心容器End -->
			<s:HGroup height="5"
					  width="100%"
					  horizontalAlign="center"
					  visible="{_flowAlarmEnable}"
					  includeInLayout="{_flowAlarmEnable}">
				<s:Button id="bottomDivider"
						  styleName="{STYPE_BOTTOM_GO_TOP}"
						  buttonMode="true"
						  click="bottomDivider_clickHandler()"/>
			</s:HGroup>
		</s:VGroup>
		<s:VGroup id="vDivided_child2"
				  width="100%"
				  minHeight="200"
				  visible="{_alarmDividedVisible}"
				  includeInLayout="{_alarmDividedVisible}">
			<!-- 告警面板 -->
			<cmscomponent:FlowAlarmPanel id="flowAlarm"
										 height="240"
										 includeInLayout="{_flowAlarmEnable}"
										 creationComplete="flowAlarm.hide();"
										 topoCanvas="{topoCanvas}"
										 dataSource="{_dataSource}"
										 dataSourceCms="{_dataSourceCms}"
										 urlContext="{_urlContext}"
										 elementListPanel="{elementListPanel}"/>
		</s:VGroup>
	</mx:VDividedBox>
</s:Group>
