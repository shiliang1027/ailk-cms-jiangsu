<?xml version="1.0" encoding="utf-8"?>
<ailk_compts:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					width="100%"
					height="100%"
					dragable="true"
					minimizable="false"
					maximizable="false"
					styleName="windowScene"
					xmlns:parsley="http://www.spicefactory.org/parsley"
					xmlns:ailk_compts="http://www.asiainfo-linkage.com.cn/flex/components"
					title="区域选择"
					close="window1_closeHandler(event)">
	<!--
		 ***************************************
		 gis定位后，跳转到不同区域，需要进行选择窗口
		 @author hurw (69065)
		 @version 1.0
		 @date 2013-4-9
		 @langversion 3.0
		 @playerversion Flash 11
		 @productversion Flex 4
		 @copyright Ailk NBS-Network Mgt. RD Dept.
		 ***************************************
	-->
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<parsley:Configure/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.ailk.common.system.logging.ILogger;
			import com.ailk.common.system.logging.Log;
			import com.ailk.common.ui.components.window.standardwindow.event.WindowEvent;
			import com.linkage.module.cms.gsscene.view.components.common.domain.IUser;
			import com.linkage.module.cms.gsscene.view.components.common.event.SceneEvent;
			import com.linkage.module.cms.gsscene.view.components.mapview.MapViewPM;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.ListEvent;

			private var _param:Object; //相关gis定位的数据信息


			private var log:ILogger = Log.getLoggerByClass(AreaChangeGridComp);

			[MessageDispatcher]
			public var dispatchMsg:Function;

			[Bindable]
			[Inject("mapViewPM")]
			public var mapViewPM:MapViewPM;

			private var dealType:String = ""; //single单网元  mult多网元

			private var singleCoordinate:Object;

			[Inject("user")]
			public var user:IUser;

			protected function advanceddatagrid1_itemClickHandler(event:ListEvent):void
			{
				var item:Object = areaGrid.selectedItem;
				if (dealType == "single")
				{
					log.info("单网元gis定位");
					gisDingwei(item['areaId'], singleCoordinate["longitude"], singleCoordinate["latitude"]);
				}
				else if (dealType == "mult")
				{
					log.info("多网元gis定位");
					mapViewPM.mapViewDM.gisPositionList.removeAll();
					for each (var obj:Object in areaGrid.dataProvider)
					{
						if (obj["areaId"] == item["areaId"])
						{
							mapViewPM.mapViewDM.gisPositionList.addItem(obj);
						}
					}
					gisDingwei(item['areaId'], item["longitude"], item["latitude"]);
				}

				this.visible = false;
				this.includeInLayout = false;
			}

			[MessageHandler(selector="SHOW_MOGIS_LAYER")]
			public function showMoGisLayer(e:SceneEvent):void
			{
				log.info("处理数据！！e:{0}", e);
				if (e.param)
				{
					if (e.param is ArrayCollection)
					{
						log.info("判断查询结果是否为空！");
						if ((e.param as ArrayCollection).length == 0)
						{
							Alert.show("未查询到指定的网元数据！", "错误");
							return;
						}
						log.info("判断所选数据是否在一个区域");

						var firstAreaId:String;
						for each (var obj:Object in e.param)
						{
							if (!firstAreaId)
								firstAreaId = obj["areaId"];
							if (obj["areaId"] != firstAreaId)
							{
								dealType = "mult";
								this.visible = true;
								this.includeInLayout = true;
								areaGrid.dataProvider = e.param;
								log.info("多网元gis定位");
								return;
							}
						}

						mapViewPM.mapViewDM.gisPositionList.addAll(e.param as IList);
						obj = mapViewPM.mapViewDM.gisPositionList.getItemAt(0);
						gisDingwei(obj['areaId'], obj["longitude"], obj["latitude"]);
					}
					else
					{
						dealType = "single";
						log.info("单网元gis定位");
						singleCoordinate = new Object();
						singleCoordinate.longitude = e.param["longitude"];
						singleCoordinate.latitude = e.param["latitude"];
						log.info(e.param);
						log.info(e.param.areaList);
						log.info("单网元gis定位-------");
						if (e.param.hasOwnProperty("areaList") && e.param.areaList.length > 1)
						{ //如果是多个区域

							log.info("如果是多个区域！");
							areaGrid.dataProvider = e.param.areaList;
							this.visible = true;
							this.includeInLayout = true;
							var s:Rectangle = systemManager.screen;
							var appWidth:Number;
							var appHeight:Number;
							var parentWidth:Number;
							var parentHeight:Number;

							appWidth = s.width;
							appHeight = s.height;
							parentWidth = this.parent.width;
							parentHeight = this.parent.height;
							x = Math.max(0, (Math.min(appWidth, parentWidth) - this.width) / 2);
							y = Math.max(0, (Math.min(appHeight, parentHeight) - this.height) / 2);
						}
						else if (e.param.hasOwnProperty("areaList") && e.param.areaList.length == 1)
						{ //如果只有一条，直接跳转该区域
							log.info("如果是一个区域！");
							for each (var area:Object in e.param.areaList)
							{
								gisDingwei(area['areaId'], e.param["longitude"], e.param["latitude"]);
								break;
							}
						}
						else
						{
							Alert.show("未查询到指定的网元数据！", "错误");
							log.error("后台返回数据错误！");
							return;
						}
					}

				}

			}

			private function gisDingwei(areaId:String, longitude:String, latitude:String):void
			{
				var evt:SceneEvent;
				if (user.level == "2")
				{
					evt = new SceneEvent(SceneEvent.SEARCH_MOGIS_LAYER);
				}
				else
				{
//					user.sceneId = areaId;
//					user.areaId = areaId;
//					user.level = "2";
//					user.currentMapType = "0";
//					evt = new SceneEvent(SceneEvent.CHANGE_MAPVIEW);
//					evt.param = new Object();
//					evt.param.centerlongitude = longitude;
//					evt.param.centerlatitude = latitude;
					user.isGisFlag = "1";
					log.info("切换到区域视图：");
					evt = new SceneEvent("DEAL_SCENE_CHANGE");
					evt.param = new Object();
					evt.param.id = areaId;
					evt.param.name = '';
					evt.param.level = "2";
					evt.param.cityId = '';
					evt.param.centerlongitude = longitude;
					evt.param.centerlatitude = latitude;
				}
				dispatchMsg(evt);
			}

			public function get param():Object
			{
				return _param;
			}

			public function set param(value:Object):void
			{
				_param = value;
			}

			protected function window1_closeHandler(event:WindowEvent):void
			{
				this.visible = false;
				this.includeInLayout = false;
			}
		]]>
	</fx:Script>

	<mx:AdvancedDataGrid id="areaGrid"
						 width="100%"
						 height="100%"
						 styleName="sceneDG"
						 sortExpertMode="false"
						 itemClick="advanceddatagrid1_itemClickHandler(event)">
		<mx:columns>
			<mx:AdvancedDataGridColumn headerText="网元名称"
									   dataField="moName"/>
			<mx:AdvancedDataGridColumn headerText="区域名称"
									   dataField="areaName"/>
		</mx:columns>

	</mx:AdvancedDataGrid>
</ailk_compts:Window>
