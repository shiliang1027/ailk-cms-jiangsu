<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:panel="com.linkage.system.component.panel.*"
                   xmlns:parsley="http://www.spicefactory.org/parsley"
				   xmlns:components="com.linkage.module.cms.gsscene.view.components.scenethumbnail.components.*"
                   width="100%"
                   styleName="sceneBorderContainer">
    <!--
         ***************************************
         This is Content
         @author hrw (Ailk No.)
         @version 1.0
         @date 2012-7-30
         @langversion 3.0
         @playerversion Flash 11
         @productversion Flex 4
         @copyright Ailk NBS-Network Mgt. RD Dept.
         ***************************************
    -->
    <fx:Declarations>
        <parsley:Configure/>
    </fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.ailk.common.system.logging.ILogger;
			import com.ailk.common.system.logging.Log;
			import com.ailk.common.ui.components.requestserver.RequestServerUtil;
			import com.linkage.module.cms.gsscene.view.components.common.domain.IUser;
			import com.linkage.module.cms.gsscene.view.components.common.event.SceneEvent;
			import com.linkage.module.cms.gsscene.view.components.sceneresume.components.GroupTip;
			import com.linkage.module.cms.gsscene.view.components.scenethumbnail.SceneThumbnailCompPM;
			import com.linkage.module.cms.gsscene.view.components.scenethumbnail.event.SceneThumbnailEvent;
			
			import flash.utils.setTimeout;
			
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import spark.components.Group;
			import spark.components.Label;
			
			private var log:ILogger = Log.getLoggerByClass(SceneThumbnailComp);
			
			[Inject("user")]
			public var user:IUser;
			
			[MessageDispatcher]
			public var dispatchMsg:Function;
			
			[Bindable]
			[Embed(source = "../../img/start_end.png")]
			public var startEnd:Class;
			
			private var cityId:String = ""; //当前缩略图显示的地市
			
			private var firstFlag:Boolean = true;
			
			[Inject("sceneThumbnailCompPM")]
			public var stcPM:SceneThumbnailCompPM;
			
			[Inject("requestServerUtil")]
			public var requestServerUtil:RequestServerUtil;
			
			[MessageDispatcher]
			public var msgDispatcher:Function;
			
			[MessageHandler(selector="COMPONENT_REFRESH_DATA")]
			[MessageHandler(selector = "AREAORMO_DATACHANGE")]
			public function loadData(e:SceneEvent = null):void
			{
				//如果是1004场景，判断是否是第一次加载，如果是第一次加载，那么加载假数据，不需要从后台获取数据
				if (user.sceneId == "1004" && firstFlag && stcPM.stdm.data.length == 4)
				{
					msgDispatcher(new SceneThumbnailEvent(SceneThumbnailEvent.THUMBNAIL_CREATEHANDLER));
					firstFlag = false;
					return;
				}
				
				
				if (user.level == "2" || user.cityId == cityId)
				{
					log.info("不加载区域缩略图！！");
					return;
				}
				cityId = user.cityId;
				log.info("区域缩略图组件 初始化：" + e);
				stcPM.getSceneAreaList();
			}
			
			//生成缩略图组
			[MessageHandler(selector = "THUMBNAIL_CREATEHANDLER")]
			public function createThumbnailInit(e:SceneThumbnailEvent):void
			{
				log.info("SceneThumbnailComp createThumbnailInit");
				var image:Image = null;
				showGroup.removeAllElements();
				
				for each (var obj:Object in stcPM.stdm.data)
				{
					var gt:GroupTip = new GroupTip();
					gt.param = obj;
					gt.id = obj.areaId;
					
					if (obj.CITY_ID)
						gt.name = obj.CITY_ID;
					else
						gt.name = obj.city_id;
					
					gt.toolTip = obj.areaName;
					gt.source = user.context + obj.imgUrl;
					gt.text = obj.areaName;
					gt.setStyle("backgroundPlpha", "1");
					
					if (obj.hasOwnProperty("color") && obj["color"])
					{
						gt.setStyle("borderColor", obj["color"]);
						gt.setStyle("backgroundColor", obj["color"]);
					}
					else
					{
						gt.setStyle("borderColor", 0X00FF00);
						gt.setStyle("backgroundColor", 0X00FF00);
					}
					
					gt.addEventListener(MouseEvent.CLICK, stcPM.getSceneInfo);
					
					if (obj.hasOwnProperty("flag") && obj["flag"] == "1")
					{
					}
					else
					{
						gt.contextMenu = new ContextMenu();
						gt.contextMenu.hideBuiltInItems();
						var cmi:ContextMenuItem = new ContextMenuItem("性能数据");
						cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, showImgTip);
						gt.contextMenu.customItems.push(cmi);
						
						cmi = new ContextMenuItem("删除区域");
						cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, deleteImgHandler);
						gt.contextMenu.customItems.push(cmi);
					}
					
					
					showGroup.addElement(gt);
				}
				log.info("缩略图加载完成！！");
			}
			
			public function showImgTip(evt:ContextMenuEvent):void
			{
				var gt:GroupTip = evt.contextMenuOwner as GroupTip;
				
				modalTipWindow.x = gt.x - 115 - mGroup.horizontalScrollBar.value;
				modalTipWindow.y = gt.y - 175;
				
				if (modalTipWindow.x < 0)
					modalTipWindow.x = 5;
				
				if (modalTipWindow.x + modalTipWindow.width > this.width)
					modalTipWindow.x = this.width - modalTipWindow.width - 5;
				
				modalTipWindow.visible = true;
				modalTipWindow.includeInLayout = true;
				modalTipWindow.tipArray.removeAll();
				var e:SceneThumbnailEvent = new SceneThumbnailEvent(SceneThumbnailEvent.SCENE_AREABAD_IMPPERF_GET);
				e.data = new Object;
				e.data.cityId = user.cityId;
				e.data.sceneId = gt.param.sceneId;
				e.data.areaId = gt.param.areaId;
				//                msgDispatcher(e);
				requestServerUtil.addRequest(e);
			}
			
			//删除该区域，如果该区域不是当前用户创建，那么删除失败
			public function deleteImgHandler(evt:ContextMenuEvent):void
			{
				var gt:GroupTip = evt.contextMenuOwner as GroupTip;
				Alert.show("是否确定删除该区域?", "提示", Alert.YES | Alert.NO, null, function(e:CloseEvent):void
				{
					if (e.detail == Alert.YES)
					{
						var param:Object = new Object();
						param.account = user.account;
						param.areaId = gt.param.areaId;
						param.sceneId = gt.param.sceneId;
						param.sceneFlag = "0"; //默认不清楚状态
						stcPM.deleteImgData(param);
					}
				});
				
				
			}
			
			private var oldx:Number = -111;
			private var oldy:Number = -111;
			
			public function delayHandler(evt:MouseEvent):void
			{
				oldx = evt.stageX;
				oldy = evt.stageY;
				
				setTimeout(function():void
				{
					showImgTipHandler(evt);
				}, 3000);
				
			}
			
			//显示缩略图tip窗口，
			public function showImgTipHandler(evt:MouseEvent = null):void
			{
				if (oldx != evt.stageX || oldy != evt.stageY)
					return;
				
				var gt:GroupTip = evt.currentTarget as GroupTip;
				
				var x:Number = gt.x;
				var y:Number = gt.y;
				
				modalTipWindow.x = gt.x - 115 - mGroup.horizontalScrollBar.value;
				modalTipWindow.y = gt.y - 175;
				
				if (modalTipWindow.x < 0)
					modalTipWindow.x = 5;
				
				if (modalTipWindow.x + modalTipWindow.width > this.width)
					modalTipWindow.x = this.width - modalTipWindow.width - 5;
				
				modalTipWindow.visible = true;
				modalTipWindow.includeInLayout = true;
				modalTipWindow.tipArray.removeAll();
				var e:SceneThumbnailEvent = new SceneThumbnailEvent(SceneThumbnailEvent.SCENE_AREABAD_IMPPERF_GET);
				e.data = new Object;
				e.data.cityId = user.cityId;
				e.data.sceneId = gt.param.sceneId;
				e.data.areaId = gt.param.areaId;
				//                msgDispatcher(e);
				requestServerUtil.addRequest(e);
				
			}
			
			//初始化弹出窗口数据
			[MessageHandler(selector = "SCENE_AREABAD_IMPPERF_INIT")]
			public function initModalTipWindowHandler(e:SceneThumbnailEvent):void
			{
				
				modalTipWindow.tipArray.removeAll();
				log.info(stcPM.stdm.badList);
				modalTipWindow.tipArray.addAll(stcPM.stdm.badList);
				
			}
			
			//删除缩略图tip窗口
			public function hiddenImgTipHandler(evt:MouseEvent):void
			{
				oldx = -111;
				oldy = -111;
				modalTipWindow.visible = false;
				modalTipWindow.includeInLayout = false;
			}
			
			protected function bordercontainer1_creationCompleteHandler(event:FlexEvent):void
			{
				setTimeout(function():void
				{
					loadData();
				}, 3000);
			}
			
			public function showEle(flag:Boolean):void
			{
				mGroup.visible = flag;
				mGroup.includeInLayout = flag;
			}
			
			protected function image1_clickHandler(event:MouseEvent):void
			{
				//抛出事件处理
				
				if (user.initSceneId == "1004" || user.initSceneId == "1001")
					stcPM.startImgGetData();
				else
					stcPM.cityTreeGetData();
			}
			
			private var scParam:Object;
			
			[MessageHandler(selector = "CMS_SCENE_SCENETHUMBNAIL_DELETEIMGSCENEDATA")]
			public function confirmSceneDelete(e:SceneThumbnailEvent):void
			{
				log.info(e.data);
				scParam = e.data;
				Alert.show("该区域是本场景最后一个区域，是否确定删除区域后删除该场景？", "提示", (Alert.OK | Alert.NO | Alert.CANCEL), null, deleteSceneHandler);
				
			}
			
			private function deleteSceneHandler(ce:CloseEvent):void
			{
				var evt:SceneThumbnailEvent = new SceneThumbnailEvent(SceneThumbnailEvent.CMS_SCENE_SCENETHUMBNAIL_DELETEIMGDATA);
				
				if (ce.detail == Alert.OK)
				{
					log.info("删除场景和区域");
					scParam.sceneFlag = "1"; //删除
					evt.data = scParam;
					log.info(evt.data);
					//                    dispatchMsg(evt);
					requestServerUtil.addRequest(evt);
				}
				else if (ce.detail == Alert.NO)
				{
					log.info("不删除场景，之删除区域");
					scParam.sceneFlag = "2"; //不删除
					evt.data = scParam;
					log.info(evt.data);
					//                    dispatchMsg(evt);
					requestServerUtil.addRequest(evt);
				}
			}
		]]>
	</fx:Script>
	<s:Group id="thGroup"
			 width="100%"
			 height="100%">
		<s:Scroller width="{thGroup.width - modalTipWindow.width + 170}"
					height="100%"
					id="mGroup"
					right="15"
					styleName="sceneScroller"
					left="15"
					horizontalScrollPolicy="auto">
			
			<s:HGroup width="100%"
					  horizontalAlign="center"
					  clipAndEnableScrolling="true"
					  height="100%">
				<mx:HBox id="showGroup"
						 width="100%"
						 right="15"
						 visible="true"
						 height="100%"
						 horizontalAlign="right"
						 verticalAlign="middle"
						 horizontalGap="15"
						 horizontalScrollPolicy="off"
						 verticalScrollPolicy="off"/>
			</s:HGroup>
		</s:Scroller>
		<components:ModalTipWindow id="modalTipWindow"
								   visible="false"
								   includeInLayout="false"/>
		<mx:Image source="{startEnd}"
				  buttonMode="true"
				  top="1"
				  right="2"
				  click="image1_clickHandler(event)"
				  toolTip="区域启停"/>
	</s:Group>
</s:BorderContainer>
