<?xml version="1.0" encoding="utf-8"?>
<panel:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:pager="com.linkage.module.cms.components.pager.*"
		 xmlns:panel="com.linkage.system.component.panel.*" 
		 title="告警查询信息"
		 minimizable="false"
		 closable="false"
		 maximizable="true" 
		 initialize="window1_initializeHandler(event)"
		 maximize="window1_maximizeHandler('1')"
		 restore="window1_maximizeHandler('2')" xmlns:parsley="http://www.spicefactory.org/parsley" xmlns:ailk_compts="http://www.asiainfo-linkage.com.cn/flex/components"
		 >
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.linkage.module.cms.alarm.framework.common.util.AlarmUtil;
			import com.linkage.module.cms.components.loadmanager.LoadManager;
			import com.linkage.module.cms.specialty.alarmSearch.common.AlarmSeverityColumnRenderer;
			import com.linkage.module.cms.specialty.alarmSearch.common.HeaderCheckRenderer;
			import com.linkage.module.cms.specialty.alarmSearch.common.RightClickManager;
			import com.linkage.module.cms.specialty.alarmSearch.common.TreeCheckBoxRenderer;
			import com.linkage.module.cms.specialty.alarmSearch.event.AlarmSignEvent;
			import com.linkage.system.component.panel.events.WindowEvent;
			import com.linkage.system.logging.ILogger;
			import com.linkage.system.logging.Log;
			import com.linkage.system.rpc.http.HttpUtil;
			import com.linkage.system.rpc.remoting.BlazeDSUtil;
			import com.linkage.system.structure.map.IMap;
			import com.linkage.system.structure.map.Map;
			import com.linkage.system.utils.ExcelUtil;
			import com.linkage.system.utils.StringUtils;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.HierarchicalCollectionView;
			import mx.collections.HierarchicalData;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridGroupItemRenderer;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridItemRenderer;
			import mx.controls.advancedDataGridClasses.MXAdvancedDataGridItemRenderer;
			import mx.controls.listClasses.IDropInListItemRenderer;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import nl.demonsters.debugger.MonsterDebugger;
			
			import org.osmf.layout.PaddingLayoutFacet;
			
			private var _userName:String = null;
			private var startTime:String = null;
			private var endTime:String = null;
			
			protected var rightClickRegisted:RightClickManager;
			
			//日志
			private var logger:ILogger = Log.getLogger("com.linkage.module.cms.specialty.alarmSearch");
			private var endpoint_suffix:String = "messagebroker/amf";
			private var _context:String = "";
			
			[Embed(source="img/icon_export.png")]
			[Bindable]
			public static var iconExport:Class;
			
			[Embed(source="img/icon_defind.png")]
			[Bindable]
			public static var iconConfig:Class;
			
			[Embed(source="img/treeOpen.png")]
			public static var treeOpen:Class;
			
			[Embed(source="img/treeClose.png")]
			public static var treeClose:Class;
			
			
			private var _scObj:Object = null;
			
			private var _alarmArrayCache:ArrayCollection = new ArrayCollection();;
			
			private var _resizeCallback:Function;
			
			//需要加载
			public static var _specLabelMap:Object = {1: '话音网', 2: '无线网', 3: 'TD', 4: '数据网', 5: '传输网', 6: 'IP承载网', 7: '安全网', 8: '动环网', 9: '关联衍生告警', 10: '跨专业'};
			
			
			private var colConfData:ArrayCollection = null;
			
			private var exportColumns:Array = new Array();
			
			private var alarmColArr:Array = null;
			private var alarmColArr2:Array = null;//包含规则名称的表头
			
			private var _hcv:HierarchicalCollectionView;
			
			private var loadManger:LoadManager = new LoadManager(this);
			
			private var _sc:SearchConditionDiv;
			private var _showal:ShowAlarmListModule;
			
			public var cm:ContextMenu = new ContextMenu();
			
			private var cmiCacheActive:Object = {};
			private var cmiCacheMultiSelected:Object = {};
			private var cmiCacheNoActive:Object = {};
			
			public var allCmis:Object;
			
			private var cmi_sheetDetail:ContextMenuItem = new ContextMenuItem("工单详情");
			private var cmi_alarmDetail:ContextMenuItem = new ContextMenuItem("告警详情");
			private var cmi_alarmDisp:ContextMenuItem = new ContextMenuItem("告警派单");
			private var cmi_resource:ContextMenuItem = new ContextMenuItem("资源查看");
			private var cmi_gis:ContextMenuItem = new ContextMenuItem("GIS查询");
			private var cmi_topo:ContextMenuItem = new ContextMenuItem("拓扑查询");
			private var cmi_sm:ContextMenuItem = new ContextMenuItem("短信派发");
			private var cmi_noDispSheet:ContextMenuItem = new ContextMenuItem("抑制派单");
			private var cmi_noDispSheet_multi:ContextMenuItem = new ContextMenuItem("抑制派单");
			private var cmi_alarmAck:ContextMenuItem = new ContextMenuItem("告警确认");
			private var cmi_alarmAck_multi:ContextMenuItem = new ContextMenuItem("告警确认");
			private var cmi_alarmClear:ContextMenuItem = new ContextMenuItem("告警清除");
			private var cmi_alarmClear_multi:ContextMenuItem = new ContextMenuItem("告警清除");
			private var cmi_alarmSign:ContextMenuItem = new ContextMenuItem("标记");
			private var cmi_alarmSign_multi:ContextMenuItem = new ContextMenuItem("标记");
			private var cmi_alarmMark:ContextMenuItem = new ContextMenuItem("告警备注");
			private var cmi_alarmMark_multi:ContextMenuItem = new ContextMenuItem("告警备注");
			private var cmi_alarmAnalysis:ContextMenuItem = new ContextMenuItem("核心网告警分析");
			private var cmi_alarmAnalysis_multi:ContextMenuItem = new ContextMenuItem("核心网告警分析");
//			private var cmi_sheetMark:ContextMenuItem = new ContextMenuItem("工程标注");
			private var cmi_alarmRel:ContextMenuItem = new ContextMenuItem("告警关联");
			private var cmi_sheetView:ContextMenuItem = new ContextMenuItem("工程查看");
			private var cmi_expQuery:ContextMenuItem = new ContextMenuItem("知识库查询");
			private var cmi_IMS:ContextMenuItem = new ContextMenuItem("IMS呼叫");
			private var cmi_perfView:ContextMenuItem = new ContextMenuItem("性能查看");

			private var cmi_addAlarmToSheet_multi:ContextMenuItem = new ContextMenuItem("增加告警至指定工单");//增加告警至指定工单

			//http://10.40.11.118:11210/cms/warn/pre/preAction!alarmHandRelation.action
			private var cmi_alarmHandRelation_multi:ContextMenuItem = new ContextMenuItem("告警关联");//增加告警至指定工单
			//http://10.40.11.118:11210/cms/warn/pre/preAction!alarmRelationSep.action?alarmuniqueid=00|1648530301
			private var cmi_alarmRelationSep:ContextMenuItem = new ContextMenuItem("告警解除");//增加告警至指定工单
			
			private var cmi_alarmRelationRule:ContextMenuItem = new ContextMenuItem("关联规则");//关联规则
			
			private var cmi_alarmEncyclopediaDetail:ContextMenuItem = new ContextMenuItem("告警百科详情");//告警百科详情
			
			
			private var cmi_handleMenuItem:ContextMenuItem = new ContextMenuItem("手工派单");//告警百科详情
			private var cmi_handleMenuItem_multi:ContextMenuItem = new ContextMenuItem("手工派单");//告警百科详情
			
			private var stopivr:ContextMenuItem = new ContextMenuItem("IVR呼叫抑制");//IVR呼叫抑制
			//checkbox 选中个数
			public var checkboxMap:IMap = new Map();
			[Inject("alarmSignPM")]
			public var alarmSignPM:AlarmSignPM;
			//历史告警不需要的菜单
			
			//规则名称表头
			private var ruleNameColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
			
			public function set context(c:Object):void
			{
				_context = String(c);
				
				ruleNameColumn.headerText = '规则名称';
				ruleNameColumn.dataField = 'rulename';
				ruleNameColumn.width = ruleNameColumn.headerText.length * 25;
			}
			
			//处理关联查询时的表头，添加规则名称到第一列，否则去除
			public function dealColumns():void
			{
				if(_scObj['isRela'] == '1')
				{
					alarmDataGrid.columns = this.alarmColArr2;
				}
				else
				{
					alarmDataGrid.columns = this.alarmColArr;
				}
			}
			public function initColumn(colData:ArrayCollection):void
			{
				
				colConfData = colData;
				alarmColArr = new Array();
				alarmColArr2 = new Array();
				
				var dgc:AdvancedDataGridColumn = new AdvancedDataGridColumn();
				HeaderCheckRenderer.p = this;
				dgc.headerRenderer=new ClassFactory(HeaderCheckRenderer);
				dgc.width=51;
                dgc.sortable =false;
				alarmColArr.push(dgc);
				alarmColArr2.push(dgc);
				alarmColArr2.push(ruleNameColumn);
				
				for each(var col:String in colConfData)
				{
					var dgColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
					dgColumn.headerText = col.split(",")[0];
					dgColumn.dataField = col.split(",")[1];
					dgColumn.width = dgColumn.headerText.length * 20;
					
					exportColumns.push({id:col.split(",")[1], name:col.split(",")[0]});
					
					switch (dgColumn.dataField)
					{
						case "specialty":
							dgColumn.width = 80;
							break;
						case "alarmseverity": // 告警级别
							dgColumn.itemRenderer = new ClassFactory(AlarmSeverityColumnRenderer);
							break;
						case "eventtime": // 告警时间
						case "canceltime": // 告警时间
						case "daltime": // 告警时间
						case "acktime": // 告警时间
							dgColumn.width = 190;
							break;
						case "alarmtitle": // 告警标题
						case "alarmtext": // 告警正文
							dgColumn.wordWrap = false;
							break;
					}
					
					logger.info(">>>## 初始化列 : " + col + "  列宽度 : " + dgColumn.width);

					alarmColArr.push(dgColumn);
					alarmColArr2.push(dgColumn);
				}
				
				alarmDataGrid.columns = alarmColArr;
				
				
				rightClickRegisted = new RightClickManager(this);
				//				rightClickRegisted.addRightClickMenu(alarmDataGrid);
				rightClickManager1(this);
				addRightClickMenu(alarmDataGrid);
				
				initContextMenu();

				logger.info(">>> 初始化列 完成！");
			}
			
			public function setData(data:ArrayCollection, startTime:String, endTime:String, totalNum:Object, scObj:Object):void
			{
                checkboxMap.clear();
                cm.customItems = [];
                
				this.startTime = startTime;
				this.endTime = endTime;
				_scObj = scObj;
				
				this.dealColumns();
				
				for each(var alarm:Object in data)
				{
					alarm['checked'] = 0;
				}
				
				logger.info(">>> 设置查询结果数据。。。");
				_hcv = new HierarchicalCollectionView(new HierarchicalData(data));
				alarmDataGrid.dataProvider = _hcv;
				
				_alarmArrayCache.removeAll();
				_alarmArrayCache.addAll(data);
				logger.info(">>> 设置查询结果数据 结束! length:" + _hcv.length);
				
			}
            
            public function clearData():void
            {
                alarmDataGrid.dataProvider = new ArrayCollection();
            }
			
			public function setAllAlarmSelected(flag:Boolean):void
			{
                logger.info("告警查询全选按钮事件处理！" + flag);
                
                try{
    				if(!flag)
    					checkboxMap.clear();
					
					dealAll(_alarmArrayCache, flag);
    				
    				_hcv = new HierarchicalCollectionView(new HierarchicalData(_alarmArrayCache));
					alarmDataGrid.dataProvider = _hcv;
                    _hcv.refresh();
                }
                catch(e:Error)
                {
                    Alert.show("处理全选操作错误：" + e.message);
                }
			}
			
			private function dealAll(datas:Object, flag:Boolean):void
			{
				for each(var alarm:Object in datas)
				{
					alarm['checked'] = flag ? 1 : 0;
					
					if(flag)
						checkboxMap.put(alarm['alarmuniqueid'], alarm);
					
					if(alarm.hasOwnProperty("children") && 
						alarm['children'] != null &&
						alarm['children'].length > 0)
						dealAll(alarm['children'], flag);
				}
			}
			
			public function setAlarmSelected(data:Object):void
			{
				if(data['checked'] == 1)
				{
					checkboxMap.put(data['alarmuniqueid'], data);
				}
				else
				{
					checkboxMap.remove(data['alarmuniqueid']);
				}
			}
			
			public function setTotalNum(totalNum:Object):void
			{
				pager.totalRowCount = Number(totalNum);
				
				var maxPage:uint = 0;
				if(pager.totalRowCount%pager.pageSize == 0)
					maxPage = pager.totalRowCount/pager.pageSize;
				else
					maxPage = pager.totalRowCount/pager.pageSize + 1;
				
				logger.info(" --  totalNum:" + totalNum + " maxPage:" + maxPage);
				
				pager.maxPage = maxPage;
			}
			

			protected function clickHandler_exportExcel2():void
			{
				if(_scObj == null)
				{
					Alert.show("请先查询,再导出。");
					return;
				}
				
				confirmWindow2.visible = true;
				export.enabled = false;
				export.buttonMode = false;
			}
			
			protected function clickHandler_exportExcel():void
			{
				if(_scObj == null)
				{
					Alert.show("请先查询,再导出。");
					return;
				}
				
				logger.info(">>> 导出数据。。。   加载需要导出的数据。。。");
				
				var remoteService:RemoteObject = BlazeDSUtil.newService(AlarmSearchModule.destination, AlarmSearchModule.src, AlarmSearchModule.endpoint,
					function(result:Object):void
					{
						logger.info(">>> 查询告警成功");
						_sc.loadManger.hideLoading();
						if(null == result || result['datas'] == null)
						{
							logger.error(">>> 查询告警为null");
							Alert.show('没有符合条件的数据！');
						}
						else
						{
							_alarmArrayCache.removeAll();
							_alarmArrayCache.addAll(result['datas']);
							exportData();
						}
					},
					function(event:FaultEvent):void
					{
						_sc.loadManger.hideLoading();
						Alert.show('查询告警失败:' +  event.fault.faultString);
					});
				
				_scObj['beginRowNum'] = "0";
				_scObj['endRowNum'] = String(_scObj['endRowNum']);
				_scObj['maxnum'] = "10";
				
				logparams();
				
				_sc.loadManger.showLoading(" 正在加载数据，请稍后...");
				remoteService.getWarnDatas(_scObj);
			}
			
			private function logparams():void
			{
				logger.info(">>> 导出  查询条件=========================");
				logger.info(_scObj);
				logger.info(">>> 导出  查询条件=========================");
			}

			private function exportData():void
			{
				confirmWindow.visible = true;
				msgLabel.text = "总共 " + _alarmArrayCache.length + "条记录，确定导出吗？"
				export.enabled = false;
				export.buttonMode = false;
			}
			
			private function getAllAlarms(alarmArr:Object):ArrayCollection
			{
				if(null == alarmArr || alarmArr.length < 1)
				{
					return null;
				}
				
				var returnArr:ArrayCollection = new ArrayCollection();
				
				for each(var alarm:Object in alarmArr)
				{
					returnArr.addItem(alarm);
					
					if(alarm != null && alarm['children'] != null && alarm['children'].length > 0)
					{
						returnArr.addAll(this.getAllAlarms(alarm['children']));
					}
				}
				
				return returnArr;
			}
			
			protected function confColumns(event:MouseEvent):void
			{
				ExternalInterface.call("showColConfWindow");
			}

			protected function loadSubOrParentWarns(event:AdvancedDataGridEvent):void
			{
				logger.info("### parentflag:" + event.item.parentflag + " id:" + event.item.alarmuniqueid);
				switch(String(event.item.parentflag))
				{
					case '1'://子告警  
						loadParentWarns(event);
						break;
					
					case '2'://父告警
						loadSubWarns(event);
						break;
					
					case '3'://父子告警
						if(event.item.hasOwnProperty('isChild'))
						{
							//加载它的子告警
							loadSubWarns(event);
						}
						else
						{
							//加载它的父告警
							loadParentWarns(event);
						}
						break;
				}
			}
			
			protected function loadParentWarns(event:AdvancedDataGridEvent):void
			{
				var destination:String = AlarmSearchModule.destination;
				var src:String = AlarmSearchModule.src;
				var endpoint:String = AlarmSearchModule.endpoint;
				logger.info("destination-->"+destination);
				logger.info("src-->"+src);
				logger.info("endpoint-->"+endpoint);
				var remoteService:RemoteObject = BlazeDSUtil.newService(destination, src, endpoint,
					function(result:Object):void
					{
						logger.error(">>> 查询父告警成功返回。");
						if(null == result)
						{
							logger.error(">>> 查询父告警为null");
							Alert.show('没有符合条件的数据！');
						}
							
						else
						{
							
							for each(var al:Object in result.children)
							{
								al['isChild'] = 1;
							}
							
							event.item.children.removeAll();
							event.item.children.addAll(result.children);
							
							for(var p:Object in result)
							{
								if(p == "children")
									continue;
								event.item[p] = result[p];
								logger.info(">>> 查询父告警  设置属性：" + p + " --> " + result[p]);
							}
							
							for each(var a:Object in _alarmArrayCache)
							{
								if(a['alarmuniqueid'] == event.item.alarmuniqueid)
									for(var p:Object in result)
									{
										if(p == "children")
											continue;
										a[p] = result[p];
									}
							}
							
							logger.info(">>> 查询父告警  刷新数据集。");
							_hcv.refresh();
							
							loadManger.hideLoading();
							result = null;
						}
					},
					function(event:FaultEvent):void
					{
						logger.error(">>> 查询父告警失败！ ：", event.fault.faultString);
					});
				
                _scObj['alarmuniqueid'] = event.item.alarmuniqueid;
				
				logger.info(">>> 查询父告警条件 ============================");
                logparams();
				logger.info(">>> 查询父告警条件 ============================");
				
				loadManger.showLoading();
				
				remoteService.getParentWarns({"alarmuniqueid": _scObj['alarmuniqueid'], 
											"login_name": _scObj['login_name'],
											"startTime": _scObj['startTime'],
											"endTime": _scObj['endTime']});
			}
			
			protected function loadSubWarns(event:AdvancedDataGridEvent):void
			{
				var remoteService:RemoteObject = BlazeDSUtil.newService(AlarmSearchModule.destination, AlarmSearchModule.src, AlarmSearchModule.endpoint,
					function(result:Object):void
					{
						logger.error(">>> 查询子告警成功返回。");
						if(null == result)
						{
							logger.error(">>> 查询子告警为null");
							Alert.show('没有符合条件的数据！');
						}
						else
						{
							logger.info(">>> 查询子告警length：" + (result as IList).length);
							event.item.children.removeAll();
							
							for each(var al:Object in result)
							{
								al['isChild'] = 1;
								event.item.children.addItem(al);
							}

							_hcv.refresh();
							
							loadManger.hideLoading();
							result = null;
						}
					},
					function(event:FaultEvent):void
					{
						logger.error(">>> 查询子告警失败！ ：", event.fault.faultString);
					});
				
                _scObj['alarmuniqueid'] = event.item.alarmuniqueid;
                _scObj['parentflag'] = event.item.parentflag;
				logger.info(">>> 查询子告警条件 ============================");
				logparams();
				logger.info(">>> 查询子告警条件 ============================");
				
				loadManger.showLoading();
				
				remoteService.getSubWarns({"alarmuniqueid": _scObj['alarmuniqueid'],
					"login_name": _scObj['login_name'],
					"startTime": _scObj['startTime'],
					"endTime": _scObj['endTime'],
					"parentflag": _scObj['parentflag']});
			}

			public function get userName():String
			{
				return _userName;
			}

			public function set userName(value:String):void
			{
				_userName = value;
			}

			
			private function initContextMenu():void
			{
				logger.info("初始化右键菜单。");
				cmiCacheActive['1'] = cmi_sheetDetail;//工单详情
				cmiCacheActive['3'] = cmi_alarmDetail;//告警详情
				cmiCacheActive['4'] = cmi_alarmDisp;//告警派单
				cmiCacheActive['5'] = cmi_resource;//资源查看
				cmiCacheActive['6'] = cmi_gis;//GIS查询
				cmiCacheActive['7'] = cmi_topo;//拓扑查询
				cmiCacheActive['8'] = cmi_sm;//短信派发
				cmiCacheActive['10'] = cmi_noDispSheet;//抑制派单
				cmiCacheActive['12'] = cmi_alarmAck;//告警确认
				cmiCacheActive['14'] = cmi_alarmClear;//告警清除
				cmiCacheActive['16'] = cmi_alarmMark;//告警备注
//				cmiCacheActive['88'] = cmi_alarmAnalysis;//核心网告警分析
//				cmiCacheActive['20'] = cmi_alarmRel;//告警关联
				cmiCacheActive['21'] = cmi_sheetView;//工程查看
				cmiCacheActive['22'] = cmi_expQuery;//知识库查询
				cmiCacheActive['23'] = cmi_IMS;//IMS呼叫
				cmiCacheActive['26'] = cmi_perfView;//性能查看
				cmiCacheActive['63'] = cmi_alarmEncyclopediaDetail;//告警百科详情
				cmiCacheActive['58'] = cmi_handleMenuItem;//告警百科详情
				cmiCacheActive['78'] = stopivr;//IVR呼叫抑制
				
				cmiCacheNoActive['1'] = cmi_sheetDetail;
				cmiCacheNoActive['3'] = cmi_alarmDetail;
				cmiCacheNoActive['5'] = cmi_resource;
				cmiCacheNoActive['6'] = cmi_gis;
				cmiCacheNoActive['7'] = cmi_topo;
				cmiCacheNoActive['8'] = cmi_sm;
				cmiCacheNoActive['12'] = cmi_alarmAck;
				cmiCacheNoActive['16'] = cmi_alarmMark;
//				cmiCacheNoActive['88'] = cmi_alarmAnalysis;
//				cmiCacheNoActive['告警关联'] = cmi_alarmRel;
				cmiCacheNoActive['21'] = cmi_sheetView;
				cmiCacheNoActive['22'] = cmi_expQuery;
				cmiCacheNoActive['23'] = cmi_IMS;
				cmiCacheNoActive['26'] = cmi_perfView;
				cmiCacheNoActive['58'] = cmi_handleMenuItem_multi;
				cmiCacheNoActive['78'] = stopivr;//IVR呼叫抑制
				cmiCacheActive['63'] = cmi_alarmEncyclopediaDetail;//告警百科详情
				
				cmiCacheMultiSelected['12'] = cmi_alarmAck_multi;
				cmiCacheMultiSelected['14'] = cmi_alarmClear_multi;
				cmiCacheMultiSelected['17'] = cmi_alarmMark_multi;
//				cmiCacheMultiSelected['86'] = cmi_alarmAnalysis_multi;//核心网告警分析
				cmiCacheMultiSelected['80'] = stopivr;
				cmiCacheMultiSelected['56'] = cmi_alarmRel;
//				cmiCacheMultiSelected['抑制派单'] = cmi_noDispSheet_multi;
				
//				cm.addEventListener(ContextMenuEvent.MENU_SELECT, addMenuItem);
//				
//				cmi_sheetDetail.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				cmi_alarmDetail.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//					cmi_alarmDisp.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);//历史告警不需要的菜单
//				cmi_resource.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				cmi_gis.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				cmi_topo.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				cmi_sm.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//					cmi_noDispSheet.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);//历史告警不需要的菜单
//				cmi_alarmAck.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//					cmi_alarmClear.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);//历史告警不需要的菜单
//				cmi_alarmMark.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
////				cmi_sheetMark.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				cmi_alarmRel.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				cmi_sheetView.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				cmi_expQuery.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				cmi_IMS.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				cmi_perfView.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				cmi_alarmSign.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);//标记
//				
//				cmi_alarmAck_multi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealerMulti);
//				cmi_alarmClear_multi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealerMulti);
//				cmi_alarmSign_multi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealerMulti);//标记
//				cmi_noDispSheet_multi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealerMulti);
//				
//				cmi_addAlarmToSheet_multi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealerMulti);
//				
//				cmi_alarmHandRelation_multi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealerMulti);
//				cmi_alarmRelationSep.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				
//				cmi_alarmRelationRule.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, popupDealer);
//				
//				alarmDataGrid.contextMenu = cm;
				
				logger.info("初始化右键菜单。 结束。");
			}

			private function addMenuItem(e:ContextMenuEvent):void
			{
                cm.hideBuiltInItems();
                
                cm.customItems = [];
                
				if(alarmDataGrid.selectedItems.length < 2 && checkboxMap.size < 1)
                {
                    if(e.mouseTarget is AdvancedDataGridItemRenderer)
                    {
                        alarmDataGrid.selectedItem = (e.mouseTarget as AdvancedDataGridItemRenderer).data;
                    }
                    else if(e.mouseTarget is MXAdvancedDataGridItemRenderer)
                    {
                        alarmDataGrid.selectedItem = (e.mouseTarget as MXAdvancedDataGridItemRenderer).data;
                    }
                    else
                    {
    					return; 
                    }
                }
				
				
                var obj:Object = e.mouseTarget.parent as IListItemRenderer;
                if(obj == null)
                    obj = e.mouseTarget as IListItemRenderer;
				var status:Object = obj.data.alarmstatus_old;
				var sheetStatus:Object = obj.data.sheetstatus_old;
				var sheetSendStatus:Object = obj.data.sheetsendstatus_old;
				
				
				var setFlag:Boolean = false;
				if(checkboxMap.size >= 1)//如果checkbox选中则以checkbox的数据优先
				{
					checkboxMap.forEach(function(key:String, data:Object):void
					{
						if(!setFlag)
						{
							setFlag = true;
							status = data.alarmstatus_old;
							sheetStatus = data.sheetstatus_old;
							sheetSendStatus = data.sheetsendstatus_old;
						}
					});
				}
				
				logger.info('生成右键菜单， 告警状态：' + status + ' 工单状态：' + sheetStatus + ' 派单状态：' + sheetSendStatus + ' 权限内菜单个数：' + allCmis.length + ' checkbox选中个数：' + checkboxMap.size);
				if(_scObj['isRela']==2){
					logger.debug("标记");
					if(checkboxMap.size > 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 1)){
						logger.debug("标记多选");
						cm.customItems.push(cmi_alarmSign_multi);
					}else{
						logger.debug("标记单选");
						cm.customItems.push(cmi_alarmSign);
					}
				}
				
			/* 	
				if(checkboxMap.size > 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 1)){
					logger.info("test 抑制派单");
					cm.customItems.push(cmi_noDispSheet_multi);
				}
				else
                {
    				if(sheetSendStatus == '1' ||
    					((sheetSendStatus == '5' || sheetSendStatus == '6') && sheetStatus != '7'))
    				{
						cm.customItems.push(cmi_noDispSheet);
    				}
                }
				 */
				if(checkboxMap.size > 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 1))
				{
					for each(var mi:Object in allCmis)
					{
						if(cmiCacheActive.hasOwnProperty(mi['item_id']))
						{
							if(mi['item_name'] == "抑制派单")
							{
								logger.info("抑制派单 cmi_noDispSheet_multi");
								cm.customItems.push(cmi_noDispSheet_multi);
							}
						}
					}
				}
				else
				{
					if(sheetSendStatus == '1' ||
						((sheetSendStatus == '5' || sheetSendStatus == '6') && sheetStatus != '7'))
					{
						
						for each(var mi:Object in allCmis)
						{
							if(cmiCacheActive.hasOwnProperty(mi['item_id']))
							{
								if(mi['item_name']  == "抑制派单")
								{
									logger.info("抑制派单 cmi_noDispSheet");
									cm.customItems.push(cmi_noDispSheet);
								}
							}
						}
					}
				}
				
				if(checkboxMap.size > 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 1))
//				if(alarmDataGrid.selectedItems.length > 1)
				{
					var allActive:Boolean = true;
					var allNoActive:Boolean = true;

					logger.info('多选');
					for each(var mi:Object in allCmis)
					{
						if(cmiCacheMultiSelected.hasOwnProperty(mi['item_id']))
                        {
                            (cmiCacheMultiSelected[mi['item_id']] as ContextMenuItem).caption = mi['item_name'];
							cm.customItems.push(cmiCacheMultiSelected[mi['item_id']]);
                        }
					}
				}
				else
				{
					if(status == '1')
					{
						logger.info('单选 - 活动告警.');
						for each(var mi:Object in allCmis)
						{
							if(cmiCacheActive.hasOwnProperty(mi['item_id']))
                            {
                                (cmiCacheActive[mi['item_id']] as ContextMenuItem).caption = mi['item_name'];
								cm.customItems.push(cmiCacheActive[mi['item_id']]);
                            }
						}
					}
					else
					{
						logger.info('单选 - 非活动告警.');
						for each(var mi:Object in allCmis)
						{
							if(cmiCacheNoActive.hasOwnProperty(mi['item_id']))
                            {
                                
                                (cmiCacheNoActive[mi['item_id']] as ContextMenuItem).caption = mi['item_name'];
								cm.customItems.push(cmiCacheNoActive[mi['item_id']]);
                            }
						}
					}
				}
				cm.customItems.push(cmi_addAlarmToSheet_multi);
				
				
				logger.debug("判断是否能够告警关联链接");
				
				//判断如果不存在relation ==1 那么可以出现多选的告警关联链接
				if(checkboxMap.size > 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 1)) 
				{
					
					var relation:Boolean = false;//为false时，可以出现告警关联链接
					if(checkboxMap.size>0) {
						checkboxMap.forEach(function(key:String, data:Object):void
						{
							if(!relation)
							{
								if(data.hasOwnProperty("relation")&&data["relation"] == "1")
								{
									logger.debug(data);
									relation = true;
								}
							}
						});
					}else if(checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 0)
					{
						for each(var data:Object in alarmDataGrid.selectedItems) 
						{
							if(!relation)
							{
								if(data.hasOwnProperty("relation")&&data["relation"] == "1")
								{
									logger.debug(data);
									relation = true;
								}
							}
						}
					}
					
					if(!relation) 
					{
						cm.customItems.push(cmi_alarmHandRelation_multi);
					}
					
				}
				
				logger.debug("判断是否能够告警解除链接");
				
				//判断如果单条数据，并且存在relation字段，那么加入告警解除菜单
				if(checkboxMap.size == 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length == 1)){
					logger.debug(obj.data);
					if(obj.data.hasOwnProperty("relation")&& obj["data"]["relation"] == "1")
					{
						cm.customItems.push(cmi_alarmRelationSep);	
					}
				}
				
				//如何判断是子节点，而不是父节点，才可以出现关联规则菜单
				if(checkboxMap.size == 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length == 1))
				{
					logger.info(obj["data"]);
					logger.info(obj["data"]["parentflag"]=="1"||obj["data"]["parentflag"]=="3");
					if(obj["data"]["parentflag"]=="1"||obj["data"]["parentflag"]=="3") 
					{
						logger.info("增加关联规则！！");
						cm.customItems.push(cmi_alarmRelationRule);
					}
				}
			}
			
			private function popupDealerMulti(e:ContextMenuEvent,caption:String = null):void
			{
				var dalTime:String = '';
//				switch(e.target.caption)
				switch(caption)
				{
					case "告警确认":
						var ids1:String = '';
						if(checkboxMap.size > 1)
						{
							checkboxMap.forEach(function(key:String, data:Object)
							{
								if(ids1 == '')
								{
//									ids1 += data.alarmuniqueid + ',' + data.daltime_old;
									ids1 += data.alarmuniqueid + ',' + data.neid + ',' + data.alarmstatus_old + ',' + data.vendor + ',' + data.equipmentclass
                                    + ',' + data.nmsalarmid + ',' + data.daltime_old + ',' + data.gather_id;
								}
								else
//									ids1 += ';' + data.alarmuniqueid + ',' + data.daltime_old;
									ids1 += ';' + data.alarmuniqueid + ',' + data.neid + ',' + data.alarmstatus_old + ',' + data.vendor + ',' + data.equipmentclass
                                    + ',' + data.nmsalarmid + ',' + data.daltime_old + ',' + data.gather_id;
							});
						}
						else
						{
							for each(var data:Object in alarmDataGrid.selectedItems)
							{
								if(ids1 == '')
								{
//									ids1 += data.alarmuniqueid + ',' + data.daltime_old;
									ids1 += data.alarmuniqueid + ',' + data.neid + ',' + data.alarmstatus_old + ',' + data.vendor + ',' + data.equipmentclass
                                        + ',' + data.nmsalarmid + ',' + data.daltime_old + ',' + data.gather_id;
								}
								else
//									ids1 += ';' + data.alarmuniqueid + ',' + data.daltime_old;
									ids1 += ';' + data.alarmuniqueid + ',' + data.neid + ',' + data.alarmstatus_old + ',' + data.vendor + ',' + data.equipmentclass
                                        + ',' + data.nmsalarmid + ',' + data.daltime_old + ',' + data.gather_id;
							}
						}
						
						var url1:String = "/cms/warn/menu/warnMenu!ackAlarm.action";
						var params1:URLVariables = new URLVariables();
						params1.warnStr = ids1;
						menuForward(url1, params1, 2, true);
						break;
					
					case "告警清除":
						var ids2:String = '';
						if(checkboxMap.size > 1)
						{
							checkboxMap.forEach(function(key:String, data:Object):void
							{
								if(ids2 == '')
								{
//									ids2 += data.alarmuniqueid + ',' + data.daltime_old;
									data.vendorclearno = data.vendorserialno;
									ids2 += data.alarmuniqueid + ',' + data.gather_id + ',' + data.vendorclearno;
								}
								else{
//									ids2 += ';' + data.alarmuniqueid + ',' + data.daltime_old;
									data.vendorclearno = data.vendorserialno;
									ids2 += ';' + data.alarmuniqueid + ',' + data.gather_id + ',' + data.vendorclearno;
								}
							});
						}
						else
						{
							for each(var data:Object in alarmDataGrid.selectedItems)
							{
								if(ids2 == '')
								{
//									ids2 += data.alarmuniqueid + ',' + data.daltime_old;
									data.vendorclearno = data.vendorserialno;
									ids2 += data.alarmuniqueid + ',' + data.gather_id + ',' + data.vendorclearno;
								}
								else{
//									ids2 += ';' + data.alarmuniqueid + ',' + data.daltime_old;
									data.vendorclearno = data.vendorserialno;
									ids2 += ';' + data.alarmuniqueid + ',' + data.gather_id + ',' + data.vendorclearno;
								}
							}
						}
						var url:String = "/cms/warn/menu/warnMenu!clearAlarm.action";
						var params:URLVariables = new URLVariables();
						params.warnStr = ids2;
                        logger.info("告警清除@@@@@@@");
                        logger.info(ids2);
                        logger.info("告警清除@@@@@@@");
						menuForward(url, params, 3, true);  
						break;
					
					case "抑制派单":
						var ids:String = '';
						if(checkboxMap.size > 1)
						{
							checkboxMap.forEach(function(key:String, data:Object):void
							{
								if(ids == '')
								{
									ids += data.alarmuniqueid + ',' + data.daltime_old + ',' + data.neid;
								}
								else
									ids += ';' + data.alarmuniqueid + ',' + data.daltime_old + ',' + data.neid;
							});
						}
						else
						{
							for each(var data:Object in alarmDataGrid.selectedItems)
							{
								if(ids == '')
								{
									ids += data.alarmuniqueid + ',' + data.daltime_old + ',' + data.neid;
								}
								else
									ids += ';' + data.alarmuniqueid + ',' + data.daltime_old + ',' + data.neid;
									
							}
						}
						var url_1:String = "/cms/warn/rightmenu/rightMenuAction!initSheetHold.action";
                        
//                        navigateToURL(new URLRequest(url_1));
                        
//                        var p:URLVariables = new URLVariables();
//                        p.warnStr = ids;
//                        p.type = '2';
//                        HttpUtil.httpService("", url_1, function(data:Object):void
//                        {
//                            logger.info('批量抑制数据提交成功！');   
//                        }, p, function(event:FaultEvent):void
//                        {
//                            logger.info('批量抑制数据提交失败！');   
//                        }, "text", "POST");
                        
                        ExternalInterface.call('open4sheet', url_1,{'warnStr':ids, 'debug':'false'});
						break;
					case "标记":
						var alarmsign:ArrayCollection=new ArrayCollection;
						var param:Object=new Object;
						alarmsign.removeAll();
						if(checkboxMap.size > 1)
						{
							checkboxMap.forEach(function(key:String, data:Object):void
							{
								var obj:Object=new Object;
								obj.alarmuniqueid=data.alarmuniqueid;
								obj.daltime= data.daltime_old+"#";
								alarmsign.addItem(obj);
							});
							alarmsign.refresh();
						}
						else
						{
							for each(var data:Object in alarmDataGrid.selectedItems)
							{
								var obj :Object=new Object;
								obj.alarmuniqueid=data.alarmuniqueid;
								obj.daltime= data.daltime_old+"#";
								alarmsign.addItem(obj);
							}
							alarmsign.refresh();
						}
						logger.debug("-----------------------");
						logger.debug(alarmsign);
						param.datas=alarmsign;
						alarmSignPM.alarmSign(param);
						break;
					case "增加告警至指定工单":
						var ids1:String = '';
						if(checkboxMap.size > 1)
						{
							checkboxMap.forEach(function(key:String, data:Object)
							{
								if(ids1 == '')
								{
									ids1 += data.alarmuniqueid;
								}
								else
									ids1 += ',' + data.alarmuniqueid ;
							});
						}
						else
						{
							for each(var data:Object in alarmDataGrid.selectedItems)
							{
								if(ids1 == '')
								{
									ids1 += data.alarmuniqueid;
								}
								else
									ids1 += ',' + data.alarmuniqueid ;
							}
						}
						var url1:String = "/cms/warn/pre/preAction!sheetHandAppend.action?alarmuniqueid="+ids1;
						navigateToURL(new URLRequest(url1));
						break;
					case "告警关联":
						var ids1:String = '';
						if(checkboxMap.size > 0)
						{
							checkboxMap.forEach(function(key:String, data:Object)
							{
								if(ids1 == '')
								{
									ids1 += data.alarmuniqueid;
								}
								else
									ids1 += ',' + data.alarmuniqueid ;
							});
						}
						else
						{
							for each(var data:Object in alarmDataGrid.selectedItems)
							{
								if(ids1 == '')
								{
									ids1 += data.alarmuniqueid;
								}
								else
									ids1 += ',' + data.alarmuniqueid ;
							}
						}
						var url1:String = "/cms/warn/pre/preAction!alarmHandRelation.action?alarmuniqueid="+ids1;
						navigateToURL(new URLRequest(url1));
						break;
					case "手工派单":
						var ids1:String = '';
						if(checkboxMap.size > 0)
						{
							checkboxMap.forEach(function(key:String, data:Object)
							{
								if(ids1 == '')
								{
									ids1 += data.alarmuniqueid;
								}
								else
									ids1 += ',' + data.alarmuniqueid ;
							});
						}
						else
						{
							for each(var data:Object in alarmDataGrid.selectedItems)
							{
								if(ids1 == '')
								{
									ids1 += data.alarmuniqueid;
								}
								else
									ids1 += ',' + data.alarmuniqueid ;
							}
						}
//						var url_58:String="/cms/warn/pre/preAction!handSendOrder.action?alarmuniqueid=" + ids1;
//						navigateToURL(new URLRequest(url_58));
//						
						var url_58:String="/cms/warn/pre/preAction!handSendOrder.action";
						//						navigateToURL(new URLRequest(url_58));
						var params_58:URLVariables = new URLVariables();
						params_58.alarmuniqueid = ids1;
						menuForward1(url_58, params_58);
						break;
					
					case "IVR呼叫抑制":
						var ids80:String = '';
						if(checkboxMap.size > 1)
						{
							checkboxMap.forEach(function(key:String, data:Object):void
							{
								if(ids80 == '')
								{
									ids80 += data.alarmuniqueid;
								}
								else
									ids80 += ',' + data.alarmuniqueid;
							});
							
						}
						else
						{
							for each(var data:Object in alarmDataGrid.selectedItems)
							{
								if(ids80 == '')
								{
									ids80 += data.alarmuniqueid ;
								}
								else
									ids80 += ',' + data.alarmuniqueid;
								
							}
							
						}
							var url_80:String ="/cms/warn/ivr/ivrStopCall!stopIvrList.action?alarmuniqueid=" +ids80;
							navigateToURL(new URLRequest(url_80));
						break;
					case "告警备注":
						var ids17:String = '';
						if(checkboxMap.size > 1)
						{
							checkboxMap.forEach(function(key:String, data:Object):void
							{
//								if(ids17 == '')
//								{
									ids17 += data.alarmuniqueid + ';';
//								}
//								else
//									ids17 += ';' + data.alarmuniqueid;
							});
							
						}
						else
						{
							for each(var data:Object in alarmDataGrid.selectedItems)
							{
//								if(ids17 == '')
//								{
									ids17 += data.alarmuniqueid + ';' ;
//								}
//								else
//									ids17 += ';' + data.alarmuniqueid;
								
							}
							
						}
						var url_17:String = "/cms/warn/menu/warn!addRemark.action?warnStr=" + ids17 + '&type=1';
						navigateToURL(new URLRequest(url_17));
						break;
					case "核心网告警分析":
						var ids86:String = '';
						if(checkboxMap.size > 1)
						{
							checkboxMap.forEach(function(key:String, data:Object):void
							{
									ids86 += data.alarmuniqueid + ';';
							});
							
						}
						else
						{
							for each(var data:Object in alarmDataGrid.selectedItems)
							{
									ids86 += data.alarmuniqueid + ';' ;					
							}
							
						}
						var url_86:String = "/cms/scene/report/alarmreport/alarmReportAction!queryAlarmReportInfo.action?warnStr=" + ids86;
						navigateToURL(new URLRequest(url_86));
						break;
					default:
						break;
				}
			}
			[MessageHandler(selector="CMS_ALARMSEARCH_ALARM_SIGN_RESULT")]
			public function signResult(event:AlarmSignEvent):void
			{
				logger.debug("标记结果返回...");
				logger.debug(event.param);
				Alert.show(event.param as String,"提示");
				
			}
			
				
			private function popupDealer(e:ContextMenuEvent,caption:String = null,obj:Object = null):void
			{
				logger.info("处理右键菜单： " + caption);
				logger.info(obj.data);
				
//				var obj:Object = e.mouseTarget.parent as IListItemRenderer;
//				if(obj == null)
//					obj = e.mouseTarget as IListItemRenderer;
				
				var id:Object = obj.data.alarmuniqueid;
				var moId:Object = obj.data.alarmneid;
				var dalTime:Object = obj.data.daltime_old;
				var nmsalarmid = obj.data.nmsalarmid;
				
				var setFlag:Boolean = false;
				if(checkboxMap.size >= 1)
				{
					checkboxMap.forEach(function(key:String, data:Object):void
					{
						if(!setFlag)
						{
							setFlag = true;
							id = data.alarmuniqueid;
							moId = data.alarmneid;
							dalTime = data.daltime_old;
							nmsalarmid = data.nmsalarmid;
						}
					});
				}
				
				logger.info(" 参数： alarmuniqueid:" + id + " dalTime:" + dalTime);
				
//				switch(e.target.caption)
				switch(caption)
				{
					
					case "工单详情":
						var url_1:String = "/cms/warn/sheet/sheetAction.action?alarmuniqueid=" + id + '&moId=' + moId + '&dalTime=' + dalTime;
						navigateToURL(new URLRequest(url_1));
						break;
					
					case "告警详情":
						var url1:String = "/cms/warn/rule/report/nonprofess/NonprofessWarnAction!queryWarnInfo.action?alarmNo=" + id + "&dalTime=" + dalTime + '&moId=' + moId;
						navigateToURL(new URLRequest(url1));
						break;
					
					case "告警派单":
						var url_2:String = "/cms/warn/menu/warn!dispatchWarn.action?alarmuniqueid=" + id + '&moId=' + moId + '&dalTime=' + dalTime;
						navigateToURL(new URLRequest(url_2));
						break;
						
//					case "资源查看":
//						var url2:String = "/cms/warn/menu/neidGetAction!queryMoAttrInfo.action";
//						var params:URLVariables = new URLVariables();
//						params.alarmuniqueid = id;
//						params.dalTime = dalTime;
//						params.moId = moId;
//						menuForward(url2, params);
//						break;
					case "资源查看":
						var url2:String = "/cms/warn/menu/neidGetAction!queryMoAttrInfo.action?alarmuniqueid=" + id + "&dalTime=" + dalTime + "&moId=" + moId;
						navigateToURL(new URLRequest(url2));
						break;
						
					case "GIS查询":
						var url3:String = "/cms/warn/menu/neidGetAction!queryNet.action?turnTo=gis&alarmuniqueid=" + id + '&moId=' + moId + '&dalTime=' + dalTime;
						navigateToURL(new URLRequest(url3));
						break;
						
					case "拓扑查询":
						var url4:String = "/cms/warn/menu/neidGetAction!queryNet.action?turnTo=topo&alarmuniqueid=" + id + '&moId=' + moId + '&dalTime=' + dalTime;
						navigateToURL(new URLRequest(url4));
						break;
						
					case "短信派发":
						var url_3:String = "/cms/warn/menu/warn!forwardWarn.action?alarmuniqueid=" + id + '&moId=' + moId + '&dalTime=' + dalTime;
						navigateToURL(new URLRequest(url_3));
						break;
						
					case "抑制派单":
						var url_4:String = "/cms/warn/rightmenu/rightMenuAction!initSheetHold.action?alarmuniqueid=" + id + '&moId=' + moId + '&dalTime=' + dalTime + '&debug=false';
						navigateToURL(new URLRequest(url_4));
						break;
					
					case "告警确认":
						var url_5:String = "/cms/warn/menu/warnMenu!ackAlarm.action";
						var params_5:URLVariables = new URLVariables();
						params_5.alarmuniqueid = id;
						params_5.neid = obj.data.neid;
						params_5.alarmstatus = obj.data.alarmstatus_old;
						params_5.vendor = obj.data.vendor;
						params_5.equipmentclass = obj.data.equipmentclass;
						params_5.nmsalarmid = obj.data.nmsalarmid;
						params_5.dalTime = dalTime;
						params_5.gather_id = obj.data.gather_id;
						menuForward(url_5, params_5, 2);
                        logger.info("告警确认######");
                        logger.info(obj.data);
                        logger.info("告警确认######");
						break;
					
					case "告警清除":
						var url_6:String = "/cms/warn/menu/warnMenu!clearAlarm.action";
						var params_6:URLVariables = new URLVariables();
						params_6.alarmuniqueid = id;
						params_6.gather_id = obj.data.gather_id;
						params_6.vendorclearno = obj.data.vendorserialno;
						logger.info("alarmuniqueid="+params_6.alarmuniqueid+"gather_id="+params_6.gather_id+"vendorclearno="+params_6.vendorclearno);
						menuForward(url_6, params_6, 3);
						
                        logger.info("告警清除1######:");
                        logger.info(obj.data);
                        logger.info("告警清除1######");
						break;
						
					case "告警备注":
						var url_7:String = "/cms/warn/menu/warn!addRemark.action?alarmuniqueid=" + id + '&moId=' + moId + '&dalTime=' + dalTime + '&type=1';
						navigateToURL(new URLRequest(url_7));
						break;
					
					case "核心网告警分析":
						var url_86:String = "/cms/scene/report/alarmreport/alarmReportAction!queryAlarmReportInfo.action?warnStr=" + id;
						navigateToURL(new URLRequest(url_86));
						break;
						
					case "工程标注":
						var url_8:String = "/cms/warn/menu/warn!warnLocatene.action";
						var params_8:URLVariables = new URLVariables();
						params_8.alarmuniqueid = id;
						params_8.moId = moId;
						params_8.dalTime = dalTime;
						menuForward(url_8, params_8);
						break;
						
//					case "告警关联":
//						var url_9:String = "/cms/warn/report/relation/relationQueryAction.action?alarmuniqueid=" + id + '&moId=' + moId + '&dalTime=' + dalTime;
//						navigateToURL(new URLRequest(url_9));
//						break;
						
					case "工程查看":
						var url_10:String = "/cms/warn/menu/neidGetAction!showLocatene.action";
						var params_10:URLVariables = new URLVariables();
						params_10.alarmuniqueid = id;
						params_10.moId = moId;
						params_10.dalTime = dalTime;
						menuForward(url_10, params_10, 0);
						break;
						
					case "知识库查询":
						var url_11:String = "/cms/warn/expsh/experi/experiAction.action?alarmuniqueid=" + id + "&daltime=" + dalTime;
						navigateToURL(new URLRequest(url_11));
						break;
						
					case "IMS呼叫":
						var url_12:String = "/cms/cms/imscall/imscall.action?moId=" + obj.data.alarmneid + '&alarmId=' + id + '&dalTime=' + dalTime;
						navigateToURL(new URLRequest(url_12));
						break;
						
					case "性能查看":
						var url_13:String = "/cms/warn/menu/neidGetAction!showCapability.action";
						var params_13:URLVariables = new URLVariables();
						params_13.alarmuniqueid = id;
						params_13.moId = moId;
						params_13.dalTime = dalTime;
						menuForward(url_13, params_13, 0);
						break;
					case "标记":
//						var url_14:String = "/cms/warn/groupcustomer/menu/menuremoveAction!moveToList.action?alarmuniqueid=" + id + '&moId=' + moId + '&dalTime=' + dalTime;
//						navigateToURL(new URLRequest(url_14));
						
						var arra:ArrayCollection=new ArrayCollection;
						var obj:Object=new Object;
						obj.alarmuniqueid=id;
						obj.daltime=dalTime+"#";
						arra.addItem(obj);
						obj.datas=arra;
						logger.debug("********************");
						logger.debug(arra);
						alarmSignPM.alarmSign(obj);
						break;
					case "告警解除": 
						var url_14:String = "/cms/warn/pre/preAction!alarmRelationSep.action";
//						navigateToURL(new URLRequest(url_14));
						var params_14:URLVariables = new URLVariables();
						params_14.alarmuniqueid = id;
						params_14.daltime = dalTime;
						menuForward1(url_14, params_14);
						
						break;
					case "关联规则":
						var url_15:String = "/cms/warn/rule/config/queryWarnRuleAction!queryWarnRule.action?alarmUniqueId="+id;
						navigateToURL(new URLRequest(url_15));
						break;

					case "告警百科详情":
						var url_16:String = "/cms/warn/encyclopedias/encyclopediasAction!getEncyclopediasAction.action?alarmuniqueid="+nmsalarmid;
						navigateToURL(new URLRequest(url_16));
						break;
					case "故障预处理":
						var url_24:String = "/cms/warn/pre/preAction!alarmPre.action?alarmuniqueid="+id;
						navigateToURL(new URLRequest(url_24));
						break;
					case "手工派单":
						var url_58:String="/cms/warn/pre/preAction!handSendOrder.action";
//						navigateToURL(new URLRequest(url_58));
						var params_58:URLVariables = new URLVariables();
						params_58.alarmuniqueid = id;
						menuForward1(url_58, params_58);
						break;
					case "IVR呼叫抑制":
						ExternalInterface.call('stopivr',id);
						break;
					
					default :
						break;
				}
			}
			
			private function menuForward1(url:String,param:URLVariables):void{
				HttpUtil.httpService("", url,
					function(result:Object):void
					{
						AlarmUtil.showMessage("操作成功", "消息");
					},
					param, 
					function(event:FaultEvent):void
					{
						AlarmUtil.showMessage("通信异常,请稍候重试.\n\n" + event.fault.faultString);
					}, "text", "POST");
			}
			
			private function menuForward(url:String, param:URLVariables, type:int = 1, multi:Boolean = false):void
			{
				logger.info("menuForward"+param.alarmuniqueid+","+param.gather_id+","+param.vendorclearno);
				HttpUtil.httpService("", url,
					function(result:Object):void
					{
						logger.info("捕获菜单事件 HTTP请求,返回原始数据:" + result);
						var message:String = String(result);
                        
                        if(message.indexOf("}]}") > 0)
                            message = message.substring(0,message.lastIndexOf("}]}") + 3);
						
						logger.info("捕获菜单事件 HTTP请求,返回数据:" + message);
						
						// 返回的对象
						var returnObj:Object = AlarmUtil.jsonDecode(message);
						
						if(type == 1 || type == 0)
						{
							// 1:成功; 2:失败
							if (returnObj.result && int(returnObj.result) == 1)
							{
								// 成功
                                if(type == 0)
                                    ExternalInterface.call('openUrl', returnObj.url);
                                else
                                    ExternalInterface.call('openUrl', _context + returnObj.url);
							}
							else
							{
								// 失败
								AlarmUtil.showMessage(returnObj.msg, "消息");
							}
						}
						else if(type == 2 || type ==3)
						{
							var opetation:String = (type == 2 ? '确认告警' : '清除告警');
                            
							if (message == "false")
							{
								AlarmUtil.showMessage(opetation + "失败,请稍候重新尝试.", "消息");
								return;
							}
							
							
							var data:Array = returnObj.data;
							var successNum:int=0;
							var failureNum:int=0;
							var alreadyNum:int=0;
							
							if (data != null)
							{
								var msg:String=null;
								data.forEach(function(item:*, index:int, array:Array):void
								{
									switch (int(item.result))
									{
										case 1: // 成功
											successNum++;
											msg = opetation + "成功.";
											break;
										case 2: // 失败
											failureNum++;
											msg = opetation + "失败.";
											break;
										case 3: // 已处理
                                            alreadyNum++;
											msg = "已" + opetation + ".";
											break;
										default:
											break;
									}
								});
								
								if (!multi)
								{
									AlarmUtil.showMessage(msg, "消息");
								}
								else
								{
									AlarmUtil.showMessage(opetation + "结果:\n\n成功数量:" + successNum + "\n失败数量:" + failureNum +　"\n已" + opetation + ":" + alreadyNum);
								}
							}
							else
							{
								AlarmUtil.showMessage(opetation + "失败,请稍候重新尝试.", "消息");
							}
						}
                        result = null;
					},
					param, 
					function(event:FaultEvent):void
					{
						AlarmUtil.showMessage("通信异常,请稍候重试.\n\n" + event.fault.faultString);
					}, "text", "POST");
			}

			protected function showWarnDetail(event:ListEvent):void
			{
				var id:Object = event.itemRenderer.data.alarmuniqueid;
				
				var dalTime:Object = event.itemRenderer.data.daltime;
				
				if(String(dalTime).indexOf('-') >= 0)//如果是格式化过的日期  则转换成秒数。
					dalTime = DateFormatter.parseDateString(event.itemRenderer.data.daltime).getTime() / 1000;
				
				var url:String = "/cms/warn/rule/report/nonprofess/NonprofessWarnAction!queryWarnInfo.action?alarmNo=" + id + "&dalTime=" + dalTime;
				navigateToURL(new URLRequest(url));
			}

			protected function queryPage():void
			{
				if(_sc)
					_sc.doQuery("10", pager.currentPage as uint, uint(pager.pageSize));
				else
					_showal.doQuery("10", pager.currentPage as uint, uint(pager.pageSize));
			}
			
			public function initPage():void
			{
				pager.currentPage = 1;
				pager.totalNumInfo.text = "总记录...条";
				pager.totalPageInfo.text = "共...页";
			}
			
			public function zeroPage():void
			{
				pager.currentPage = 0;
				pager.totalNumInfo.text = "总记录0条";
				pager.totalPageInfo.text = "共0页";
			}
			
			public function resetPanel():void
			{
				alarmDataGrid.dataProvider = new ArrayCollection();
				
				_hcv = null;
				
				_alarmArrayCache.removeAll();
			}
			
			public function set sc(value:SearchConditionDiv):void
			{
				_sc = value;
			}

			public function hidePage():void
			{
				this.pager.visible = false;
				this.pager.includeInLayout = false;
				export.visible = false;
			}

			protected function exportArr2():void
			{
				if(allAlarmRadio.selected)
				{
					if(pager.totalRowCount > 150000)
					{
						hideWindow2();
						Alert.show("导出数量大于上限150000条，有可能造成系统异常。\n\n可以修改查询条件，分批次导出； 或联系数据维护人员由其指导。", "记录数超出上限");
						return;
					}
					
					var url:String = AlarmSearchModule._context + AlarmSearchModule.exportActionUrl + "!expWarn.action?monitor_viewname=queryalarm";
					
                    //导出所有记录，清空告警id，否则会引起后台判断错误。
                    //改成取输入框的值就没有问题。
					_scObj['alarmuniqueid'] = _sc.alarmSNTextInput.text;
					
					logparams();
					
                    logger.error("导出所有告警：");
					ExternalInterface.call("export2Excel", url, _scObj, "1");
				}
				else if(currPageRadio.selected)//当前页导出
				{
					var ids:String  = getAllIds();
					
					var url:String = AlarmSearchModule._context + AlarmSearchModule.exportActionUrl + "!expPageWarn.action?monitor_viewname=queryalarm";
					
					var params:Object = new Object();
					params.alarmuniqueids = ids;
					params.startTime = _scObj['startTime'];
					params.endTime = _scObj['endTime'];

					ExternalInterface.call("export2Excel", url, params, "2");
					
					logger.info("当前页告警导出 ids：" + ids);
				}
				hideWindow2();
			}
			
			private function getAllIds():String
			{
				var ids:String = "";
				for each(var a:Object in _alarmArrayCache)
				{
					ids += a['alarmuniqueid'];
					
					if(a['parentflag'] == '2' || a['parentflag'] == '3')
						ids += "/1";
					
					ids += ",";
				}
				
				if(!StringUtils.isEmpty(ids))
					ids = ids.substr(0, ids.lastIndexOf(","));
					
				return ids;
			}

			protected function exportArr():void
			{
				confirmWindow.visible = false;
				
				var alarmArrayCollection:ArrayCollection = getAllAlarms(_alarmArrayCache);
				
				if(null == alarmArrayCollection)
				{
					Alert.show("没有数据可以导出！");
					logger.info(">>> 没有可以导出的数据。");
					return;
				}
				
				logger.info(">>> 导出数据。。。   加载需要导出的数据完成，记录数：" + alarmArrayCollection.length);
				
				ExcelUtil.exportSimpleExcel("告警查询结果导出", exportColumns, alarmArrayCollection);
				
				export.enabled = true;
				export.buttonMode = true;
			}

			protected function hideWindow():void
			{
				confirmWindow.visible = false;
				export.enabled = true;
				export.buttonMode = true;
			}

			protected function hideWindow2():void
			{
				confirmWindow2.visible = false;
				export.enabled = true;
				export.buttonMode = true;
			}
			
			public function hideExport():void
			{
				export.visible = false;
				tool.visible = false;
			}

			public function set columnCfg(flag:Boolean):void
			{
				tool.visible = flag;
			}

			public function get showal():ShowAlarmListModule
			{
				return _showal;
			}

			public function set showal(value:ShowAlarmListModule):void
			{
				_showal = value;
			}

			protected function window1_maximizeHandler(type:String):void
			{
				_resizeCallback.call(null, type);
			}

			public function set resizeCallback(value:Function):void
			{
				_resizeCallback = value;
			}
			
			private var rightClickTarget:DisplayObject;//右键点击的对象
			private var selectTarget:DisplayObject;//右键点击的对象
			private var rightClickMenuOwner:DisplayObject;//右键菜单的属主
			public const RIGHT_CLICK:String = "rightClick";
			
			
		
		private var menu:Menu;
		private var window:DisplayObjectContainer;
		
		private function rightClickManager1(win:DisplayObjectContainer)
		{
			logger.warn("注册！！！");
			window = win;
			regist();
			return;
		}
		
		public function addRightClickMenu(obj:UIComponent):void
		{
			obj.addEventListener(RIGHT_CLICK,rightClickHandler);
		}
		
		//右键触发事件
		private function rightClickHandler(event:ContextMenuEvent):void
		{
			//确定对象
			logger.warn("右键触发事件！！");
			selectTarget = rightClickTarget;
			var tmp:InteractiveObject = rightClickTarget as InteractiveObject;
			while (tmp != null && tmp.contextMenu == null)
			{
				tmp = tmp.parent;
			}
			if (tmp != null)
			{
				rightClickMenuOwner = tmp;
			}
			else
			{
				rightClickMenuOwner == null;
			}
			
			if (rightClickMenuOwner != null)
			{
				//隐藏原有菜单
				if(menu!=null)
				{
					menu.hide();
					menu.removeEventListener(MenuEvent.ITEM_CLICK,menuItemSelected);  
					menu=null;
				}
				
				//特殊判断，如果是表格，并且选中项无数据，则也不显示
				if ((rightClickMenuOwner as AdvancedDataGrid) != null && (selectTarget as IDropInListItemRenderer) == null)
				{
					return;
				}
				var arr:Array = createMenuItems(event);
				menu = Menu.createMenu(window, arr, true);
				//menu.iconField="itemIcon";//右键菜单的图标
				menu.labelField="label";  //右键菜单的名称 
				menu.variableRowHeight = true;
				menu.addEventListener(MenuEvent.ITEM_CLICK, menuItemSelected);  //右键菜单的事件
				logger.warn(rightClickTarget.x +"="+ rightClickTarget.mouseX +"="+ rightClickTarget.y +"="+ rightClickTarget.mouseY);
				logger.warn(alarmDataGrid.width+"="+alarmDataGrid.height);
				logger.warn(arr.length*20);
//				logger.warn(alarmDataGrid.scrollRect.x+"="+alarmDataGrid.scrollRect.y);
//				logger.warn(alarmDataGrid.scrollRect.width+"="+alarmDataGrid.scrollRect.height);
				
				var point:Point = new Point(rightClickTarget.x + rightClickTarget.mouseX,rightClickTarget.y + rightClickTarget.mouseY); 
				logger.warn(point);
				point = dealPoint(point,arr.length*20,alarmDataGrid.height);
				point = alarmDataGrid.localToGlobal(point);
				menu.show(point.x,point.y);  //显示右键菜单
			}
		}
			
		
		private function dealPoint(point:Point,height:Number,mHeight:Number):Point
		{
			var p:Point;
			if(mHeight>height)
			{
				if(mHeight-point.y>height)
				{
					p= point;
				}
				else if(point.y>height)
				{
					p = new Point(point.x,point.y-height);	
				}
				else 
				{
					p = new Point(point.x,mHeight-height);	
				}
			}
			return p;
		}
		
		//生成菜单项
		private function createMenuItems(e:ContextMenuEvent):Array
		{
			logger.warn("生成菜单项@！！");
			var menuItems:Array = new Array();
			var menuItem:Object;
			
			
			if(alarmDataGrid.selectedItems.length < 2 && checkboxMap.size < 1)
			{
				if(e.mouseTarget is AdvancedDataGridItemRenderer)
				{
					alarmDataGrid.selectedItem = (e.mouseTarget as AdvancedDataGridItemRenderer).data;
				}
				else if(e.mouseTarget is MXAdvancedDataGridItemRenderer)
				{
					alarmDataGrid.selectedItem = (e.mouseTarget as MXAdvancedDataGridItemRenderer).data;
				}
				else
				{
					return []; 
				}
			}
			
			
			var obj:Object = e.mouseTarget.parent as IListItemRenderer;
			if(obj == null)
				obj = e.mouseTarget as IListItemRenderer;
			var status:Object = obj.data.alarmstatus_old;
			var sheetStatus:Object = obj.data.sheetstatus_old;
			var sheetSendStatus:Object = obj.data.sheetsendstatus_old;
			
			
			var setFlag:Boolean = false;
			if(checkboxMap.size >= 1)//如果checkbox选中则以checkbox的数据优先
			{
				checkboxMap.forEach(function(key:String, data:Object):void
				{
					if(!setFlag)
					{
						setFlag = true;
						status = data.alarmstatus_old;
						sheetStatus = data.sheetstatus_old;
						sheetSendStatus = data.sheetsendstatus_old;
					}
				});
			}
			
			logger.info('生成右键菜单， 告警状态：' + status + ' 工单状态：' + sheetStatus + ' 派单状态：' + sheetSendStatus + ' 权限内菜单个数：' + allCmis.length + ' checkbox选中个数：' + checkboxMap.size);
			if(_scObj['isRela']==2){
				logger.debug("标记");
					menuItem = new Object();
					menuItem.label = "标记";
				if(checkboxMap.size > 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 1)){
					logger.debug("标记多选");
//					cm.customItems.push(cmi_alarmSign_multi);
					menuItem.type = "2";//2多选
				}else{
					logger.debug("标记单选");
//					cm.customItems.push(cmi_alarmSign);
					menuItem.type = "1";//1单选
				}
				menuItems.push(menuItem);
			}
			
			if(checkboxMap.size > 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 1))
			{
				for each(var mi:Object in allCmis)
				{
					if(cmiCacheActive.hasOwnProperty(mi['item_id']))
					{
						if(mi['item_name'] == "抑制派单")
						{
							menuItem = new Object();
							menuItem.label = mi['item_name'];
							menuItem.type = "2";
							logger.info("cmi_noDispSheet_multi !!");
							menuItems.push(menuItem);
						}
						
					}
				}
//				cm.customItems.push(cmi_noDispSheet_multi);
			/* 	menuItem = new Object();
				menuItem.label = "抑制派单";
				menuItem.type = "2";
				logger.info("cmi_noDispSheet_multi");
				menuItems.push(menuItem); */
			}
			else
			{
				logger.info(allCmis);
				if(sheetSendStatus == '1' ||
				((sheetSendStatus == '5' || sheetSendStatus == '6') && sheetStatus != '7'))
				{
					for each(var mi:Object in allCmis)
					{
						if(cmiCacheActive.hasOwnProperty(mi['item_id']))
						{
							if(mi['item_name']  == "抑制派单")
							{
								menuItem = new Object();
								menuItem.label = mi['item_name'];
								menuItem.type = "1";
								logger.info("cmi_noDispSheet !!");
								menuItems.push(menuItem);
							}
						}
					}
				}else{
					logger.info("noDispSheet");
				}
				/* if(sheetSendStatus == '1' ||
					((sheetSendStatus == '5' || sheetSendStatus == '6') && sheetStatus != '7'))
				{
					
//					cm.customItems.push(cmi_noDispSheet);
					menuItem = new Object();
					menuItem.label = "抑制派单";
					menuItem.type = "1";
					logger.info("cmi_noDispSheet");
					logger.info(allCmis);
					menuItems.push(menuItem);
				} */
			}
			//核心网告警分析
			if(checkboxMap.size > 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 1))
			{
				logger.info("核心网告警分析菜单显示隐藏：");
				logger.info(alarmDataGrid.selectedItems);
				var setCmi_alarmAnalysisFlag:Boolean = true;
				checkboxMap.forEach(function(key:String, data:Object):void
				{
					if(!((data.specialty_old==1 || ((data.specialty_old==5||data.specialty_old==6)&&(data.equipmentclass=="BSC" ||data.equipmentclass=="RNC")))&&data.alarmseverity_old==1))
						setCmi_alarmAnalysisFlag = false;
				});
				if(setCmi_alarmAnalysisFlag == true){
					for each(var mi:Object in allCmis)
					{
						if(mi['item_name'] == "核心网告警分析" && mi['ismulti'] == '1')//多选
						{
							menuItem = new Object();
							menuItem.label = mi['item_name'];
							menuItem.type = "2";
							logger.info("显示核心网告警分析菜单（多选） !!");
							menuItems.push(menuItem);
						}
						
						
					}
				}else{
					logger.info("不显示核心网告警分析菜单（多选）！！");	
				}

			}
			else
			{
				if((obj.data.specialty_old==1||((obj.data.specialty_old==5||obj.data.specialty_old==6)&&(obj.data.equipmentclass=="BSC"||obj.data.equipmentclass=="RNC")))&&obj.data.alarmseverity_old==1)
				{
					logger.info("条件");	
					logger.info(obj.data);	
					for each(var mi:Object in allCmis)
					{
							if(mi['item_name']  == "核心网告警分析" && mi['ismulti'] == '0')//单选
							{
								menuItem = new Object();
								menuItem.label = mi['item_name'];
								menuItem.type = "1";
								logger.info("显示核心网告警分析菜单（单选） !!");
								menuItems.push(menuItem);
							}
					}
				}else{
					logger.info("不显示核心网告警分析菜单（单选）！！");
				}
			}
			
			if(checkboxMap.size > 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 1))
				//				if(alarmDataGrid.selectedItems.length > 1)
			{
				var allActive:Boolean = true;
				var allNoActive:Boolean = true;
				
				logger.info('多选');
				for each(var mi:Object in allCmis)
				{
					if(cmiCacheMultiSelected.hasOwnProperty(mi['item_id']))
					{
//						(cmiCacheMultiSelected[mi['item_id']] as ContextMenuItem).caption = mi['item_name'];
//						cm.customItems.push(cmiCacheMultiSelected[mi['item_id']]);
						menuItem = new Object();
						menuItem.label = mi['item_name'];
						menuItem.type = "2";
						menuItems.push(menuItem);
					}
				}
			}
			else
			{
				if(status == '1')
				{
					logger.info('单选 - 活动告警.');
					for each(var mi:Object in allCmis)
					{
						if(cmiCacheActive.hasOwnProperty(mi['item_id']))
						{
//							(cmiCacheActive[mi['item_id']] as ContextMenuItem).caption = mi['item_name'];
//							cm.customItems.push(cmiCacheActive[mi['item_id']]);
							menuItem = new Object();
							menuItem.label = mi['item_name'];
							menuItem.type = "1";
							menuItems.push(menuItem);
						}
					}
				}
				else
				{
					logger.info('单选 - 非活动告警.');
					for each(var mi:Object in allCmis)
					{
						if(cmiCacheNoActive.hasOwnProperty(mi['item_id']))
						{
							
//							(cmiCacheNoActive[mi['item_id']] as ContextMenuItem).caption = mi['item_name'];
//							cm.customItems.push(cmiCacheNoActive[mi['item_id']]);
							menuItem = new Object();
							menuItem.label = mi['item_name'];
							menuItem.type = "1";
							menuItems.push(menuItem);
						}
					}
				}
			}
			
//			cm.customItems.push(cmi_addAlarmToSheet_multi);
			
			for each(var mi:Object in allCmis)
			{
				if(cmiCacheActive.hasOwnProperty(mi['item_id']))
				{
					if(mi['item_name']  == "增加告警至指定工单")
					{
						menuItem = new Object();
						menuItem.label = "增加告警至指定工单";
						menuItem.type = "2";
						menuItems.push(menuItem);
					}
				}
			}
			
			
			logger.debug("判断是否能够告警关联链接");
			
			//判断如果不存在relation ==1 那么可以出现多选的告警关联链接
			if(checkboxMap.size > 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 1)) 
			{
				//以下代码注释，原因：已经在告警关联页面做了限制，所以当前放开，只要选中2个告警，都可以出“告警关联”右键菜单，2014-3-10
				var relation:Boolean = false;//为false时，可以出现告警关联链接
				/* if(checkboxMap.size>0) {
					checkboxMap.forEach(function(key:String, data:Object):void
					{
						if(!relation)
						{
							if(data.hasOwnProperty("relation")&&data["relation"] == "1")
							{
								logger.debug(data);
								relation = true;
							}
						}
					});
				}else if(checkboxMap.size == 0 && alarmDataGrid.selectedItems.length > 0)
				{
					for each(var data:Object in alarmDataGrid.selectedItems) 
					{
						if(!relation)
						{
							if(data.hasOwnProperty("relation")&&data["relation"] == "1")
							{
								logger.debug(data);
								relation = true;
							}
						}
					}
				} */
				
				if(!relation) 
				{
//					cm.customItems.push(cmi_alarmHandRelation_multi);
					
					for each(var mi:Object in allCmis)
					{
						if(cmiCacheActive.hasOwnProperty(mi['item_id']))
						{
							if(mi['item_name']  == "告警关联")
							{
								menuItem = new Object();
								menuItem.label = "告警关联";
								menuItem.type = "2";
								menuItems.push(menuItem);
							}
						}
					}
					
				}
				
			}
			
			logger.debug("判断是否能够告警解除链接");
			
			//判断如果单条数据，并且存在relation字段，那么加入告警解除菜单
			if(checkboxMap.size == 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length == 1)){
				logger.debug(obj.data);
				if(obj.data.hasOwnProperty("relation")&& obj["data"]["relation"] == "1")
				{
//					cm.customItems.push(cmi_alarmRelationSep);	告警解除
					/* menuItem = new Object();
					menuItem.label = "告警解除";
					menuItem.type = "1";
					menuItems.push(menuItem); */
					
					for each(var mi:Object in allCmis)
					{
						if(cmiCacheActive.hasOwnProperty(mi['item_id']))
						{
							if(mi['item_name']  == "告警解除")
							{
								menuItem = new Object();
								menuItem.label = "告警解除";
								menuItem.type = "1";
								menuItems.push(menuItem);
							}
						}
					}
				}
			}
			
			//如何判断是子节点，而不是父节点，才可以出现关联规则菜单
			if(checkboxMap.size == 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length == 1))
			{
				logger.info(obj["data"]);
				logger.info(obj["data"]["parentflag"]=="1"||obj["data"]["parentflag"]=="3");
				if(obj["data"]["parentflag"]=="1"||obj["data"]["parentflag"]=="3") 
				{
					logger.info("增加关联规则！！");
//					cm.customItems.push(cmi_alarmRelationRule);
					/* menuItem = new Object();
					menuItem.label = "关联规则";
					menuItem.type = "1";
					menuItems.push(menuItem); */
					
					for each(var mi:Object in allCmis)
					{
						if(cmiCacheActive.hasOwnProperty(mi['item_id']))
						{
							if(mi['item_name']  == "关联规则")
							{
								menuItem = new Object();
								menuItem.label = "关联规则";
								menuItem.type = "1";
								menuItems.push(menuItem);
							}
						}
					}
				}
			}
			
			logger.info("告警百科详情");
			if(checkboxMap.size == 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length == 1)){
					/* menuItem = new Object();
					menuItem.label = "告警百科详情";
					menuItem.type = "1";
					menuItems.push(menuItem); */
					
					for each(var mi:Object in allCmis)
					{
						if(cmiCacheActive.hasOwnProperty(mi['item_id']))
						{
							if(mi['item_name']  == "告警百科详情")
							{
								menuItem = new Object();
								menuItem.label = "告警百科详情";
								menuItem.type = "1";
								menuItems.push(menuItem); 
							}
						}
					}
			}
			logger.info("故障预处理");//单选&&活动告警
			if(status == '1'&&(checkboxMap.size == 1 || (checkboxMap.size == 0 && alarmDataGrid.selectedItems.length == 1))){
				
				for each(var mi:Object in allCmis)
				{
					if(cmiCacheActive.hasOwnProperty(mi['item_id']))
					{
						if(mi['item_name']  == "故障预处理")
						{
							menuItem = new Object();
							menuItem.label = "故障预处理";
							menuItem.type = "1";
							menuItems.push(menuItem);
						}
					}
				}
			}
			return menuItems;
		}
		
		//事件响应
		private function menuItemSelected(event:MenuEvent):void
		{
			logger.warn("事件响应！！");
			var menuItem:Object = event.menu.selectedItem as Object;
			
			var label:String = menuItem.label;
			var type:String = menuItem.type;
//			var e:ContextMenuEvent = new ContextMenuEvent(ContextMenuEvent.MENU_ITEM_SELECT, true, false, selectTarget as InteractiveObject, rightClickMenuOwner as InteractiveObject);
			if(type=="1")
			{
				logger.info(rightClickMenuOwner==null);
				logger.info(selectTarget==null);
				var obj:Object = rightClickMenuOwner as IListItemRenderer;
				if(obj == null)
					obj = selectTarget as IListItemRenderer;
				popupDealer(null,label,obj);
			}
			else if(type=="2")
			{
				popupDealerMulti(null,label);
			}
			
		}
		
		//初始化
		public function regist() : Boolean
		{
			logger.warn(ExternalInterface.available);
			if (ExternalInterface.available)
			{
				ExternalInterface.call(rightClickRegisted.javascript, ExternalInterface.objectID);
				ExternalInterface.addCallback(RIGHT_CLICK, dispatchRightClickEvent);
				FlexGlobals.topLevelApplication.addEventListener(MouseEvent.MOUSE_OVER,mouseOverHandler);
				//Application.application.addEventListener(MouseEvent.MOUSE_OVER,mouseOverHandler);
			}// end if
			return true;
		}
		
		private function mouseOverHandler(event:MouseEvent) : void
		{
			rightClickTarget = InteractiveObject(event.target);
			return;
		}
		
		private function dispatchRightClickEvent() : void
		{
			logger.warn("dispatchRightClickEvent");
			var event:ContextMenuEvent;
			if (rightClickTarget != null)
			{
				event = new ContextMenuEvent(RIGHT_CLICK, true, false, rightClickTarget as InteractiveObject, rightClickTarget as InteractiveObject);
				rightClickTarget.dispatchEvent(event);
			}// end if
			return;
		}
			
			protected function window1_initializeHandler(event:FlexEvent):void
			{
				TreeCheckBoxRenderer.setAlarmSelected = setAlarmSelected;
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%">
		<mx:AdvancedDataGrid id="alarmDataGrid"
							 itemOpen="loadSubOrParentWarns(event)"
							 width="100%" 
							 height="100%"
							 sortExpertMode="true"
							 displayItemsExpanded="false"
							 groupItemRenderer="{new ClassFactory(TreeCheckBoxRenderer)}"
							 doubleClickEnabled="true"
							 textAlign="left"
							 itemDoubleClick="showWarnDetail(event)"
							 folderClosedIcon="{null}" 
							 folderOpenIcon="{null}" 
							 defaultLeafIcon="{null}"
							 disclosureClosedIcon="{treeClose}" 
							 disclosureOpenIcon="{treeOpen}"
							 editable="false"
							 selectionMode="multipleRows"
							 allowMultipleSelection="true"
							 enabled="true"
							 draggableColumns="false"
							 verticalScrollPolicy="auto"
							 horizontalScrollPolicy="auto"/>
		<s:VGroup width="100%">
			<s:HGroup width="100%" horizontalAlign="right" color="0xFFFFFF" verticalAlign="top">
				<pager:Pager id="pager" 
							 pageSize="200" 
							 pageChange="queryPage()" />
				<s:Group width="10"/>
			</s:HGroup>
			<s:Group height="3"/>
		</s:VGroup>
		
		<panel:Window id="confirmWindow" visible="false" x="380" y="190" includeInLayout="false"
					  dragable="true" width="300" height="180" 
					  minimizable="false" maximizable="false"
					  title="确认提示" close="hideWindow()">
			<s:VGroup height="100%" width="100%" horizontalAlign="center" verticalAlign="middle">
				<s:Label id="msgLabel" text="... ..."/>
				<s:Group height="30"/>
				<s:HGroup>
					<s:Button label="确定" click="exportArr()"/>
					<s:Button label="取消" click="hideWindow()"/>
				</s:HGroup>
			</s:VGroup>
		</panel:Window>
		
		<panel:Window id="confirmWindow2" visible="false" x="310" y="160" includeInLayout="false" backgroundAlpha="0.9"
					  dragable="true" width="300" height="180" 
					  minimizable="false" maximizable="false"
					  title="导出类型选择" close="hideWindow2()">
			<s:VGroup height="100%" width="100%" horizontalAlign="left" verticalAlign="middle">
				<s:VGroup height="100%" width="100%" horizontalAlign="left" verticalAlign="middle" paddingLeft="43">
					<s:RadioButton label="导出当前页面中的告警数据" id="currPageRadio" selected="true" groupName="exportType"/>
					<s:RadioButton label="导出符合查询条件的所有告警" id="allAlarmRadio" groupName="exportType"/>
				</s:VGroup>
				<s:Group height="10"/>
				<s:HGroup gap="35" width="100%" horizontalAlign="center">
					<s:Button label="确定" click="exportArr2()"/>
					<s:Button label="取消" click="hideWindow2()"/>
				</s:HGroup>
				<s:Group height="10"/>
			</s:VGroup>
		</panel:Window>
			
	</s:VGroup>
	
	<mx:HBox horizontalAlign="right" width="50%" 
			 top="-25" 
			 right="3"
			 verticalAlign="middle"
			 paddingRight="20"
			 paddingTop="5"
			 >
		<mx:Image id="export"
				  source="{iconExport}"
				  autoLoad="true"
				  toolTip="查询结果导出"
				  buttonMode="true"
				  visible="true"
				  click="clickHandler_exportExcel2()"
				  />
		<mx:Image id="tool"
				  source="{iconConfig}"
				  autoLoad="true"
				  toolTip="显示列配置"
				  visible="true"
				  buttonMode="true"
				  click="confColumns(event)"
				  />
	</mx:HBox>
</panel:Window>
