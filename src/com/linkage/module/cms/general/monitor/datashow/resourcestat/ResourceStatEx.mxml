<?xml version="1.0" encoding="utf-8"?>
<datashow:DataWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark"
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 xmlns:datashow="com.linkage.module.cms.general.monitor.datashow.*"
					 width="100%"
					 height="100%">
	<datashow:layout>
		<s:BasicLayout/>
	</datashow:layout>
	<fx:Script>
		<![CDATA[
			import com.linkage.module.cms.components.loadmanager.LoadManager;
			import com.linkage.module.cms.general.monitor.GeneralMonitorModule;
			import com.linkage.module.cms.general.monitor.datamanager.RemoteDataManager;
			import com.linkage.system.component.panel.Window;
			import com.linkage.system.logging.ILogger;
			import com.linkage.system.logging.Log;
			import com.linkage.system.utils.ExcelUtil;
			import com.linkage.system.utils.StringUtils;

			import flash.sampler.NewObjectSample;
			import flash.utils.setTimeout;

			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.containers.Canvas;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.Alert;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;

			import nl.demonsters.debugger.MonsterDebugger;

			import spark.components.NavigatorContent;
			import spark.components.Panel;
			import spark.events.IndexChangeEvent;

			//日志
			public var log:ILogger = Log.getLogger("com.linkage.module.cms.general.monitor.datashow.ResourceStatEx");

			[Embed(source="../../../img/icon_export.png")]
			[Bindable]
			public static var iconExport:Class;

			private var exportCache:Object = new Object();
			private var nowIndex:uint = 0;

			//数据接口
			private var _remoteData:RemoteDataManager = null;

			//属地编号
			private var _cityId:String = null;

			//专业列表
			private var _specList:ArrayList = null;

			//定时任务
			private var t:Timer = new Timer(60000);

			[Bindable]
			private var _popParent:DisplayObject = null;

			private var moList:MoListWindow = new MoListWindow();

			private var lm:LoadManager = new LoadManager(moList);

			//数据结果
			public var resourceArray:ArrayCollection = new ArrayCollection([
				{name: "核心网", data: [{name: "SSA", value: "4"}, {name: "TMG", value: "6"}]},
				{name: "无线网", data: [{name: "BSC", value: "8"}, {name: "RNC", value: "10"}]}]);

			//排序用
			private var orderMap:Object = ["2G无线", "TD无线", "核心网", "无线网", "传输网", "动环网", "数据网"];

			//手型鼠标呈项器
			private var btModeRender:IFactory = new ClassFactory(ButtonModeRender);

			public function get specList():ArrayList
			{
				return _specList;
			}

			public function set specList(value:ArrayList):void
			{
				_specList = value;
			}

			public function get cityId():String
			{
				return _cityId;
			}

			public function set cityId(value:String):void
			{
				_cityId = value;
			}

			public function get remoteData():RemoteDataManager
			{
				return _remoteData;
			}

			public function set remoteData(value:RemoteDataManager):void
			{
				_remoteData = value;
			}

			override public function initData():void
			{
				moList._queryCallBack = queryMoList;

				//显示等待界面
				//loadInfo = new LoadManager(this.info);
				//loadInfo.showLoading("正在加载数据，请稍候");

				//加载数据
				loadData();

				//启动定时任务
				t.addEventListener(TimerEvent.TIMER, loadData);
				t.start();
				//-------------------------------------历史回退修改------------------------------------
				setTimeout(function(){
						parentApplication.add(t);
					}, 3000);
				//-------------------------------------历史回退修改------------------------------------
			}

			//显示页面，启动定时任务
			override public function showView():void
			{
				if(t != null && !t.running)
				{
					t.start();
					//-------------------------------------历史回退修改------------------------------------
					this.parentApplication.add(t);
						//-------------------------------------历史回退修改------------------------------------
				}
			}

			//隐藏页面，停止定时任务
			override public function hideView():void
			{
				if(t != null && t.running)
				{
					t.stop();
					//-------------------------------------历史回退修改------------------------------------
					this.parentApplication.remove(t);
						//-------------------------------------历史回退修改------------------------------------
				}

				moList.hidePopupWindow();
			}

			//加载数据
			public function loadData(event:TimerEvent = null):void
			{
				log.info("查询资源参数　_cityId=" + _cityId);
				//加载数据
				if(_cityId != null && !StringUtils.isEmpty(_cityId))
				{
					_remoteData.getCityResources(_cityId, _specList, getResInfo, null, getResInfoErr);
				}
				else
				{
					_remoteData.getAllProvinceResources(_specList, getResInfo, null, getResInfoErr);
				}
			}

			public function getResInfo(obj:Object):void
			{
				log.info("资源统计数据：" + obj);
				if(obj != null)
				{
					createTable(obj);
					obj = null;
				}
				//查询无数据
				else
				{
					log.info("资源统计：查询无数据");
					Alert.show("资源统计数据查询为空！");
						//createTable(resourceArray);
				}

				//loadInfo.hideLoading();
			}

			//缓存表格
			private var tableMap:Dictionary = new Dictionary();

			private function createTable(obj:Object):void
			{
				var refresh:Boolean = false;
				var index:uint = 0;

				for each(var resourceData:Object in obj)
				{
					var d:AdvancedDataGrid = null;

					//如果没有当前的TABLE，则重新生成
					if(tableMap[resourceData.name] == null)
					{
						d = new AdvancedDataGrid();
						d.horizontalScrollPolicy = "off";
						d.verticalScrollPolicy = "auto";
						d.sortableColumns = false;
						//d.showHeaders = false;
						d.percentHeight = 100;
						d.percentWidth = 100;

						//生成列
						var colArr:Array = new Array();
						var c1:AdvancedDataGridColumn = new AdvancedDataGridColumn();
						c1.headerText = "网元类型　";
						c1.dataField = "name";
						c1.width = 300;
						colArr = colArr.concat(c1);
						var c2:AdvancedDataGridColumn = new AdvancedDataGridColumn();
						c2.headerText = "网元数量";
						c2.dataField = "value";
						c2.width = 600;
						c2.itemRenderer = btModeRender;
						colArr = colArr.concat(c2);
						d.columns = colArr;

						d.addEventListener(ListEvent.ITEM_CLICK, dealItemClick);

						//缓存当前的TABLE
						tableMap[resourceData.name] = d;
						refresh = true;
					}
					//否则直接赋值
					else
					{
						d = (tableMap[resourceData.name] as AdvancedDataGrid);
					}

					d.dataProvider = resourceData.data;
				}

				//将表格添加到页面
				if(refresh)
				{
					this.viewStack1.removeAllElements();
					for each(var str:String in orderMap)
					{
						if(tableMap[str] != null)
						{
							d = (tableMap[str] as AdvancedDataGrid);
							var n:NavigatorContent = new NavigatorContent();
							n.label = str;
							n.addElement(d);

							exportCache[index++] = {'table': d, 'title': str};
							log.info("资源统计  ###>>> index:" + (index - 1) + " name:" + str);

							this.viewStack1.addElement(n);
						}
					}
				}
				obj = null;
			}

			private function dealItemClick(e:ListEvent):void
			{
				var dataField:String = e.target.columns[e.columnIndex].dataField;

				//网元统计数据点击
				if(dataField == "value")
				{
					var moTypeName:String = e.target.dataProvider[e.rowIndex].name;
					var moTypeId:String = e.target.dataProvider[e.rowIndex].moTypeId;
					var specId:String = e.target.dataProvider[e.rowIndex].specId;
					var totalCount:String = e.target.dataProvider[e.rowIndex].value;

					var param:Object = {'cityId': String(_cityId),
							'moTypeId': String(moTypeId),
							'moTypeName': String(moTypeName),
							'specId': String(specId),
							'totalCount': String(totalCount),
							'pageSize': '200',
							'currPage': '1'};
					queryMoList(param);

					moList.setTotalCount(Number(totalCount));
				}
			}

			private function queryMoList(param:Object):void
			{
				moList.popupWindow(_popParent);

				lm.showLoading();
				log.info("开始加载网元列表   参数  cityId:" + param['cityId']
					+ " moTypeId:" + param['moTypeId']
					+ " specId:" + param['specId']
					+ " totalCount:" + param['totalCount']
					+ " pageSize:" + param['pageSize']
					+ " currPage:" + param['currPage']);

				_remoteData.getDevListByType(param,
					function(result:Object):void
					{
						log.info("加载网元列表成功！");
						lm.hideLoading();
						moList.showMoList(result, param);
					},
					null,
					function(e:FaultEvent):void
					{
						log.error("加载网元列表失败！" + e.message + " \t detail:" + e.fault.faultDetail);
						lm.hideLoading();
					});
			}

			public function getResInfoErr(obj:Object):void
			{
				log.info("资源统计：查询数据异常");
				Alert.show("资源统计数据查询异常！");
				//createTable(resourceArray);
				//loadInfo.hideLoading();
			}

			override public function hideDataGroup():void
			{
				this.showGroup.visible = false;
				this.showGroup.includeInLayout = false;

				hideView();
			}

			override public function showDataGroup():void
			{
				this.showGroup.visible = true;
				this.showGroup.includeInLayout = true;

				showView();
			}

			override public function showGroupInfo():Group
			{
				return this.showGroup;
			}

			public function get popParent():DisplayObject
			{
				return _popParent;
			}

			public function set popParent(value:DisplayObject):void
			{
				_popParent = value;
			}

			protected function tabBar_changeHandler(event:IndexChangeEvent):void
			{
				nowIndex = event.newIndex;
			}


			protected function export_clickHandler(event:MouseEvent):void
			{
//				var headArr:Array = [];
//				for each(var col:AdvancedDataGridColumn in exportCache[nowIndex]['table'].columns)
//				{
//					headArr.push({id:col.dataField, name:col.headerText});
//				}
//				ExcelUtil.exportSimpleExcel(this.title + "__" + exportCache[nowIndex]['title'], headArr, exportCache[nowIndex]['table'].dataProvider);

				var url:String = GeneralMonitorModule.exportUrl + "!exportRes.action";
				ExternalInterface.call("export2Excel", url, {'sheetName': exportCache[nowIndex]['title'], 'cityId': _cityId}, "1");
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:VGroup width="100%"
			  height="100%"
			  id="showGroup"
			  visible="false"
			  includeInLayout="false">
		<s:Scroller width="100%"
					height="100%"
					verticalScrollPolicy="auto"
					horizontalScrollPolicy="auto">
			<s:Group>
				<mx:ViewStack id="viewStack1"
							  height="100%"
							  width="100%"
							  top="23"
							  paddingBottom="2"
							  paddingLeft="2"
							  paddingRight="2"
							  paddingTop="2">
				</mx:ViewStack>
				<s:TabBar dataProvider="{viewStack1}"
						  id="tabBar"
						  change="tabBar_changeHandler(event)"
						  styleName="commonTabBar"
						  buttonMode="true">
				</s:TabBar>
			</s:Group>
		</s:Scroller>
	</s:VGroup>

	<mx:Image id="export"
			  source="{iconExport}"
			  autoLoad="true"
			  toolTip="导出"
			  buttonMode="true"
			  visible="{showGroup.visible}"
			  top="-16"
			  right="30"
			  click="export_clickHandler(event)"/>
</datashow:DataWindow>
