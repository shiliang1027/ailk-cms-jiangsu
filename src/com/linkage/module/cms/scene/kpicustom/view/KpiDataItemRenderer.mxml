<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                autoDrawBackground="false"
                width="100%"
                xmlns:ailk_chart="http://www.asiainfo-linkage.com.cn/flex/chart"
                creationComplete="pc_creationCompleteHandler(event)">


    <fx:Script>
        <![CDATA[
            import com.ailk.common.system.logging.ILogger;
            import com.ailk.common.system.logging.Log;
            import com.ailk.common.ui.chart.core.ChartParam;
            import com.ailk.common.ui.chart.core.PrettyChartType;
            import com.ailk.common.ui.chart.core.SerialParam;
            import com.ailk.common.ui.chart.renderer.HorizontalLine;

            import mx.charts.HitData;
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;

            private var horizontalLines:ArrayCollection;

            private static var log:ILogger = Log.getLoggerByClass(KpiDataItemRenderer);

            protected function showHideThreshold_changeHandler(event:Event):void
            {
                title.text = data.kpiName;
                pc.chartParam.xAxisProperty = 'time';
                pc.chartParam.showLegend = false;

                if (data.unit != null)
                {
                    pc.chartParam.leftYaxisSuffix = data.unit + "";
                }

                try
                {
                    if (CheckBox(event.currentTarget).selected)
                    {
                        pc.chartParam.horizontalLines = horizontalLines;
                        pc.chartData(data.datas, true);
                    }
                    else
                    {
                        pc.chartParam.horizontalLines = new ArrayCollection();
                        pc.chartData(data.datas, true);
                    }
                }
                catch (e:Error)
                {
                    log.error("指标图表异常：" + e.message);
                }
            }

            protected function pc_creationCompleteHandler(event:FlexEvent):void
            {
                pc.percentWidth = 100;
                buildChart();
            }

            private var idNameMap:Object = {};

            private function buildChart():void
            {
                try
                {
                    log.debug("指标查询数据处理：");
                    log.debug(data);

                    if (data == null || data.datas == null || data.datas.length < 1)
                        return;

                    pc.xAxisFontSize = 13;
                    pc.justifyMaxValue = true;
                    var series:ArrayCollection = new ArrayCollection();

                    for each (var item:* in data.moOrAreas)
                    {
                        var sp:SerialParam = new SerialParam(item.id, item.name);
                        series.addItem(sp);
                        idNameMap[item.id] = item.name;
                    }
                    pc.series = series;
                    var chartParam:ChartParam = new ChartParam();

                    title.text = data.kpiName;

                    chartParam.xAxisProperty = 'time';
                    chartParam.showLegend = false;

                    horizontalLines = new ArrayCollection();

                    for each (var hdata:Object in data.threshold)
                    {
                        var hl:HorizontalLine = new HorizontalLine();
                        hl.yValue = Number(hdata.down_value);
                        hl.lineColor = uint(hdata.color);
                        hl.lineThickness = 1;
                        hl.dashedLine = false;
                        horizontalLines.addItem(hl);

                        hl = new HorizontalLine();
                        hl.yValue = Number(hdata.up_value);
                        hl.lineColor = uint(hdata.color);
                        hl.lineThickness = 1;
                        hl.dashedLine = false;
                        horizontalLines.addItem(hl);
                    }

                    if (data.unit != null)
                    {
                        chartParam.leftYaxisSuffix = data.unit + "";
                    }

                    if (showHideThresholdCB.selected)
                    {
                        chartParam.horizontalLines = horizontalLines;
                    }

                    pc.canDropLabels = data.datas.length != 1;
                    pc.chartParam = chartParam;
                    pc.chartData(data.datas, true);

                }
                catch (e:Error)
                {
                    log.error("指标图表异常：" + e.message);
                }
            }

            public function tipFunc(hd:HitData):String
            {
                var data:Object = hd.item;

                var moId:Object = hd.element['yField'];
                var value:Object = data[moId];

                var msg:String = "<B>" + idNameMap[moId] + "</B>\n" + data["time"] + "\n" + value;

                if (data.hasOwnProperty("calcute"))
                    msg += "\n算法：" + data['calcute'];

                if (data.hasOwnProperty("numberator_name"))
                msg += "\n分子：" + data['numberator_name'] + "\n分母：" + data['deno_name'];

                return msg;
            }
        ]]>
    </fx:Script>
    <ailk_chart:PrettyChart clipAndEnableScrolling="true"
                            top="20"
                            id="pc"
                            dataTipFunc="tipFunc"
                            width="660"
                            height="180"/>
    <s:CheckBox label="显隐阈值基线"
                id="showHideThresholdCB"
                change="showHideThreshold_changeHandler(event)"
                visible="{data.datas.length>0?true:false}"
                right="10"
                top="0"
                selected="false"/>
    <s:Label id="title"
             top="0"
             horizontalCenter="0"/>
</s:ItemRenderer>
