<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         width="100%"
         height="100%"
         doubleClickEnabled="false"
         xmlns:parsley="http://www.spicefactory.org/parsley"
         xmlns:components="com.linkage.module.cms.scene.view.components.*"
         xmlns:ailk_compts="http://www.asiainfo-linkage.com.cn/flex/components"
         xmlns:ailk_chart="http://www.asiainfo-linkage.com.cn/flex/chart"
         xmlns:view="com.linkage.module.cms.scene.kpicustom.view.*"
         xmlns:view1="com.linkage.module.cms.scene.view.*"
         xmlns:util="com.linkage.module.cms.scene.view.util.*"
         xmlns:sceneviewcomp="com.linkage.module.cms.scene.view.sceneviewcomp.*">

    <fx:Declarations>
        <parsley:Configure/>
        <s:Resize heightTo="0"
                  effectEnd="resize_effectEndHandler(event)"
                  id="resize"/>
        <s:Fade id="winListResize"
                target="{pbh}"
                effectEnd="winListResize_effectEndHandler(event)"/>
    </fx:Declarations>
    <fx:Script>
        <![CDATA[
			import com.ailk.common.system.logging.ILogger;
			import com.ailk.common.system.logging.Log;
			import com.ailk.common.ui.chart.core.ChartParam;
			import com.ailk.common.ui.chart.core.PrettyChartType;
			import com.ailk.common.ui.chart.core.SerialParam;
			import com.ailk.common.ui.chart.event.PrettyChartEvent;
			import com.ailk.common.ui.components.requestserver.RequestServerUtil;
			import com.ailk.common.ui.components.window.standardwindow.event.WindowEvent;
			import com.linkage.module.cms.scene.domain.MapViewDM;
			import com.linkage.module.cms.scene.domain.common.IUser;
			import com.linkage.module.cms.scene.event.KPISituationEvent;
			import com.linkage.module.cms.scene.event.ResMatrixEvent;
			import com.linkage.module.cms.scene.event.SceneEvent;
			import com.linkage.module.cms.scene.event.compenent.QuitServiceEvent;
			import com.linkage.module.cms.scene.event.compenent.SceneIntroEvent;
			import com.linkage.module.cms.scene.kpicustom.event.KpiCustomEvent;
			import com.linkage.module.cms.scene.view.components.CameraListShowWin;
			import com.linkage.module.cms.scene.view.components.CheckBoxComp;
			import com.linkage.module.cms.scene.view.components.CompareDateVGroup;
			import com.linkage.module.cms.scene.view.components.DegradationTOPN;
			import com.linkage.module.cms.scene.view.components.EmgyResource;
			import com.linkage.module.cms.scene.view.components.KPISituation;
			import com.linkage.module.cms.scene.view.components.MapVectorComp;
			import com.linkage.module.cms.scene.view.components.MapView;
			import com.linkage.module.cms.scene.view.components.MapViewPM;
			import com.linkage.module.cms.scene.view.components.PerformanceIndex;
			import com.linkage.module.cms.scene.view.components.QuitService;
			import com.linkage.module.cms.scene.view.components.RaceInfoComp;
			import com.linkage.module.cms.scene.view.components.ResMatrixComp;
			import com.linkage.module.cms.scene.view.components.Roam;
			import com.linkage.module.cms.scene.view.components.SceneAlarmFlow;
			import com.linkage.module.cms.scene.view.components.SceneIntro;
			import com.linkage.module.cms.scene.view.components.SceneTerminalFloat;
			import com.linkage.module.cms.scene.view.components.SceneTopNFloat;
			import com.linkage.module.cms.scene.view.components.SheetStat;
			import com.linkage.module.cms.scene.view.components.TrainTimeTable;
			import com.linkage.module.cms.scene.view.components.WeatherSituation;
			import com.linkage.module.cms.scene.view.components.WorstCellPanel;
			import com.linkage.module.cms.scene.view.sceneviewcomp.ThirdDSceneWin;
			import com.linkage.module.cms.scene.view.sceneviewcomp.WebKPIWin;
			import com.linkage.module.cms.scene.view.util.DateUtils;
			import com.linkage.module.cms.scene.view.util.IFrame;
			
			import mx.charts.HitData;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import spark.components.CheckBox;
			import spark.components.ToggleButton;
			import spark.components.VGroup;
			import spark.core.NavigationUnit;

            private var log:ILogger = Log.getLoggerByClass(SceneView);

            [Embed(source = "../img/up_gray.png")]
            [Bindable]
            private var _up_gray:Class;

            [Embed(source = "../img/up_blue.png")]
            [Bindable]
            private var _up_blue:Class;

            [Embed(source = "../img/down_gray.png")]
            [Bindable]
            private var _down_gray:Class;

            [Embed(source = "../img/down_blue.png")]
            [Bindable]
            private var _down_blue:Class;

            [Embed(source = "../img/left_gray.png")]
            [Bindable]
            private var _left_gray:Class;

            [Embed(source = "../img/left_blue.png")]
            [Bindable]
            private var _left_blue:Class;

            [Embed(source = "../img/right_gray.png")]
            [Bindable]
            private var _right_gray:Class;

            [Embed(source = "../img/right_blue.png")]
            [Bindable]
            private var _right_blue:Class;

            [Bindable]
            [Embed(source = "../img/down.png")]
            private var down:Class;

            [Bindable]
            [Embed(source = "../img/up.png")]
            private var up:Class;

            [Bindable]
            [Embed(source = "../img/refresh.png")]
            private var refresh:Class;

            [Bindable]
            [Embed(source = "../img/no_refresh.png")]
            private var no_refresh:Class;

            [Bindable]
            [Embed(source = "../img/la.png")]
            private var la:Class;
            [Bindable]
            [Embed(source = "../img/ra.png")]
            private var ra:Class;

            [Embed(source = "../img/gislayer.png")]
            private var gislayer:Class;

            [Bindable]
            private var showFlag:Object = {"1": false, "2": false};

            [Inject("sceneTopNFloat")]
            public var sceneTopNFloat:SceneTopNFloat;

            [Inject("sceneTerminalFloat")]
            public var sceneTerminalFloat:SceneTerminalFloat;

            [Inject("sceneViewPM")]
			[Bindable]
            public var sceneViewPM:SceneViewPM;

            [Inject("mapViewPM")]
            [Bindable]
            public var mapViewPM:MapViewPM;

            [MessageDispatcher]
            public var msgDispatcher:Function;

            [Inject("user")]
            public var user:IUser;
			[Inject("requestServerUtil")]
			public var requestServerUtil:RequestServerUtil;
            private var alarmInitFlag:Boolean = false;

            /* [Inject("sceneConfigDM")]
            public var sceneConfigDM:sceneConfigDM;

            [Inject("kPISituationDM")]
            public var kpiSituationDM:KPISituationDM; */

            [Inject("cameraListShowWin")]
            public var cameraListShowWin:CameraListShowWin;

            private var dataRefreshTimer:Timer = null;
            private var topnDataRefreshTimer:Timer = null;

            private var param:Object = {};

            private var popWin:Window;

            public var count:int = 0;

            public var countSign:int = 0;
            [Bindable]
            public var intervalS:String;

            [Bindable]
            private var compareDateData:String;

            private var arrayListD:ArrayCollection = new ArrayCollection();

            private var arrayListM:ArrayCollection = new ArrayCollection();

            private var arrayListY:ArrayCollection = new ArrayCollection();
            //查询指标是否比较时间。
            private var compareDateFlag:String = "0"; //入口标识  1：有比较时间  0：没有比较时间
            //视图模式  1：默认模式     2：问题处理模式
            [Bindable]
            public var viewMode:String = "1";

            [Inject("alarmComp")]
            public var alarmComp:SceneAlarmFlow;

            [Inject("gisComp")]
            public var gisComp:MapView;

            [Inject("mapVectorComp")]
            public var mapVectorComp:MapVectorComp;

            private function initSubComp():void
            {
                alarmFlowGroup.addElementAt(alarmComp, 0);
//
//                gisComp.visible = false;
//                gisComp.includeInLayout = false;

				
//				gisGroup.addElementAt(mapVectorComp, 0);
//				gisGroup.addElementAt(gisComp, 0);
				
				gisGroup.addElement(mapVectorComp);
				gisGroup.addElement(gisComp);
				
            }

            [MessageHandler(selector = "LOAD_REFRESH_ALARM_FLOW")]
            public function showAlarmFlowByFilter(e:SceneIntroEvent):void
            {
                log.info("劣化一级告警详情或者退服基站后的详情 点击处理：处理流水窗口！");

                if (!alarmInitFlag)
                {
                    alarmInitFlag = true;
                    alarmComp.initAlarm(e.params["ruleContent"]);

                    if (alarmVgroup.height <= 35)
                    {
                        log.info("初始化、展开流水窗口！");
                        showAlarm();
                    }
                }
                else
                {
                    if (alarmVgroup.height <= 35)
                    {
                        log.info("初始化、展开流水窗口！");
                        showAlarm();
                    }

                    alarmComp.filterAlarmByFilter(e.params);
                }
            }

			[MessageHandler(selector = "MODULE_COMPLETE")]
            public function initView(e:SceneEvent):void
            {
				group1_creationCompleteHandler();
                user.lastTimeStamp = new Date().getTime();
                log.info("[判断矢量图还是gis地图] :" + user.currentMapType);

                //判断当前场景是使用矢量图还是gis地图 注：0：GIS地图  1：使用矢量图
                if ("0" == user.currentMapType)
                {
                    mapVectorComp.visible = false;
//                    mapVectorComp.includeInLayout = false;

                    gisComp.visible = true;
//                    gisComp.includeInLayout = true;
                }
                else
                {
                    mapVectorComp.visible = true;
//                    mapVectorComp.includeInLayout = true;

                    gisComp.visible = false;
//                    gisComp.includeInLayout = false;

//                    mapVectorComp.mapWork_creationCompleteHandler();
                }

//TODO                quitChart.percentWidth = 100;

//                sceneViewPM.initViewPanel();
				

//TODO
/*                 if (user.newAdded == "1")
                {
                    //从定制场景跳转过来，那么初始40s每隔10s刷新一次，依次刷新面板，然后恢复5分钟刷新一次
                    dataRefreshTimer = new Timer(120000, 3);
                    topnDataRefreshTimer = new Timer(120000, 3); //topn刷新20次
                }
                else
                {
                    //默认5分钟刷新一次；
                    dataRefreshTimer = new Timer(60 * 5 * 1000);

                }

                dataRefreshTimer.addEventListener(TimerEvent.TIMER, refreshDatas);
                setTimeout(function():void
                {
                    dataRefreshTimer.start();
                }, 30000);

                if (topnDataRefreshTimer)
                {
                    topnDataRefreshTimer.addEventListener(TimerEvent.TIMER, topnRefreshDatas);
                    topnDataRefreshTimer.start();
                }
				*/
                if (user.sceneId == "1004")
                    setTimeout(function():void
                    {
                        resizeWindow(3);
                        setTimeout(function():void
                        {
                            resizeWindow(2);
                        }, 2000);

                    }, 2000);

                initSubComp();
				msgDispatcher(new SceneEvent("REFRESH_START"));
            }
			
			[MessageHandler(selector = "MAPVECTORCOMP_COMPLETE")]
			public function MAPVECTORCOMP_COMPLETE(e:SceneEvent):void
			{
				sceneViewPM.initViewPanel();
			}

            private var refreshNewAddedTimes:Boolean = true;
            private var topnRefreshNewAddedTimes:Boolean = true;

             private function refreshDatas(e:TimerEvent = null):void
            {
                var nowTime:Number = new Date().getTime();

                if (isNaN(user.lastTimeStamp))
                    user.lastTimeStamp = nowTime;

                if (nowTime - user.lastTimeStamp < 30000)
                {
                    log.warn("距离上次切换/刷新时间小于30秒，暂不刷新。");
                    return;
                }

                user.lastTimeStamp = nowTime;

                log.info("刷新面板数据！");

                if (e && refreshNewAddedTimes)
                {
                    log.info("第{0}次刷新面板", dataRefreshTimer.currentCount);

//                    if (dataRefreshTimer.currentCount == 3)
//                    {
//                        dataRefreshTimer.repeatCount = 0;
//                        dataRefreshTimer.delay = 300000;
//
//                        if (dataRefreshTimer.running)
//                            dataRefreshTimer.stop();
//                        dataRefreshTimer.start();
//                        refreshNewAddedTimes = false;
//                    }
                }

                var refreshEvt:SceneEvent = new SceneEvent(SceneEvent.COMPONENT_REFRESH_DATA);
                refreshEvt.param = new Object();
                refreshEvt.param = "COMPONENT_REFRESH_DATA";
                msgDispatcher(refreshEvt);
            }

            private function refreshDatas1(e:TimerEvent = null):void
            {
                log.info("刷新面板数据1！");
                msgDispatcher(new SceneEvent("REFRESH"));
            } 


            /* private function topnRefreshDatas(e:TimerEvent):void
            {
                if (topnRefreshNewAddedTimes && !refreshNewAddedTimes)
                {
                    log.debug("topn数据刷新！！！！");
                    msgDispatcher(new SceneEvent(SceneEvent.CMS_SCENE_DEGRADATIONTOPN_REFRESHTOPN));

                }

            } */

            [MessageHandler(selector = "CMS_SCENE_TOPNDATA_TOPNDATALENGTH")]
            public function topnDataLengthThantoTwo(e:SceneEvent):void
            {
                topnRefreshNewAddedTimes = false;

                if (topnDataRefreshTimer)
                {
                    topnDataRefreshTimer.stop();
                }
            }


            [MessageHandler(selector = "SHOW_PERFORMANCEINDEX")]
            public function showPerformanceIndex(e:SceneEvent):void
            {
                performanceIndex.visible = true;
                performanceIndex.includeInLayout = true;

                performanceIndex.title = e.param.toolTip.toString();

                performanceIndex.init();

                if (e.param.hasOwnProperty("flag") && e.param["flag"] == "1")
                {

                    performanceIndex.type = "1";
//					performanceIndex.initAccordin("1");
                }
                else
                {
                    performanceIndex.type = "0";
//					performanceIndex.initAccordin("0");
                }
            }

            [MessageHandler(selector = "HIDE_PERFORMANCEINDEX")]
            public function hidePerformanceIndex(e:SceneEvent):void
            {
                performanceIndex.visible = false;
                performanceIndex.includeInLayout = false;
            }

            [MessageHandler(selector = "PANEL_CLOSE")]
            public function closePanel(e:SceneEvent):void
            {
                var ckbx:CheckBoxComp;

                //普通模式的关闭则 联动处理窗口配置面板
                if (e.param['pid'].toString().indexOf('panelShowGroup_') >= 0)
                {
                    for (var index:int = 0; index < panelCfgGroup.numElements; index++)
                    {
                        ckbx = panelCfgGroup.getElementAt(index) as CheckBoxComp;

                        if (e.panelName == ckbx.label)
                        {
                            ckbx.selected = false;
                            break;
                        }
                    }
                }
                else //否则将问题处理模式的窗口 恢复。
                {
                    for (var idx:int = 0; idx < pbh.numElements; idx++)
                    {
                        var tb:ToggleButton = pbh.getElementAt(idx) as ToggleButton;

                        if (e.panelName == tb.label)
                        {
                            var panelName:String = tb.label;
                            var order:String = e.param['index'];
                            var location:String = tb.name;
                            //从GIS布局中删除
                            gisViewGroup.removeElement(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]);
                            //添加到左右布局容器中
                            this['panelShowGroup_' + location].addElementAt(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName], (this['panelShowGroup_' + location] as VGroup).numChildren > (int(order) - 1) ? (int(order) - 1) : (this['panelShowGroup_' + location] as VGroup).numChildren);
                            (sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as Window).dragable = false;
//							(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as Window).percentHeight = 100;
//							(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as Window).percentWidth = 100;
                            log.info("问题处理模式的窗口 恢复:panelName:" + tb.label + "  order:" + order + "  location:" + tb.name);
                            tb.selected = false;
                            break;
                        }
                    }
                }
            }
			
			
			/******************************************************************************************/		
            private var idMsgCache:Object = {};

            [MessageHandler(selector = "DEAL_SCENE_CFG")]
            public function dealPanelCfg(e:SceneEvent):void
            {
                log.info("处理场景面板！");

                panelCfgGroup.removeAllElements();
                pbh.removeAllElements();
                gisViewGroup.removeAllElements();
                gisViewGroup.visible = true;
                gisViewGroup.percentWidth = 100;
                gisViewGroup.includeInLayout = true;

                compareCfgPanel();

                //根据面板配置信息 生成面板组件。
                for each (var panel:Object in sceneViewPM.sceneConfigDM.panelList)
                {
                    var cb:CheckBoxComp = new CheckBoxComp();
                    cb.param = panel;
                    cb.label = panel['panelName'];
                    cb.id = panel['showindex'];

                    if (panel["isShow"] == "1")
                        cb.selected = true;
                    else
                        cb.selected = false;
                    cb.name = panel['location'];
                    cb.addEventListener(MouseEvent.CLICK, showHideComp);

                    panelCfgGroup.addElement(cb);

                    //生成问题处理模式工具栏
                    if (cb.selected)
                    {
                        var tb:ToggleButton = new ToggleButton();
                        tb.label = panel['panelName'];
                        tb.name = panel['location'];
                        tb.addEventListener(MouseEvent.CLICK, togglebutton1_clickHandler);
                        pbh.addElement(tb);
                    }

                    var comp:UIComponent;

                    if (sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                        comp = sceneViewPM.sceneConfigDM.panelIdUIMap[panel['panelName']];

                    var h:Number = 200;

                    switch (panel['panelName'])
                    {
                        case "场景介绍":
                        case "区域介绍":
                            h = 250;
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new SceneIntro();
                            (comp as SceneIntro).location = panel['location'];
                            break;
                        case "场景赛事":
                        case "区域赛事":
                            h = 250;
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new RaceInfoComp();
                            (comp as RaceInfoComp).location = panel['location'];
                            break;

                        case "场景重点关注网元":
                        case "区域重点关注网元":
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new ResMatrixComp();
                            (comp as ResMatrixComp).location = panel['location'];
                            break;

                        case "场景资源矩阵":
                        case "区域资源矩阵":
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new EmgyResource();
                            (comp as EmgyResource).location = panel['location'];
                            break;

                        case "场景基站退服":
                        case "区域基站退服":
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new QuitService();
                            (comp as QuitService).location = panel['location'];
                            break;

                        case "场景工单统计":
                        case "区域工单统计":
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new SheetStat();
                            (comp as SheetStat).location = panel['location'];
                            break;

                        case "场景最差小区统计":
                        case "区域最差小区统计":
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new WorstCellPanel();
                            (comp as WorstCellPanel).location = panel['location'];
                            break;

                        case "场景指标概况":
                        case "区域指标概况":
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new KPISituation();
                            (comp as KPISituation).location = panel['location'];
                            h = 300
                            break;

                        case "场景指标TOPN":
                        case "区域指标TOPN":
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new DegradationTOPN();
                            (comp as DegradationTOPN).location = panel['location'];
                            break;

                        case "场景漫游数据":
                        case "区域漫游数据":
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new Roam();
                            (comp as Roam).location = panel['location'];
                            break;

                        case "场景天气预报":
                        case "区域天气预报":
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new WeatherSituation();
                            (comp as WeatherSituation).location = panel['location'];
                            break;

                        case "场景火车时刻表":
                        case "区域火车时刻表":
                            if (!sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                                comp = new TrainTimeTable();
                            (comp as TrainTimeTable).location = panel['location'];
                            break;
                    }

                    if (comp)
                    {
                        if (panel["isShow"] == "0")
                        {
                            comp.visible = false;
                            comp.includeInLayout = false;
                        }

                        comp.name = panel['panelName'];
                    }


                    if (sceneViewPM.sceneConfigDM.panelIdUIMap.hasOwnProperty(panel['panelName']))
                        continue;

                    if (comp)
                    {
                        comp.width = this['panelShowGroup_' + panel['location']].width;
                        comp.minHeight = h;
//                        comp.percentHeight = 100;

                        this['panelShowGroup_' + panel['location']].addElement(comp);
                    }

                    log.info("添加面板到视图：" + panel['panelName'] + "_" + panel['showindex'] + "_" + h);
                }


 //TODO
                //加载面板数据
//                setTimeout(refreshDatas1, 2000);
				refreshDatas1();
/*
                //加载导航tree
                setTimeout(naviTree.loadData, 3000);

                //加载导航缩略图
                setTimeout(stc.loadData, 4500);
 */
                //显示组件说明的方法
                if (user.isNew == "true")
                    showCompInstruction1();
				
//				refreshDatas1();
            }

            private function compareCfgPanel():void
            {
                if (user.level != "2")
                    sceneViewPM.sceneConfigDM.panelIdUIMap = {"场景介绍": sceneIntro, "场景资源矩阵": emgyResource, "场景重点关注网元": resMatrixComp, "场景指标概况": kPISituation, "场景指标TOPN": degradationTOPN, "场景基站退服": quitService};
                else
                    sceneViewPM.sceneConfigDM.panelIdUIMap = {"区域介绍": sceneIntro, "区域资源矩阵": emgyResource, "区域重点关注网元": resMatrixComp, "区域指标概况": kPISituation, "区域指标TOPN": degradationTOPN, "区域基站退服": quitService};

                idMsgCache['sceneIntro'] = "场景介绍，提供场景介绍、场景概况汇总的功能；左上角显示监控区域的缩略图；窗口支持 最大化、还原、关闭；";
                idMsgCache['raceInfoComp'] = "场景赛事，提供重大活动场景中的赛事列表等数据";
                idMsgCache['emgyResource'] = "资源矩阵包括设备资源、应急资源、应急预案；窗口支持最大化、还原、关闭；";
                idMsgCache['resMatrixComp'] = "重点关注网元矩阵方式按网元类型呈现全省所有节假日保障区域上存在告警的网元，单元格渲染网元上最高级别告警颜色；";
                idMsgCache['trainTimeTable'] = "火车时刻表；";
                idMsgCache['weatherSituation'] = "场景天气预报，呈现了全省所有存在监控区域的地市天气预报；显示各地市的天气状况图标、温度；";
                idMsgCache['kPISituation'] = "场景指标概况包括客户感知指标、业务性能指标、设备性能指标，统计呈现该场景全省所有节假日保障区域中的指标值；窗口支持最大化、还原、关闭；(注：新建场景需要等5分钟才有数据)";
                idMsgCache['degradationTOPN'] = "场景指标TOP N窗口主要呈现全省所有节假日保障区域性能指标质降的Top20网元，包括TopN柱状图、TopN矩阵两种方式呈现；窗口支持最大化、还原、关闭；";
                idMsgCache['quitService'] = "场景基站退服，包括退服统计和地市查询；窗口支持最大化、还原、关闭；";
                idMsgCache['roam'] = "场景漫游数据，呈现省际、省内、国际漫游数据（漫入、漫出）；";
                idMsgCache['sheetStat'] = "场景工单统计数据，分为地市维度和网元类型维度";
                idMsgCache['complaintSheetStat'] = "场景投诉工单统计数据，分为地市维度和网元类型维度";
                idMsgCache['worstCell'] = "场景最差小区的指标信息";

                for (var panelName:String in sceneViewPM.sceneConfigDM.panelIdUIMap)
                {
                    var isCfg:Boolean = false;

                    for each (var p:Object in sceneViewPM.sceneConfigDM.panelList)
                    {
                        if (p['panelName'] == panelName)
                        {
                            isCfg = true;
                            break;
                        }
                    }

                    if (!isCfg)
                    {
                        try
                        {
                            ((sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as UIComponent).parent as Group).removeElement(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]);
                        }
                        catch (e:Error)
                        {
                        }
                    }
                }

                //设置面板在当前的顺序
                var nums:int = panelShowGroup_1.numElements;

                for (var i:int = 0; i < nums; i++)
                {
                    panelShowGroup_1.getElementAt(i)['index'] = i + 1;
                    panelShowGroup_1.getElementAt(i)['location'] = "1";
                }

                nums = panelShowGroup_2.numElements;

                for (var j:int = 0; j < nums; j++)
                {
                    panelShowGroup_2.getElementAt(j)['index'] = j + 1;
                    panelShowGroup_2.getElementAt(j)['location'] = "2";
                }
            }
			
			
			


            private var maskIntroTip:MaskInstructionTip;

            private var maskIndex:int = 0;


            private var maskInfoType:String = "left"; //left right  gis  alarm;

            private var countPerScreen:int = 0;

            [MessageHandler(selector = "CMS_SCENE_MASK_HIDE")]
            public function hiddenMaskInfo(evt:SceneEvent):void
            {
//				if (_mask != null)
//					removeElement(_mask);
                if (maskIntroTip != null)
                    removeElement(maskIntroTip);

                showAllWindow();
            }

            private function showCompInstruction1():void
            {
                var win:Window = panelShowGroup_1.getElementAt(maskIndex++) as Window;
//				_mask = new SimpleMask();
//				_mask.unMaskObj = win;
//				addElement(_mask);

                maskIntroTip = new MaskInstructionTip();
                addElement(maskIntroTip);

                maskIntroTip.x = win.x + maskIntroTip.width + 20;
                maskIntroTip.y = win.y + 40;
                maskIntroTip.direction("left");
                maskIntroTip.showTitle("场景简介");
                maskIntroTip.showMsg(idMsgCache[win.id]);
            }

				
            [MessageHandler(selector = "CMS_SCENE_MASK_NEXT")]
            public function continueNextMaskInfo1(evt:SceneEvent):void
            {
                switch (maskInfoType)
                {
                    case "left":
                        leftMaskInfo();
                        break;
                    case "right":
                        rightMaskInfo();
                        break;
                    case "gis":
                        step5();
                        break;
                    case "alarm":
                        step6();
                        break;
                    default:
                        hiddenMaskInfo(null);
                        break;
                }
            }

            private function leftMaskInfo():void
            {
                log.info("left");

                if (countPerScreen <= maskIndex)
                {
                    if (countPerScreen != 0)
                    {
                        //隐藏窗口
                        hiddenWindow(panelShowGroup_1, countPerScreen);
                    }
                    countPerScreen = countScreen(panelShowGroup_1, countPerScreen);
                }


                setTimeout(function():void
                {
                    var win:Window = panelShowGroup_1.getElementAt(maskIndex++) as Window;
//						_mask.unMaskObj = win;

                    log.info("countPerScreen:{0};win:{1};maskIndex:{2}", countPerScreen, win.title, maskIndex);

                    maskIntroTip.x = win.x + maskIntroTip.width - 100;
                    maskIntroTip.y = win.y + 40;
                    maskIntroTip.direction("left");
                    maskIntroTip.showTitle(win.title);
                    maskIntroTip.showMsg(idMsgCache[win.id]);

                    if (maskIndex == panelShowGroup_1.numElements)
                    {
                        maskInfoType = "right";
                        countPerScreen = 0;
                    }
                }, 1000);

            }

            private function rightMaskInfo():void
            {
                log.info("right");

                if (countPerScreen <= maskIndex - panelShowGroup_1.numElements)
                {
                    if (countPerScreen != 0)
                    {
                        //隐藏窗口
                        hiddenWindow(panelShowGroup_2, countPerScreen);
                    }
                    countPerScreen = countScreen(panelShowGroup_2, countPerScreen);
                }

                var tw:Number = this.width;

                setTimeout(function():void
                {
                    var win:Window = panelShowGroup_2.getElementAt(maskIndex - panelShowGroup_1.numElements) as Window;
//						_mask.unMaskObj = win;

                    log.info("countPerScreen:{0};win:{1};maskIndex:{2}", countPerScreen, win.title, maskIndex);
                    log.info("this.width:{0}; win.width:{1}; maskIntroTip.width:{2}", tw, win.width, maskIntroTip.width);

                    maskIntroTip.x = tw - win.width - maskIntroTip.width - 200;
                    maskIntroTip.y = win.y + 20;
                    maskIntroTip.direction("right");
                    maskIntroTip.showTitle(win.title);
                    maskIntroTip.showMsg(idMsgCache[win.id]);
                    maskIndex++;

                    if (maskIndex == panelShowGroup_1.numElements + panelShowGroup_2.numElements)
                        maskInfoType = "gis";

                }, 1000);
            }
			
            private function hiddenWindow(psg:VGroup, hiddenCount:int):void
            {
                log.info("隐藏窗口psg：{0}，hiddenCount:{1};", psg.id, hiddenCount);

                for (var i:int = 0; i < hiddenCount; i++)
                {
                    Window(psg.getElementAt(i)).visible = false;
                    Window(psg.getElementAt(i)).includeInLayout = false;
                }
            }

            private function showAllWindow():void
            {
                for (var i:int = 0; i < panelShowGroup_1.numElements; i++)
                {
                    Window(panelShowGroup_1.getElementAt(i)).visible = true;
                    Window(panelShowGroup_1.getElementAt(i)).includeInLayout = true;
                }

                for (i = 0; i < panelShowGroup_2.numElements; i++)
                {
                    Window(panelShowGroup_2.getElementAt(i)).visible = true;
                    Window(panelShowGroup_2.getElementAt(i)).includeInLayout = true;
                }
            }

            //计算一屏幕完全显示到第几个窗口
            private function countScreen(psg:VGroup, index:int = 0):int
            {
                var screenHeight:Number = this.height;
                var win:Window;

                for (index; index < psg.numElements; index++)
                {
                    win = psg.getElementAt(index) as Window;

                    if (win.visible == true)
                    {
                        if (screenHeight < win.height)
                        {
                            return index;
                        }
                        else
                        {
                            screenHeight = screenHeight - win.height - psg.gap;
                        }
                    }
                }
                return index;
            }

            private function step5():void
            {
                var win:Window = this.gisWindow;

//				_mask.unMaskObj = win;

                maskIntroTip.x = 20;
                maskIntroTip.y = 150;
                maskIntroTip.direction("right");
                maskIntroTip.showTitle("GIS窗口");
                maskIntroTip.showMsg("GIS窗口分成矢量图监控和GIS地图监控两种模式,矢量图可以根据性能劣化级别渲染,GIS地图可以呈现区域缩略图、网元劣化分布；");
                maskInfoType = "alarm";
            }

            private function step6():void
            {
                resizeWindow();
                setTimeout(function():void
                {
                    var win:VGroup = this.alarmVgroup;

//						_mask.unMaskObj = win;

                    maskIntroTip.x = (this.width - maskIntroTip.width) / 2;
                    maskIntroTip.y = this.height - maskIntroTip.height - 150;
                    maskIntroTip.direction("down");
                    maskIntroTip.showTitle("告警流水窗口");
                    maskIntroTip.showMsg("告警流水窗口展示当前场景、区域的告警情况，支持和上面的劣化网元,GIS定位的网元联动以方便查看单个网元的告警。");

                    maskInfoType = "end";
                }, 2000);

            }
			
			/******************************************************************************************/		

            [MessageHandler(selector = "PANEL_MAXIMIZE")]
            public function maximizePanel(e:SceneEvent):void
            {
                log.info("面板：" + e.panelName + "最大化、恢复处理！" + e.panelMaxFlag);
                log.debug(e);

                if (!e.panelMaxFlag)
                {
                    showHideComp(null, e, false);

                    PopUpManager.addPopUp(sceneViewPM.sceneConfigDM.panelIdUIMap[e.panelName], topGroup);
                    (sceneViewPM.sceneConfigDM.panelIdUIMap[e.panelName] as UIComponent).width = parentApplication.width;
                    (sceneViewPM.sceneConfigDM.panelIdUIMap[e.panelName] as UIComponent).height = parentApplication.height;
                    PopUpManager.centerPopUp(sceneViewPM.sceneConfigDM.panelIdUIMap[e.panelName]);
                }
                else
                {
                    showHideComp(null, e, true);
                }
            }

			//TODO
//            [MessageHandler(selector = "CHANGE_VIEW")]
            public function changeView(e:SceneEvent):void
            {
                log.info("切换视图 ------------------------------>" + user.sceneId + "_" + user.sceneTypeId + "_" + user.level);
				if(gisViewGroup.visible){
					gisViewGroup.visible = false;
//					gisViewGroup.includeInLayout = false;
				}
				if(100!=gisViewGroup.percentWidth){
					gisViewGroup.percentWidth = 100;
				}
                thirdMapBtn.visible = user.sceneId == "100306";
				
				if("2"==user.level){
					user.isGisFinished = false;
				}
                //加载面板配置信息等。
                sceneViewPM.initViewPanel();
            }

			
            private function showHideComp(me:MouseEvent = null, se:SceneEvent = null, flag:Boolean = false):void
            {
                var panelName:String;
                var location:String;
                var index:String;

                if (me)
                {
                    var ckbox:CheckBox = (me.currentTarget as CheckBox);
                    panelName = ckbox.label;
                    location = ckbox.name;
                    index = ckbox.id;
                    flag = ckbox.selected;
                }
                else if (se)
                {
                    panelName = se.panelName;
                    location = se.panellocation;
                    index = se.panelIndex;
                }
                else
                {
                    return;
                }

                if (me)
                {
                    (sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as UIComponent).visible = flag;
                    (sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as UIComponent).includeInLayout = flag;
                }
                else
                {
                    if (this.viewMode == "1")
                    {
                        if (flag)
                            this['panelShowGroup_' + location].addElementAt(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName], (this['panelShowGroup_' + location] as VGroup).numChildren > (int(index) - 1) ? (int(index) - 1) : (this['panelShowGroup_' + location] as VGroup).numChildren);
                        else
                        {
                            if (sceneViewPM.sceneConfigDM.panelIdUIMap[panelName].hasOwnProperty('closeWindow'))
                                sceneViewPM.sceneConfigDM.panelIdUIMap[panelName].closeWindow();
                            else
                                this['panelShowGroup_' + location].removeElement(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]);
                        }
                    }
                    else if (this.viewMode == "2")
                    {
                        if (flag)
                            addWin2GisGroup(gisViewGroup, sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as Window);
//							gisViewGroup.addElement(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]);
//							gisViewGroup.addElementAt(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName],
//								gisViewGroup.numChildren > (int(index) - 1) ?
//								(int(index) - 1) :
//								gisViewGroup.numChildren);
                        else
                        {
                            if (sceneViewPM.sceneConfigDM.panelIdUIMap[panelName].hasOwnProperty('closeWindow'))
                                sceneViewPM.sceneConfigDM.panelIdUIMap[panelName].closeWindow();
                            else
                                gisViewGroup.removeElement(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]);
                        }
                    }
                }
            }

            private function resizeWindow(type:int = 0):void
            {
                if (type == 2)
                {
                    if (picImg.name == "left")
                    {
                        showPicGroup(type);
                    }
                    else if (picImg.name == "right")
                    {
                        hidePicGroup(type);
                    }
                }
                else if (type == 3)
                {
                    if (chartImg.name == "right")
                    {
                        showPicGroup(type);
                    }
                    else if (chartImg.name == "left")
                    {
                        hidePicGroup(type);
                    }
                }
                else
                {
                    if (img.name == "down")
                    {
                        hideAlarm();
                    }
                    else if (img.name == "up")
                    {
                        showAlarm();

                        if (!alarmInitFlag)
                        {
                            alarmInitFlag = true;
                            alarmComp.initAlarm();
                        }
                        else
                        {
                            alarmComp.reloadAlarm();
                        }
                    }
                }
            }

            private var picGroupWidth:Number;
            private var chartGroupWidth:Number;

            private function hidePicGroup(type:int, dura:Number = 100):void
            {
                if (type == 2)
                {
                    stc.showEle(false);
                    chartGroup.visible = false;
                    chartGroup.includeInLayout = false;
                    picGroupWidth = picGroup.width;
                    resize.target = picGroup;
                }
                else if (type == 3)
                {
                    resize.target = chartOuterGroup;
                    chartGroupWidth = chartOuterGroup.width;
                    resize.target = chartOuterGroup;
                }

                resize.duration = dura;
                resize.widthTo = 15;
                resize.heightTo = Number.NaN;
                resize.play();
            }

            private function showPicGroup(type:int, dura:Number = 100):void
            {
                if (type == 2)
                {
                    stc.visible = true;
                    stc.includeInLayout = true;
                    resize.target = picGroup;
                }
                else if (type == 3)
                {
                    resize.target = chartOuterGroup;
                }

                resize.widthTo = gisGroup.width;
                resize.duration = dura;
                resize.heightTo = Number.NaN;
                resize.play();
            }

            protected function resize_effectEndHandler(event:EffectEvent):void
            {
                if (resize.target == picGroup)
                {
                    if (picGroup.width > 30)
                    {
                        chartOuterGroup.visible = false;
//                        chartOuterGroup.includeInLayout = false;

                        stc.showEle(true);
                        picImg.name = "right";
                        picImg.source = _right_gray;
                    }
                    else
                    {
                        chartOuterGroup.visible = true;
//                        chartOuterGroup.includeInLayout = true;

                        stc.visible = false;
                        stc.includeInLayout = false;
                        picImg.name = "left";
                        picImg.source = _left_gray;
                    }
                }
                else if (resize.target == chartOuterGroup)
                {
                    if (chartOuterGroup.width > 30)
                    {
                        picGroup.visible = false;
                        picGroup.includeInLayout = false;

                        chartGroup.visible = true;
                        chartGroup.includeInLayout = true;
                        chartImg.name = "left";
                        chartImg.source = _left_gray;

                        quitChart.percentWidth = 100;
                        kpiChart.percentWidth = 100;
                    }
                    else
                    {
                        picGroup.visible = true;
                        picGroup.includeInLayout = true;

                        chartGroup.visible = false;
                        chartGroup.includeInLayout = false;
                        chartImg.name = "right";
                        chartImg.source = _right_gray;
                    }
                }
            }

            private function hideAlarm(dura:Number = 100):void
            {
                this.alarmComp.stopAlarm();

                this.msgDispatcher(new SceneEvent(SceneEvent.RESUME_NEWS));

//                resize.target = alarmVgroup;
//                resize.duration = dura;
//                resize.heightTo = 25;
//                resize.widthTo = Number.NaN;
//                resize.play();

                alarmComp.visible = false;
                alarmComp.includeInLayout = false;

                alarmVgroup.height = 13;

                img.source = _up_gray;
                img.name = "up";
            }

            private function showAlarm(dura:Number = 100):void
            {
                this.msgDispatcher(new SceneEvent(SceneEvent.PAUSE_NEWS));

//                resize.target = alarmVgroup;
//
//                resize.duration = dura;
//                resize.heightTo = 247;
//                resize.widthTo = Number.NaN;
//                resize.play();

                alarmVgroup.height = 247;

                alarmComp.visible = true;
                alarmComp.includeInLayout = true;

                img.source = _down_gray;
                img.name = "down";
            }

            protected function changeImg(type:Object):void
            {
                img.source = getImg(type);
            }

            private function getImg(type:Object):Object
            {
                if (img.name == "down")
                {
                    if (type == 1)
                        return _down_blue;
                    else
                        return _down_gray;
                }
                else if (img.name == "up")
                {
                    if (type == 1)
                        return _up_blue;
                    else
                        return _up_gray;
                }

                return _down_gray;
            }

            private function alarmWindow_resizeHandler(event:ResizeEvent):void
            {
                if (alarmVgroup.height >= 137)
                {
                    img.source = _down_gray;
                    img.name = "down";
                }
                else if (alarmVgroup.height <= 35)
                {
                    img.source = _up_gray;
                    img.name = "up";
                }
            }

            protected function leftDown_clickHandler(event:MouseEvent = null):void
            {
                if (scroller_1.viewport.getVerticalScrollPositionDelta(NavigationUnit.END) > scroller_1.viewport.verticalScrollPosition)
                {
                    scroller_1.viewport.verticalScrollPosition = scroller_1.viewport.getVerticalScrollPositionDelta(NavigationUnit.END);
                    leftImg.source = up;
                }
                else
                {
                    scroller_1.viewport.verticalScrollPosition = scroller_1.viewport.getVerticalScrollPositionDelta(NavigationUnit.HOME);
                    leftImg.source = down;
                }
            }

            protected function rightDown_clickHandler(event:MouseEvent = null):void
            {
                if (scroller_2.viewport.getVerticalScrollPositionDelta(NavigationUnit.END) > scroller_2.viewport.verticalScrollPosition)
                {
                    scroller_2.viewport.verticalScrollPosition = scroller_2.viewport.getVerticalScrollPositionDelta(NavigationUnit.END);
                    rightImg.source = up;
                }
                else
                {
                    scroller_2.viewport.verticalScrollPosition = scroller_2.viewport.getVerticalScrollPositionDelta(NavigationUnit.HOME);
                    rightImg.source = down;
                }
            }

            [MessageHandler(selector = "EQU_ALARMINFO")]
            [MessageHandler(selector = "BADMO_CLICK")]
            public function showAlarmFlow(e:ResMatrixEvent):void
            {
                log.info("劣化网元 点击处理：处理流水窗口！");

                if (!alarmInitFlag)
                {
                    alarmInitFlag = true;
                    var rule:String;

                    if (e.data.moTypeName == "机房")
                    {
                        rule = 'neroom="' + e.data.neroom + '"';
                    }
                    else if (e.data.moTypeName == "电路")
                    {
                        rule = 'circ_name="' + e.data.circ_name + '"';
                    }
                    else
                        rule = 'alarmneid="' + e.data.moId + '"';

                    alarmComp.initAlarm(rule);

                    if (alarmVgroup.height <= 35)
                    {
                        log.info("劣化网元 点击处理：初始化、展开流水窗口！");
                        showAlarm();
                    }
                }
                else
                {
                    if (alarmVgroup.height <= 35)
                    {
                        log.info("劣化网元 点击处理：初始化、展开流水窗口！");
                        showAlarm();
                    }

                    log.info("劣化网元 点击处理：过滤流水！");
                    alarmComp.filterAlarm(e);
                }
            }

            private var kpiEvent:KPISituationEvent;

            [MessageHandler(selector = "SHOW_KPI_AREA_DATA")]
            public function showQuitChartByAreaKpi(e:KPISituationEvent = null):void
            {
                thresholdCB.visible = true;

                log.info("### 处理指标区域维度图表！");

                if (e == null && kpiEvent != null)
                    e = kpiEvent;

                var colorArray:Array = new Array;
                var rendingColorArray:Array = new Array;
                var twoKpi:ArrayCollection = e.areaKpiData;

                var count2:int = twoKpi.getItemAt(0).len;
                var i:int;

                for each (var obj:Object in e.areaKpiData)
                {
                    colorArray.push(obj.color);
                }

                for each (var obj1:Object in e.areaKpiData)
                {
                    rendingColorArray.push(obj1.rendingColor);
                }

                for (var n:int = 1; n <= count2; n++)
                {
                    for each (obj1 in e.areaKpiData)
                    {
                        rendingColorArray.push(obj1["color" + n]);
                    }
                }
                log.debug("rendingColor info...");

                quitChart.visible = true;
                navtab1.label = "二级指标";

                quitChart.width = kpiChartWin.width - 8;

                var p1:SerialParam = new SerialParam('kpiValue', e.areaKpiData.getItemAt(0)['kpiName']);
                p1.chartType = PrettyChartType.CHART_TYPE_COLUMN;
                p1.yAxis = 'left';
                p1.fillColorArray = colorArray;

                var serArr:ArrayCollection = new ArrayCollection;
                serArr.addItem(p1);

                if (thresholdCB.selected)
                    for (i = 0; i < count2; i++)
                    {
                        var count1:int = i + 1;
                        var aa:String = "thresholdValue" + count1;
                        var p:SerialParam = new SerialParam(aa, '门限');
                        p.chartType = PrettyChartType.CHART_TYPE_LINE;
                        p.yAxis = 'left';
                        p.lineStrokeColor = uint(e.areaKpiData.getItemAt(0)["color" + count1]);
                        p.showDataDot = false;
                        serArr.addItem(p);
                    }

                log.info("serarra=:");
                var chartParam:ChartParam = new ChartParam();
                chartParam.xAxisProperty = "areaName";
                chartParam.showLegend = false;
                chartParam.use3DColumn = e.areaKpiData.length == 1;
                chartParam.useShowDataEffect = false;
                chartParam.padding = 5;

                quitChart.chartParam = chartParam;

                quitChart.percentHeight = 100;
                quitChart.canDropLabels = true;
                quitChart.chartParam.itemClickEnable = true;
                quitChart.addEventListener(PrettyChartEvent._DATA_CLICK, dealClickLowerLevel);
                quitChart.series = serArr;
                quitChart.chartData(e.areaKpiData, true);

                kpiEvent = e;
                log.info("二级指标处理完成 end");
            }

            [MessageHandler(selector = "SHOW_QUIT_CHART")]
            public function showQuitChart(e:QuitServiceEvent):void
            {
                log.info("处理退服统计图表！" + e.quitData.length);

                navtab1.label = "退服统计";
                quitChart.visible = true;

                quitChart.width = kpiChartWin.width - 8;

                var p1:SerialParam = new SerialParam("2G退服基站数", "2G退服");
                p1.chartType = PrettyChartType.CHART_TYPE_COLUMN;
                p1.yAxis = PrettyChartType.YAXIS_LEFT;
                var p2:SerialParam = new SerialParam("TD退服基站数", "TD退服");
                p2.chartType = PrettyChartType.CHART_TYPE_COLUMN;
                p2.yAxis = PrettyChartType.YAXIS_LEFT;
                var p3:SerialParam = new SerialParam("eNodeB退服基站数", "LTE退服");
                p3.chartType = PrettyChartType.CHART_TYPE_COLUMN;
                p3.yAxis = PrettyChartType.YAXIS_LEFT;

                var chartParam:ChartParam = new ChartParam();
                chartParam.xAxisProperty = "属地";
                chartParam.showLegend = false;
                chartParam.useShowDataEffect = false;

                if (e.quitData.length > 1)
                {
                    chartParam.use3DColumn = false;
                }

                chartParam.padding = 5;

                quitChart.chartParam = chartParam;

                quitChart.series = new ArrayCollection([p1, p2, p3]);

                quitChart.percentHeight = 100;

                if (user.initSceneId == "1011")
                    quitChart.series = new ArrayCollection([p3]);

                log.info("开始渲染退服统计图表！");
                var dataArrayC:ArrayCollection = new ArrayCollection();

                for each (var obj:Object in e.quitData)
                {
                    var data = {};

                    if (obj.hasOwnProperty("2G退服基站数"))
                    {
                        data["2G退服基站数"] = obj["2G退服基站数"];
                    }

                    if (obj.hasOwnProperty("TD退服基站数"))
                    {
                        data["TD退服基站数"] = obj["TD退服基站数"];
                    }

                    if (obj.hasOwnProperty("eNodeB退服基站数"))
                    {
                        data["eNodeB退服基站数"] = obj["eNodeB退服基站数"];
                    }
                    data["属地"] = obj["属地"];
                    dataArrayC.addItem(data);
                }
                log.debug(dataArrayC);
                quitChart.chartData(dataArrayC, true);
            }

            //GIS窗口最大化和恢复
            protected function gisWindow_resize(type:int):void
            {
                //最大化
                if (type == 1)
                {
                    this.scroller_2.visible = false;
                    this.scroller_2.includeInLayout = false;

                    this.scroller_1.visible = false;
                    this.scroller_1.includeInLayout = false;

                    leftImg.visible = false;
                    rightImg.visible = false;
                    gisWindow.percentWidth = 100;
                    gisWindow.percentHeight = 100;

                    topobutton.visible = false;
                    topobutton.includeInLayout = false;

                    //进入问题处理模式。
                    viewMode = "2";
//                    jinquLineGroup.visible = true;
//                    jinquLineGroup.includeInLayout = true;

//                    drawPicLines();
                }
                else if (type == 2)
                {
                    gisWindow.percentWidth = 55;
                    gisWindow.percentHeight = 100;
                    stc.percentWidth = 100;

                    this.scroller_1.visible = true;
                    this.scroller_1.includeInLayout = true;

                    this.scroller_2.visible = true;
                    this.scroller_2.includeInLayout = true;

                    leftImg.visible = true;
                    rightImg.visible = true;

                    if (user.initSceneId == "1011")
                    {
                        topobutton.visible = true;
                        topobutton.includeInLayout = true;
                    }

                    //返回默认模式。
                    viewMode = "1";
                    //返回问题处理模式中打开的面板到默认模式
                    resumePanels();
//
//                    jinquLineGroup.visible = false;
//                    jinquLineGroup.includeInLayout = false;
                }

                if (picGroup.width > 50)
                    resizeWindow(2);

                if (chartOuterGroup.width > 50)
                    resizeWindow(3);

                if (user.initSceneId == "1452" && user.level == "1")
                {
                    setTimeout(function():void
                    {
                        gisComp.viewRefresh();
                    }, 500);
                }
            }

//
//            private var origin:Point = new Point(0, 0);
//            private var destination:Point = new Point(100, 100);
//            //曲线弯曲程度
//            private var curvePercent:Number = 0;
//            //弯曲锚点在整条线的什么位置
//            private var anchorRatio:int = 2;
//            private var lineThickness:Number = 2;
//            private var headWidth:Number = 10;
//            private var headLength:Number = 15;
//            private var shaftPosition:Number = .2;
//            private var edgeControlPosition:Number = .5;
//            private var lineColor:Number = 0x00FF00;
//            private var lineAlpha:Number = 1;
//
//            private function drawPicLines():void
//            {
//                jinquLineGroup.graphics.clear();
//
//                origin = new Point(289, 197);
//                destination = new Point(691, 378);
//                curvePercent = 0.5;
//                // 瘦西湖
//                drawArrow();
//
//                origin = new Point(289, 267);
//                destination = new Point(698, 414);
//                curvePercent = 0.4;
//                // 镇江金山
//                drawArrow();
//
//                origin = new Point(289, 358);
//                destination = new Point(627, 418);
//                curvePercent = 0.3;
//                // 中山陵
//                drawArrow();
//
//                origin = new Point(289, 434);
//                destination = new Point(600, 440);
//                curvePercent = 0.1;
//                // 夫子庙
//                drawArrow();
//
//                origin = new Point(289, 509);
//                destination = new Point(706, 514);
//                curvePercent = -0.1;
//                // 天目湖
//                drawArrow();
//
//                origin = new Point(289, 590);
//                destination = new Point(701, 536);
//                curvePercent = -0.3;
//                // 南山竹海
//                drawArrow();
//
//                origin = new Point(857, 97);
//                destination = new Point(751, 367);
//                curvePercent = 0.3;
//                // 溱湖
//                drawArrow();
//
//                origin = new Point(857, 188);
//                destination = new Point(833, 479);
//                curvePercent = 0.5;
//                // 虞山尚湖
//                drawArrow();
//
//                origin = new Point(894, 327);
//                destination = new Point(802, 491);
//                curvePercent = -0.3;
//                // 留园西园山塘街
//                drawArrow();
//
//                origin = new Point(1003, 395);
//                destination = new Point(827, 509);
//                curvePercent = 0.3;
//                // 沙家浜
//                drawArrow();
//
//                origin = new Point(1023, 424);
//                destination = new Point(821, 492);
//                curvePercent = 0.3;
//                // 虎丘
//                drawArrow();
//
//                origin = new Point(1025, 512);
//                destination = new Point(838, 498);
//                curvePercent = 0.3;
//                // 
//                drawArrow();
//
//                origin = new Point(1022, 580);
//                destination = new Point(848, 491);
//                curvePercent = 0.3;
//                // 瘦西湖
//                drawArrow();
//            }
//
//            private function drawArrow():void
//            {
//                var curveAnchor:Point = new Point(
//                    (origin.x + destination.x) / anchorRatio,
//                    (origin.y + destination.y) / anchorRatio);
//
//                if (origin.x > destination.x)
//                {
//                    curveAnchor.x -= (destination.y - origin.y) * curvePercent;
//                    curveAnchor.y += (destination.x - origin.x) * curvePercent;
//                }
//                else
//                {
//                    curveAnchor.x += (destination.y - origin.y) * curvePercent;
//                    curveAnchor.y -= (destination.x - origin.x) * curvePercent;
//                }
//
//                jinquLineGroup.graphics.beginFill(lineColor, lineAlpha);
//                GraphicsUtil.drawArrow(jinquLineGroup.graphics, origin, destination, curveAnchor,
//                                       {
//                                           shaftThickness: lineThickness,
//                                           headWidth: headWidth,
//                                           headLength: headLength,
//                                           shaftPosition: shaftPosition,
//                                           edgeControlPosition: edgeControlPosition
//                                       }
//                                       );
//            }

            private function resumePanels():void
            {
                for (var i:int = 0; i < pbh.numElements; i++)
                {
                    var tb:ToggleButton = pbh.getElementAt(i) as ToggleButton;

                    if (tb.selected)
                    {
                        var panelName:String = tb.label;
                        var index:String = sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]['index'];
                        var location:String = tb.name;
                        //从GIS布局中删除
                        gisViewGroup.removeElement(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]);
                        //添加到左右布局容器中
                        this['panelShowGroup_' + location].addElementAt(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName], (this['panelShowGroup_' + location] as VGroup).numChildren > (int(index) - 1) ? (int(index) - 1) : (this['panelShowGroup_' + location] as VGroup).numChildren);
                        tb.selected = false;
                        (sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as Window).dragable = false;
//						(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as Window).percentHeight = 100;
//						(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as Window).percentWidth = 100;
                    }
                }
            }

            protected function button1_clickHandler(event:MouseEvent):void
            {
                if (refreshImg.name == "norefresh")
                {
//                    this.dataRefreshTimer.start();
					
					msgDispatcher(new SceneEvent("REFRESH_START"));
                    refreshImg.source = refresh;
                    refreshImg.name = "refresh";
                    refreshImg.toolTip = "自动刷新已启动";
//                    parentApplication.add(dataRefreshTimer);
                }
                else
                {
					msgDispatcher(new SceneEvent("REFRESH_STOP"));
//                    this.dataRefreshTimer.stop();
                    refreshImg.source = no_refresh;
                    refreshImg.name = "norefresh";
                    refreshImg.toolTip = "自动刷新已停止";
//                    parentApplication.remove(dataRefreshTimer);
                }

            }

            [MessageHandler(selector = "CMS_SCENE_SCENEVIEW_NOEFRESH")]
            [MessageHandler(selector = "CMS_SCENE_SCENEVIEW_EFRESH")]
            public function checkRefresh(e:SceneEvent):void
            {
                if (e.type == "CMS_SCENE_SCENEVIEW_EFRESH")
                {
//                    this.dataRefreshTimer.start();
					msgDispatcher(new SceneEvent("REFRESH_START"));
                    refreshImg.source = refresh;
                    refreshImg.name = "refresh";
                    refreshImg.toolTip = "自动刷新已启动";
//                    parentApplication.add(dataRefreshTimer);
                }
                else if (e.type == "CMS_SCENE_SCENEVIEW_NOEFRESH")
                {
//                    this.dataRefreshTimer.stop();
					msgDispatcher(new SceneEvent("REFRESH_STOP"));
                    refreshImg.source = no_refresh;
                    refreshImg.name = "norefresh";
                    refreshImg.toolTip = "自动刷新已停止";
//                    parentApplication.remove(dataRefreshTimer);
                }
            }


            private var kpiChartEvent:KPISituationEvent = null;

            [MessageHandler(selector = "SHOW_LINE_DATA")]
            public function showKpiChart(event:KPISituationEvent = null):void
            {
                if (event == null && kpiChartEvent != null)
                {
                    event = kpiChartEvent;
                }

                //获取门限数量
                var lenth:int = event.kpiDetailChartData.getItemAt(0).len;

                log.info("show kpi chart data! :: " + user.kpiName + "  --  " + event.kpiDetailChartData.length);

                kpiLabel.text = user.kpiName;

//				if(user.dateFlag == "1")
//				{
                if (user.hisFlag == "1")
                {
                    var p1:SerialParam = new SerialParam('kpiValue', event.kpiDetailChartData.getItemAt(0)['kpiDate']);
                    p1.chartType = PrettyChartType.CHART_TYPE_LINE;
                    p1.yAxis = "left";

//					kpiChart.width = event.kpiDetailChartData.length * 60;
//					if (kpiChart.width < kpiChartWin.width)
                    kpiChart.width = kpiChartWin.width - 8;

                    var charParam:ChartParam = new ChartParam();

                    if (user.dateFlag == "1")
                    {
                        charParam.xAxisProperty = "time";
                    }
                    //charParam.xAxisProperty = "time"; 
                    charParam.use3DColumn = false;
                    charParam.showLegend = false;

                    charParam.labelStep = 60 / Number(event.kpiDetailChartData.getItemAt(0)['timeInterval']) - 1;

                    this.kpiChart.chartParam = charParam;
                    this.kpiChart.series = new ArrayCollection([p1]);
                    user.hisFlag = "0";
                }
                else
                {
                    var p1:SerialParam = new SerialParam('kpiValue', event.kpiDetailChartData.getItemAt(0)['kpiDate']);
                    p1.chartType = PrettyChartType.CHART_TYPE_LINE;
                    p1.yAxis = "left";

//					kpiChart.width = event.kpiDetailChartData.length * 30;
//					if (kpiChart.width < kpiChartWin.width)
                    kpiChart.width = kpiChartWin.width - 8;

                    var charParam:ChartParam = new ChartParam();

                    if (user.dateFlag == "1")
                    {
                        charParam.xAxisProperty = "time";
                    }
                    charParam.use3DColumn = false;
                    charParam.showLegend = true;

                    charParam.padding = 5;

//                    charParam.labelStep = 60 / Number(event.kpiDetailChartData.getItemAt(0)['timeInterval']) - 1;
                    kpiChart.canDropLabels = true;

                    this.kpiChart.chartParam = charParam;
                    this.kpiChart.series = new ArrayCollection([p1]);

//						if(user.level == "1")
//						{

                    if (event.kpiDetailChartData.getItemAt(0)['kpiDate1'])
                    {
                        var p2:SerialParam = new SerialParam('kpiValue1', event.kpiDetailChartData.getItemAt(0)['kpiDate1']);
                        p2.chartType = PrettyChartType.CHART_TYPE_LINE;
                        p2.yAxis = "left";
                        kpiChart.series.addItem(p2);
                        log.info("ooooooooooo");
                    }


                    if (event.kpiDetailChartData.getItemAt(0)['kpiDate2'])
                    {
                        var p3:SerialParam = new SerialParam('kpiValue2', event.kpiDetailChartData.getItemAt(0)['kpiDate2']);
                        p3.chartType = PrettyChartType.CHART_TYPE_LINE;
                        p3.yAxis = "left";
                        kpiChart.series.addItem(p3);
                        log.info("[[[[[[[[[[[[[[[[[[[[[[");
                    }

                    if (event.kpiDetailChartData.getItemAt(0)['kpiDate3'])
                    {
                        var p4:SerialParam = new SerialParam('kpiValue3', event.kpiDetailChartData.getItemAt(0)['kpiDate3']);
                        p4.chartType = PrettyChartType.CHART_TYPE_LINE;
                        p4.yAxis = "left";
                        kpiChart.series.addItem(p4);
                    }
//						}
                }

//				}
//				else
//				{
//					var p3:SerialParam = new SerialParam('kpiValue', '');
//					p3.chartType = PrettyChartType.CHART_TYPE_LINE;
//					p3.yAxis = "left";
//
//					kpiChart.width = event.kpiDetailChartData.length * 60;
//					if(kpiChart.width < kpiChartWin.width)
//						kpiChart.width = kpiChartWin.width - 8;
//
//					var charParam1:ChartParam = new ChartParam();
//					charParam1.xAxisProperty = "time";
//					charParam1.use3DColumn = false;
//					charParam1.showLegend = false;
//
//					charParam1.labelStep = 60 / Number(event.kpiDetailChartData.getItemAt(0)['timeInterval']) - 1;
//
//					this.kpiChart.chartParam = charParam1;
//					this.kpiChart.series = new ArrayCollection([p3]);
//
//				}
                //画门限
                if (thresholdKpi.selected)
                    for (var i:int = 1; i <= lenth; i++)
                    {
                        var count1:int = i + 1;
                        var aa:String = "thresholdValue" + i;
                        var p:SerialParam = new SerialParam(aa, '门限');
                        p.chartType = PrettyChartType.CHART_TYPE_LINE;
                        p.yAxis = 'left';
                        //p.fillColorArray=rendingColorArray;
                        p.lineStrokeColor = uint(event.kpiDetailChartData.getItemAt(0)["color" + i]);
                        p.showDataDot = false;
                        kpiChart.series.addItem(p);
                    }

                kpiChart.percentHeight = 100;

                kpiChart.chartData(event.kpiDetailChartData, true);
//				chartViewStack.selectedIndex = 1;
                kpiChartEvent = event;
            }

            [MessageHandler(selector = "SHOW_HISTORY_TOPN_LINE_DATA")]
            [MessageHandler(selector = "SHOW_HISTORY_LINE_DATA")]
            public function showHistoryKpiChart(event:KPISituationEvent):void
            {
                PopUpManager.addPopUp(hisPopupWin, this.parent as DisplayObject);

                hisPopupWin.x = (this.stage.width - hisPopupWin.width) / 2 - 150;
                hisPopupWin.y = (this.stage.height - hisPopupWin.height) / 2 - 50;
                hisPopupWin.visible = true;

                var p1:SerialParam = new SerialParam('kpiValue', '');
                p1.chartType = PrettyChartType.CHART_TYPE_LINE;
                p1.yAxis = "left";

                hisPopChart.width = sceneViewPM.kpiSituationDM.kpiCharData.length * 30;

                if (hisPopChart.width < hisPopupWin.width)
                    hisPopChart.width = hisPopupWin.width - 8;

                var charParam:ChartParam = new ChartParam();
                charParam.xAxisProperty = "time";
                charParam.use3DColumn = false;
                charParam.showLegend = true;
                charParam.useShowDataEffect = false;

                charParam.labelStep = 60 / Number(sceneViewPM.kpiSituationDM.kpiCharData.getItemAt(0)['timeInterval']) - 1;

                this.hisPopChart.chartParam = charParam;
                this.hisPopChart.series = new ArrayCollection([p1]);

                hisPopChart.chartData(sceneViewPM.kpiSituationDM.kpiCharData, true);

                hisPopChart.percentHeight = 100;
            }

            protected function kpiChartWin_maximizeHandler(event:WindowEvent):void
            {
                //最大化方法
//                kpiChartBox.visible = false;
//                kpiChartBox.includeInLayout = false;

                PopUpManager.addPopUp(kpiChartWin, topGroup);
                popWin = kpiChartWin;
                kpiChartWin.width = topGroup.width;
                kpiChartWin.height = topGroup.height;
                PopUpManager.centerPopUp(kpiChartWin);

                quitChart.percentWidth = 100;

                kpiChart.percentWidth = 100;
            }


            protected function kpiChartWin_minimizeHandler(event:WindowEvent):void
            {
                PopUpManager.removePopUp(kpiChartWin);
//                kpiChartBox.visible = true;
//                kpiChartBox.includeInLayout = true;
//                kpiChartWin.x = gisWindow.x;
//                kpiChartWin.y = gisWindow.height - 5;
//                kpiChartWin.height = 5;
//                kpiChartWin.width = 240;

            }

            protected function kpiChartWin_restoreHandler(event:WindowEvent):void
            {
                PopUpManager.removePopUp(kpiChartWin);
//                kpiChartBox.visible = true;
//                kpiChartBox.includeInLayout = true;
				chartGroup.addElement(popWin);

            }

            protected function dayLevel_clickHandler():void
            {
                hisImg.visible = true;
                hisImg.includeInLayout = true;

                addImg.visible = true;
                addImg.includeInLayout = true;
                var evt:KPISituationEvent = new KPISituationEvent(KPISituationEvent.LOAD_LINE_DATA1);
                evt.param.interval = "1";
                intervalS = "1";
                msgDispatcher(evt);
                log.info("根据kpiId获取历史数据图表展示数据DAY：");
                log.info(evt);
                //是否比较时间。
                compareDateFlag = "0";
            }

            protected function weekLevel_clickHandler():void
            {
                hisImg.visible = false;
                hisImg.includeInLayout = false;
                addImg.visible = true;
                addImg.includeInLayout = true;
                var evt:KPISituationEvent = new KPISituationEvent(KPISituationEvent.LOAD_LINE_DATA1);
                evt.param = new Object();
                evt.param.interval = "2";
                intervalS = "2";
                msgDispatcher(evt);
                log.info("根据kpiId获取历史数据图表展示数据WEEK：");
                log.info(evt);
                //是否比较时间。
                compareDateFlag = "0";
            }

            protected function monthLevel_clickHandler():void
            {
                hisImg.visible = false;
                hisImg.includeInLayout = false;
                addImg.visible = true;
                addImg.includeInLayout = true;
                var evt:KPISituationEvent = new KPISituationEvent(KPISituationEvent.LOAD_LINE_DATA1);
                evt.param = new Object();
                evt.param.interval = "3";
                intervalS = "3";
                msgDispatcher(evt);
                log.info("根据kpiId获取历史数据图表展示数据MONTH：");
                log.info(evt);
                //是否比较时间。
                compareDateFlag = "0";
            }

            private function dealClickLowerLevel(e:PrettyChartEvent):void
            {
                menuWinLowerLevel.visible = true;
                menuWinLowerLevel.includeInLayout = true;

                log.info("---dealClickLowerLevel要开始");
                log.info(e.data);

                param = new Object();
                param = e.data;

                nextLevelBT.visible = e.data.isNext == "1"; //若有isNext，则判断可以下一级钻取
                nextLevelBT.includeInLayout = e.data.isNext == "1";

                //如果是网元，那么出现gis定位按钮
                gisPositionLab.visible = e.data.isNext != "1";
                gisPositionLab.includeInLayout = e.data.isNext != "1";

                menuWinLowerLevel.x = mouseX - 40;
                menuWinLowerLevel.y = mouseY - 10;
            }

            protected function lowerLevelDrillingTopo():void
            {
                log.debug("[下一级钻取：网元]: 开始！");

                var evt:KPISituationEvent;

//				if(param.isNext == "1")
//					evt = new KPISituationEvent(KPISituationEvent.LOAD_KPI_AREA_DATA);

                log.info("[下一级钻取：网元]: 开始！test");
                log.info(param);

                user.sceneId = param.areaId;
                user.level = "2";
                user.currentMapType = "0";
                user.sceneId = param.areaId;
//				msgDispatcher(evt);

                log.info("下一级钻取start");
                var e:SceneEvent = new SceneEvent(SceneEvent.CHANGE_MAPVIEW);
                e.param = new Object();
                e.param.centerlongitude = param.centerlongitude;
                e.param.centerlatitude = param.centerlatitude;
                msgDispatcher(e);
            }

            private function gisPositionHandler():void
            {
                var evt:SceneEvent = new SceneEvent(SceneEvent.SHOWMO2GIS);
                evt.param = new Object();
                evt.param.moId = param.areaId; //TODO
                evt.param.moTypeId = param.moTypeId;
                evt.param.alarmLevel = param["alarmLevel"];
                log.info("抛出事件gis定位SHOWMO2GIS,参数如下[{0}][{1}]", evt.param.moId, evt.param.moTypeId);
//                msgDispatcher(evt);
				requestServerUtil.addRequest(evt);
            }

            //缩略图或者tree抛出事件，判断是否需要切换地图，并且在切换换成后进行change_view事件处理
            [MessageHandler(selector = "CHANGE_VIEW")]
            public function changeMapViewHandler(e:SceneEvent):void
            {
                //切换视图  则需要重新加载数据，不认为是刷新数据。
                user.isDrillDown = true;

                this.back2vectMapBT.visible = false;
                log.error("看看执行多少次");

                //1 矢量地图  0 gis地图	
                if (user.currentMapType == "1"&&!mapVectorComp.visible)
                {
                    mapVectorComp.visible = true;
//                    mapVectorComp.includeInLayout = true;

                    gisComp.visible = false;
//                    gisComp.includeInLayout = false;
                    gisComp.hideAllFeatures();
                }
                else if (user.currentMapType == "0"&&!gisComp.visible)
                {
                    mapVectorComp.visible = false;
//                    mapVectorComp.includeInLayout = false;

                    gisComp.visible = true;
//                    gisComp.includeInLayout = true;
//					msgDispatcher(new SceneEvent(SceneEvent.CMS_SCENE_MAPVIEW_CAMERALISTGETHANDLER));
                }
				//TODO
//                var evt:SceneEvent = new SceneEvent(SceneEvent.CHANGE_VIEW);
//                evt.param = e.param;
//                msgDispatcher(evt);
				changeView(e);
            }

            [MessageHandler(selector = "AREAORMO_DATACHANGE")]
            public function areaOrMoChangeHandler(e:SceneEvent):void
            {
                var evt:SceneEvent;

                if (mapVectorComp.visible)
                {
                    evt = new SceneEvent(SceneEvent.AREAORMO_MAPVECTOR_DATACHANGE);
                }
                else if (gisComp.visible)
                {
                    evt = new SceneEvent(SceneEvent.AREAORMO_GISMAP_DATACHANGE);
                }
                msgDispatcher(evt);
            }

            //历史趋势图菜单处理 
            protected function showHistoryTrend():void
            {
                log.debug("[xx：]: 开始！");
                log.info(param);
                user.areaId = param.areaId;
                user.moId = param.areaId;

                //网元的历史趋势图 跳转到指标定制页面
                if (param.hasOwnProperty("moTypeId"))
                {
                    var e:KpiCustomEvent = new KpiCustomEvent(KpiCustomEvent.QUERYKPI);
                    var p:Object = new Object();
                    p.moTypeId = param.moTypeId;
                    p.kpiIDs = [param.kpiId];
                    p.moOrAreaFlag = "0";
                    p.moOrAreaId = param.areaId;

                    e.param = p;

                    log.info("图表 网元-历史趋势 处理：");
                    log.info(e.param);

                    msgDispatcher(e);
                }
                else
                {
                    if (param.isNext == "1")
                    {
                        var evt:KPISituationEvent = new KPISituationEvent(KPISituationEvent.LOAD_HISTORY_LINE_DATA);
                        log.info("[历史趋势图：]:区域 开始！test");
                       // user.level = "1";
						user.level = "2";

                        if (user.level == "1" || user.level == "2")
                        {
                            user.cityId = "00";
                        }
                        else
                        {
                            user.cityId = param.cityId;
                        }
//                        msgDispatcher(evt);
                        log.debug("历史趋势区域 菜单处理！");
                        log.info("addPopUp:hisPopupWin");
						requestServerUtil.addRequest(evt);
                    }
                    else
                    {
                        var evt1:KPISituationEvent = new KPISituationEvent(KPISituationEvent.LOAD_HISTORY_TOPN_LINE_DATA);
                        log.info("[历史趋势图topn：]:区域 开始！test");
                        user.level = "2";

                        if (user.level == "1" || user.level == "2")
                        {
                            user.cityId = "00";
                        }
                        else
                        {
                            user.cityId = param.cityId;
                        }
//                        msgDispatcher(evt1);
                        log.debug("历史趋势区域tpon 菜单处理！");
                        log.info("addPopUp:hisPopupWin topn");
						requestServerUtil.addRequest(evt1);
                    }
                }
            }

            private function openWin():void
            {
                log.debug("[配置：指标窗口]: 开始！");
                PopUpManager.addPopUp(configurationWin, this.parent as DisplayObject);
                configurationWin.x = (this.stage.width - configurationWin.width) / 2 - 150;
                configurationWin.y = (this.stage.height - configurationWin.height) / 2 - 50;
                configurationWin.visible = true;
            }

            private function openWin1():void
            {
                log.debug("[配置：指标窗口]: 开始！");
                PopUpManager.addPopUp(configurationWin1, this);
                configurationWin1.x = (this.stage.width - configurationWin1.width) / 2 - 150;
                configurationWin1.y = (this.stage.height - configurationWin1.height) / 2 - 50;
                configurationWin1.visible = true;
            }

            protected function ok_clickHandler():void
            {
                log.info("startTime = " + startTime.text + "endTime=" + endTime.text);
                var evt:KPISituationEvent = new KPISituationEvent(KPISituationEvent.LOAD_LINE_DATA1);
                evt.param = new Object();
                evt.param.interval = "1";
                user.startTime = startTime.text;
                user.endTime = endTime.text;
                user.hisFlag = "1";
                msgDispatcher(evt);
                log.info("时间：");
                log.info(evt);
                //是否比较时间。
                compareDateFlag = "0";
            }

            //返回上一层
            [MessageHandler(selector = "CMS_SCENE_SCENEVIEW_BACKTOPFLOOR")]
            public function backlastfloor(e:SceneEvent = null):void
            {
                //将必要参数在user中存入旧版本，每次返回，直接将旧版本赋值新版本即可
                var evt:SceneEvent = new SceneEvent(SceneEvent.CHANGE_VIEW);
                user.sceneId = user.initSceneId;
                user.cityId = "00";
                user.level = "1";
                user.cityName = "";
//				user.kpiId = "";
//				user.kpiIdList = "";
//				user.kpiName = "";
//				user.moTypeId = "";
//				user.moTypeIdList = "";
                user.currentMapType = user.mapType;
                user.layerId = user.initLayerId;
                user.layerurl = user.initLayerUrl;
                msgDispatcher(evt);
            }

            [Inject("mapViewDM")]
            public var mapViewDM:MapViewDM;

            private function dyeMapByAllHandler():void
            {
                log.info("触发根据所有指标渲染地图！！");
                user.kpiId = null;
                user.kpiName = null;
                user.moTypeId = null;
                user.kpiIdList = "";
                user.moTypeIdList = "";

                for each (var kpi:Object in mapViewDM.impKpiList)
                {
                    if (user.kpiIdList == "")
                    {
                        user.kpiIdList += kpi['kpiId'];
                        user.moTypeIdList += kpi['moTypeId'];
                    }
                    else
                    {
                        user.kpiIdList += "," + kpi['kpiId'];
                        user.moTypeIdList += "," + kpi['moTypeId'];
                    }
                }

                if (user.currentMapType == "1" && user.level == "1")
                {
                    log.info("刷新 矢量图 渲染数据！");
                    var evt:SceneEvent = new SceneEvent(SceneEvent.RENDER_VECTOR_MAP);
                    msgDispatcher(evt);
                }

                log.info("GIS地图开始判断，是否需要处理：" + (user.currentMapType == "0" && user.level == "2" && !user.isDrillDown));
                user.refreshPolygon = true;

                if (user.currentMapType == "0" && user.level == "2" && !user.isDrillDown)
                {
                    log.info("刷新GIS泰森多边形数据！");
//                    msgDispatcher(new SceneEvent(SceneEvent.LOAD_SCENE_POLYGON));
					requestServerUtil.addRequest(new SceneEvent(SceneEvent.LOAD_SCENE_POLYGON));
                }
            }

            protected function hisPopupWin_maximizeHandler(event:WindowEvent):void
            {
                hisPopupWin.width = this.parentApplication.width;
                hisPopupWin.height = this.parentApplication.height;

            }

            protected function ok_clickHandler1():void
            {
                log.info("vgroup.numElements:" + vgroup.numElements);
                //TODO 	
                var compareDate:String = "";

                for (var i:int = 0; i < vgroup.numElements; i++)
                {
                    if (vgroup.getElementAt(i) is CompareDateVGroup)
                    {
                        var cdg:CompareDateVGroup = vgroup.getElementAt(i) as CompareDateVGroup;
                        log.info("cdg.compareDate---" + cdg.compareDate);

                        if (cdg.compareDate != null && cdg.compareDate != "")
                        {
                            compareDate += "," + cdg.compareDate;
                            log.info("llllllllll+compareDate" + compareDate);
                        }
                    }
                }

                //log.info(param);
                if (compareDate.length > 0)
                {
                    log.info("kkkkkkkkkkk+compareDate.length" + compareDate.length);
                    user.compareDate = compareDate.substr(1);
                    log.info("ggggggggg+compareDate.substr(1)" + compareDate.substr(1));
                }
                else
                {
                    Alert.show("请选择比较日期！！", "提示");
                    return;
                }

                log.info(user);
                var evt:KPISituationEvent = new KPISituationEvent(KPISituationEvent.LOAD_COMPARE_LINE_DATA);
                evt.param.interval = intervalS;
                log.info(evt.param);
                msgDispatcher(evt);
                //比较时间标识。
                compareDateFlag = "1";
            }

            public function compareDateAdd():void
            {
                var compareDG:CompareDateVGroup = new CompareDateVGroup();
                compareDG.dispatchMsg = this.msgDispatcher;

                log.info("count:" + count);

                if (count < 3)
                {
                    vgroup.addElement(compareDG);
                }

                if (count <= 2)
                {
                    count++;
                }
                else
                {
                    count = 3
                }
            }

            [MessageHandler(selector = "DELETE_COMPARE_DATE")]
            public function deleteCompareDate(e:SceneEvent):void
            {
                count--;

                if (count == 0)
                {
                    vgroup.removeAllElements();
                }

                log.info("count:" + count + "deleteCompareDate");
            }

            /**
             * 校验当前新增对象在已有集合中是否重复
             * returnFlag：true：不重复；false：重复
             */
            private function voliade(destArr:ArrayCollection, currentObj:Object):Boolean
            {
                var returnFlag:Boolean = true;

                for each (var obj:Object in destArr)
                {
                    if (obj == currentObj)
                    {
                        returnFlag = false;
                        break;
                    }
                }
                return returnFlag;
            }

            [MessageHandler(selector = "COMPARE_DATE")]
            public function compareDate(e:SceneEvent):void
            {
                //判断当前输入时间值是否小于初始设定时间值
                log.info("粒度为:" + intervalS);

//				if(statisticsLevelg == "1")
//				{


                if (intervalS == "1")
                {
                    var currentDate:Date = new Date();
                    currentDate.setDate(currentDate.getDate() - 1);
                    log.info("currentDate:" + currentDate);
                    var cd:String = DateUtils.parseDate(currentDate, "YYYY-MM-DD");
                    log.info("cd:" + cd);
                    log.info("(e.param['date'] as DateField).text:" + (e.param['date'] as DateField).text);

                    if ((e.param['date'] as DateField).text < cd)
                    {
                        log.info("日粒度--比较时间符合要求:" + compareDate);
                        var uu:String = (e.param['date'] as DateField).text;
                        log.info("uu:" + uu);

                        if (!voliade(arrayListD, uu)) // 判断当前输入时间值是否在已有对象中存在
                        {
                            (e.param['date'] as DateField).errorString = "时间值输入重复";
                            log.info("Day？:" + compareDate);
                        }
                        else
                        {
                            (e.param['date'] as DateField).errorString = null;
                            compareDateData = (e.param['date'] as DateField).text;
                            arrayListD.addItem(uu);
                            log.info("Day结束:" + compareDate);
                        }
                    }
                    else
                    {
                        log.info("日粒度--比较时间与当前时间比较:" + compareDate);
                        (e.param['date'] as DateField).errorString = "比较日期不能早于当前日期";
                    }
                }
                else if (intervalS == "2")
                {
                    var currentDate:Date = new Date();
                    currentDate.setDate(currentDate.getDate() - 7);
                    log.info("currentDate:" + currentDate);
                    var cd:String = DateUtils.parseDate(currentDate, "YYYY-MM-DD");
                    log.info("cd:" + cd);
                    log.info("(e.param['date'] as DateField).text:" + (e.param['date'] as DateField).text);

                    if ((e.param['date'] as DateField).text < cd)
                    {
                        log.info("月粒度--比较时间符合要求:" + compareDate);
                        var uu:String = (e.param['date'] as DateField).text;
                        log.info("uu:" + uu);

                        if (!voliade(arrayListD, uu)) // 判断当前输入时间值是否在已有对象中存在
                        {
                            (e.param['date'] as DateField).errorString = "时间值输入重复";
                            log.info("Day？:" + compareDate);
                        }
                        else
                        {
                            (e.param['date'] as DateField).errorString = null;
                            compareDateData = (e.param['date'] as DateField).text;
                            arrayListD.addItem(uu);
                            log.info("Day结束:" + compareDate);
                        }
                    }
                    else
                    {
                        log.info("日粒度--比较时间与当前时间比较:" + compareDate);
                        (e.param['date'] as DateField).errorString = "比较日期不能早于当前日期";
                    }
                }
                else if (intervalS == "3")
                {
                    var currentDate:Date = new Date();
                    currentDate.setDate(currentDate.getMonth() - 1);
                    log.info("currentDate:" + currentDate);
                    var cd:String = DateUtils.parseDate(currentDate, "YYYY-MM-DD");
                    log.info("cd:" + cd);
                    log.info("(e.param['date'] as DateField).text:" + (e.param['date'] as DateField).text);

                    if ((e.param['date'] as DateField).text < cd)
                    {
                        log.info("月粒度--比较时间符合要求:" + compareDate);
                        var uu:String = (e.param['date'] as DateField).text;
                        log.info("uu:" + uu);

                        if (!voliade(arrayListD, uu)) // 判断当前输入时间值是否在已有对象中存在
                        {
                            (e.param['date'] as DateField).errorString = "时间值输入重复";
                            log.info("Day？:" + compareDate);
                        }
                        else
                        {
                            (e.param['date'] as DateField).errorString = null;
                            compareDateData = (e.param['date'] as DateField).text;
                            arrayListD.addItem(uu);
                            log.info("Day结束:" + compareDate);
                        }
                    }
                    else
                    {
                        log.info("日粒度--比较时间与当前时间比较:" + compareDate);
                        (e.param['date'] as DateField).errorString = "比较日期不能早于当前日期";
                    }
                }

            }

            protected function button2_clickHandler(event:MouseEvent):void
            {
                msgDispatcher(new KpiCustomEvent(KpiCustomEvent.VIEWSHOW));
            }

            protected function roam_clickHandler(event:MouseEvent):void
            {
                var url:String = "http://10.39.248.230/monitor/RoamIndex.html";
                navigateToURL(new URLRequest(url));

//                navigateToURL(new URLRequest(user.context + "/flex-release/RoamView.jsp"));
            }

            private function dataTipFormate(hd:HitData):String
            {
                var dd:String;
                //data对应设置的数据集中的一个数据对象
                var data:Object = hd.item;
                var ci:String = hd.chartItem.element['yField'];

                var unit:String = data['unit'];

                if (unit == null)
                    unit = "";

                if (user.dateFlag == "1")
                {
                    if (ci == "kpiValue")
                    {
                        dd = data['kpiName'] + "\n" + data['gatherTime'] + "\n" + data['kpiValue'] + unit;
                    }
                    else if (ci == "kpiValue1")
                    {
                        dd = data['kpiName'] + "\n" + data['gatherTime1'] + "\n" + data['kpiValue1'] + unit;
                    }
                    else if (ci == "kpiValue2")
                    {
                        dd = data['kpiName'] + "\n" + data['gatherTime2'] + "\n" + data['kpiValue2'] + unit;
                    }
                    else if (ci == "kpiValue3")
                    {
                        dd = data['kpiName'] + "\n" + data['gatherTime3'] + "\n" + data['kpiValue3'] + unit;
                    }

                }
                else
                {
                    //展示的字段和形式执行控制，支持html语法。
                    if (ci == "kpiValue")
                    {
                        dd = data['kpiName'] + "\n" + data['gatherTime'] + "\n" + data['kpiValue'] + unit;
                    }
                    else if (ci == "kpiValue1")
                    {
                        dd = data['kpiName'] + "\n" + data['gatherTime1'] + "\n" + data['kpiValue1'] + unit;
                    }
                    else if (ci == "kpiValue2")
                    {
                        dd = data['kpiName'] + "\n" + data['gatherTime2'] + "\n" + data['kpiValue2'] + unit;
                    }
                    else if (ci == "kpiValue3")
                    {
                        dd = data['kpiName'] + "\n" + data['gatherTime3'] + "\n" + data['kpiValue3'] + unit;
                    }
//					if (ci == "kpiValue")
//					{
//						dd = data['time'] + "\n" + data['kpiValue'];
//					}
//					else if (ci == "kpiValue1")
//					{
//						dd = data['time1'] + "\n" + data['kpiValue1'];
//					}
//					else if (ci == "kpiValue2")
//					{
//						dd = data['time2'] + "\n" + data['kpiValue2'];
//					}
//					else if (ci == "kpiValue3")
//					{
//						dd = data['time3'] + "\n" + data['kpiValue3'];
//					}
                }

                return dd;
            }

            [MessageHandler(selector = "SHOW_MULT_MOGIS_LAYER")]
            [MessageHandler(selector = "CMS_SCENE_SCENEVIEW_CAMERAFIXPOSITIONHANDLER")]
			[MessageHandler(selector="SHOW_MOGIS_LAYER")]//TODO
            public function prepare2GisLocation(e:SceneEvent):void
            {
                log.info("切换地图为gis地图：{0}", gisComp.visible);

                if (!gisComp.visible)
                {
                    mapVectorComp.visible = false;
                    mapVectorComp.includeInLayout = false;

                    gisComp.visible = true;
                    gisComp.includeInLayout = true;
                }
            }

            [MessageHandler(selector = "SHOW_KPI_PLAN")]
            public function emgyChangeMap(e:KPISituationEvent):void
            {
                log.info("切换地图为gis地图：{0}", gisComp.visible);

                if (!gisComp.visible)
                {
                    mapVectorComp.visible = false;
                    mapVectorComp.includeInLayout = false;

                    gisComp.visible = true;
                    gisComp.includeInLayout = true;
                }
            }

            private function back2vectMap():void
            {
                mapVectorComp.visible = true;
                mapVectorComp.includeInLayout = true;

                gisComp.visible = false;
                gisComp.includeInLayout = false;

                this.back2vectMapBT.visible = false;
            }

            [MessageHandler(selector = "SHOW_MULT_MOGIS_LAYER")]
            [MessageHandler(selector = "CMS_SCENE_SCENEVIEW_CAMERAFIXPOSITIONHANDLER")]
			[MessageHandler(selector="SHOW_MOGIS_LAYER")]//TODO
            public function closeBackHandler(e:SceneEvent):void
            {
                if (user.currentMapType == "1")
                {
                    this.back2vectMapBT.visible = true;
                }
            }

            [MessageHandler(selector = "CHANGE_MAPVIEW")]
//            [MessageHandler(selector = "COMPONENT_REFRESH_DATA")]
            public function panelShowOrHidden(e:SceneEvent):void
            {
                if (user.level == "1"&&!areaMoConfigPanel.visible)
                {
                    areaMoConfigPanel.visible = true;
//                    areaMoConfigPanel.includeInLayout = true;
                }
                else if (user.level != "1"&&areaMoConfigPanel.visible)
                {
                    areaMoConfigPanel.visible = false;
//                    areaMoConfigPanel.includeInLayout = false;
                }
				refreshDatas1();
            }

            protected function config_clickHandler():void
            {

                log.info("保存配置信息！！！");
                var panels:ArrayCollection = new ArrayCollection();
                var sevt:SceneEvent = new SceneEvent(SceneEvent.CMS_SCENE_SCENEVIEW_CONFIGSAVE);
                sevt.param = new Object;
                sevt.param.sceneTypeId = user.sceneTypeId;
                sevt.param.accName = user.account;
                sevt.param.level = user.level;

                var ckbx:CheckBoxComp;

                for (var i:int = 0; i < panelCfgGroup.numElements; i++)
                {
                    ckbx = panelCfgGroup.getElementAt(i) as CheckBoxComp;

                    if (ckbx.selected)
                        panels.addItem(ckbx.param);
                }
                sevt.param.panels = panels;
                log.info(sevt.param);
//                msgDispatcher(sevt);
				
				requestServerUtil.addRequest(sevt);
            }

            [MessageHandler(selector = "CMS_SCENE_SCENEVIEW_CONFIGENABLE")]
            public function configEnableHandler(e:SceneEvent):void
            {
                return;
                var ckbx:CheckBoxComp;
                var temp:Object;

                for (var i:int = 0; i < panelCfgGroup.numElements; i++)
                {
                    ckbx = panelCfgGroup.getElementAt(i) as CheckBoxComp;
                    temp = ckbx.param;

                    if (ckbx.selected)
                    {
                        this['panelShowGroup_' + temp["location"]].addElementAt(sceneViewPM.sceneConfigDM.panelIdUIMap[temp["panelName"]], (this['panelShowGroup_' + temp["location"]] as VGroup).numChildren > (int(temp["showindex"]) - 1) ? (int(temp["showindex"]) - 1) : (this['panelShowGroup_' + temp["location"]] as VGroup).numChildren);
                    }
                    else
                    {
                        if (sceneViewPM.sceneConfigDM.panelIdUIMap[temp["panelName"]].hasOwnProperty('closeWindow'))
                            sceneViewPM.sceneConfigDM.panelIdUIMap[temp["panelName"]].closeWindow();
                        else
                            this['panelShowGroup_' + temp["location"]].removeElement(sceneViewPM.sceneConfigDM.panelIdUIMap[temp["panelName"]]);
                    }
                }
            }

            protected function togglebutton1_clickHandler(event:MouseEvent):void
            {
                var tb:ToggleButton = event.currentTarget as ToggleButton;
                var panelName:String = tb.label;
                var index:String = sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]['index'];
                var location:String = tb.name;
                var w:Number = sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]['width'];
                var h:Number = sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]['height'];
                log.info("面板移动操作：name：" + panelName + " w:" + w + " h:" + h);

                if (tb.selected)
                {
                    //从左右布局容器中移除
                    if (sceneViewPM.sceneConfigDM.panelIdUIMap[panelName].hasOwnProperty('closeWindow'))
                        sceneViewPM.sceneConfigDM.panelIdUIMap[panelName].closeWindow();
                    else
                        this['panelShowGroup_' + location].removeElement(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]);
                    //添加到GIS布局中
                    addWin2GisGroup(gisViewGroup, sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as Window);
                }
                else
                {
                    //从GIS布局中删除
                    gisViewGroup.removeElement(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName]);
                    //添加到左右布局容器中
                    this['panelShowGroup_' + location].addElementAt(sceneViewPM.sceneConfigDM.panelIdUIMap[panelName], (this['panelShowGroup_' + location] as VGroup).numChildren > (int(index) - 1) ? (int(index) - 1) : (this['panelShowGroup_' + location] as VGroup).numChildren);
                }
                (sceneViewPM.sceneConfigDM.panelIdUIMap[panelName] as Window).dragable = tb.selected;
            }

            private function addWin2GisGroup(g:Group, win:Window):void
            {
                var xx:Number = 50;
                var yy:Number = 40;

                if (g.numChildren > 0)
                {
                    xx = g.getElementAt(g.numChildren - 1).x + 80;
                    yy = g.getElementAt(g.numChildren - 1).y + 30;

                    if (xx > g.width - win.width)
                        xx = 50;

                    if (yy > g.height - win.height)
                        yy = 40;
                }
                win.x = xx;
                win.y = yy;
                gisViewGroup.addElement(win);
            }

            protected function group1_creationCompleteHandler(event:FlexEvent=null):void
            {
                topobutton.visible = user.initSceneId == '1011';
                topobutton.includeInLayout = user.initSceneId == '1011';

                jingquPanel.visible = user.initSceneId == '1452';

                if (user.initSceneId != '1011')
                {
                    panelShowGroup_2.paddingTop = 0;
                }

//                for (var i:int = 0; i < panelShowGroup_1.numElements; i++)
//                {
//                    Window(panelShowGroup_1.getElementAt(i)).width = Window(panelShowGroup_1.getElementAt(i)).width;
//                    Window(panelShowGroup_1.getElementAt(i)).height = Window(panelShowGroup_1.getElementAt(i)).height;
//                }
//
//                for (i = 0; i < panelShowGroup_2.numElements; i++)
//                {
//                    Window(panelShowGroup_2.getElementAt(i)).width = Window(panelShowGroup_2.getElementAt(i)).width;
//                    Window(panelShowGroup_2.getElementAt(i)).height = Window(panelShowGroup_2.getElementAt(i)).height;
//                }
            }

            private var flag410:Boolean = false;

            private function loadTip():void
            {
                countSign++;

                if (countSign % 2 == 0)
                {
                    user.isNew = "0";
                    madePrompt.toolTip == "定制提示";
//                    madePrompt.label == "定制提示";
                }
                else if (user.isNew == "1")
                {
                    user.isNew = "1";
                    madePrompt.toolTip == "取消提示";
//                    madePrompt.label == "取消提示";
                }
            }



            protected function madePrompt_clickHandler():void
            {
                countSign++;
                log.info("countSign" + countSign);
                log.info(countSign % 2);

                if (countSign % 2 == 0)
                {
                    log.info("sceneview定制提示");
                    user.isNew = "0";
//                    madePrompt.label = "定制提示";
                }
                else
                {
                    log.info("sceneview取消提示");
                    user.isNew = "1";
                        //madePrompt.toolTip =="取消提示";
//                    madePrompt.label = "取消提示";
                }
            }

            protected function navigatorcontent1_mouseOverHandler(event:MouseEvent):void
            {
                flag410 = true;
                setTimeout(function():void
                {
                    if (flag410 && user.isNew == "1")
                    {
                        user.labelTypeId = "410";
                        var obj:Object = new Object;
                        obj.sceneId = user.sceneId;
                        obj.level = user.level;
//							if (chartTabBar.selectedIndex == 0)
//							{
//								obj.labelId=409;
//							}
//							else
//							{
                        obj.labelId = 410;
//							}
                        log.info("labelId=" + obj.labelId + "selectedIndex=" + chartTabBar.selectedIndex);
                        var e:SceneIntroEvent = new SceneIntroEvent(SceneIntroEvent.LOAD_SCENEINTROINFO_DATA);
                        e.obj = obj;
//                        msgDispatcher(e);
						requestServerUtil.addRequest(e);
                    }
                    flag410 = false;
                }, 3000);
            }

            protected function navigatorcontent1_mouseOutHandler(event:MouseEvent):void
            {
                flag410 = false;
            }

            protected function winListResize_effectEndHandler(event:EffectEvent):void
            {
                if (winListImg.name == "la")
                {
                    winListImg.name = "ra"
                    winListImg.source = ra;
                    winListImg.toolTip = '显示窗口列表栏';
                    pbh.visible = false;
                }
                else
                {
                    winListImg.name = "la"
                    winListImg.source = la;
                    winListImg.toolTip = '隐藏窗口列表栏';
                }
            }

            protected function winListImg_clickHandler(event:MouseEvent):void
            {
                if (winListImg.name == "la")
                {
                    winListResize.alphaTo = 0;
                }
                else
                {
                    pbh.visible = true;
                    winListResize.alphaTo = 1;
                }
                winListResize.play();
            }

            protected function cfgBar_mouseOverHandler(event:MouseEvent):void
            {
                log.debug("GIS配置按钮提示信息...");

                if (user.isNew == "1")
                {
                    user.labelTypeId = "402";
                    setTimeout(function():void
                    {
                        var obj:Object = new Object;
                        var e:SceneIntroEvent = new SceneIntroEvent(SceneIntroEvent.LOAD_SCENEINTROINFO_DATA);
                        obj.labelId = "402";
                        e.obj = obj;
                        log.debug("参数信息...");
                        log.info(e.obj);
//                        msgDispatcher(e);
						requestServerUtil.addRequest(e);
                    }, 3000);
                }
            }

            protected function indexDingzhiButton_mouseOverHandler(event:MouseEvent):void
            {
                log.debug("GIS指标定制按钮提示信息...");

                if (user.isNew == "1")
                {
                    user.labelTypeId = "403";
                    setTimeout(function():void
                    {
                        var obj:Object = new Object;
                        var e:SceneIntroEvent = new SceneIntroEvent(SceneIntroEvent.LOAD_SCENEINTROINFO_DATA);
                        obj.labelId = "403";
                        e.obj = obj;
                        log.debug("参数信息...");
                        log.info(e.obj);
//                        msgDispatcher(e);
						requestServerUtil.addRequest(e);
                    }, 3000);
                }

            }

            protected function dyeMapByAllButton_mouseOverHandler(event:MouseEvent):void
            {
                log.debug("GIS渲染所有按钮提示信息...");

                if (user.isNew == "1")
                {
                    user.labelTypeId = "404";
                    setTimeout(function():void
                    {
                        var obj:Object = new Object;
                        var e:SceneIntroEvent = new SceneIntroEvent(SceneIntroEvent.LOAD_SCENEINTROINFO_DATA);
                        obj.labelId = "404";
                        e.obj = obj;
                        log.debug("参数信息...");
                        log.info(e.obj);
//                        msgDispatcher(e);
						requestServerUtil.addRequest(e);
                    }, 3000);
                }

            }

            protected function roamButton_mouseOverHandler(event:MouseEvent):void
            {
                log.debug("GIS漫游数据按钮提示信息...");

                if (user.isNew == "1")
                {
                    user.labelTypeId = "405";
                    setTimeout(function():void
                    {
                        var obj:Object = new Object;
                        var e:SceneIntroEvent = new SceneIntroEvent(SceneIntroEvent.LOAD_SCENEINTROINFO_DATA);
                        obj.labelId = "405";
                        e.obj = obj;
                        log.debug("参数信息...");
                        log.info(e.obj);
//                        msgDispatcher(e);
						requestServerUtil.addRequest(e);
                    }, 3000);
                }

            }

            protected function backButton_mouseOverHandler(event:MouseEvent):void
            {
                if (user.isNew == "1")
                {
					log.debug("GIS返回按钮提示信息...");
                    user.labelTypeId = "406";
                    setTimeout(function():void
                    {
                        var obj:Object = new Object;
                        var e:SceneIntroEvent = new SceneIntroEvent(SceneIntroEvent.LOAD_SCENEINTROINFO_DATA);
                        obj.labelId = "406";
                        e.obj = obj;
                        log.debug("参数信息...");
                        log.info(e.obj);
//                        msgDispatcher(e);
						requestServerUtil.addRequest(e);
                    }, 3000);
                }

            }

            protected function navtab1_mouseOverHandler(event:MouseEvent):void
            {
//				log.debug("GIS退服统计提示信息...");
                if (user.isNew == "1")
                {
                    user.labelTypeId = "409";
                    setTimeout(function():void
                    {
                        var obj:Object = new Object;
                        var e:SceneIntroEvent = new SceneIntroEvent(SceneIntroEvent.LOAD_SCENEINTROINFO_DATA);
                        obj.labelId = "409";
                        e.obj = obj;
                        log.debug("参数信息...");
                        log.info(e.obj);
//                        msgDispatcher(e);
						requestServerUtil.addRequest(e);
                    }, 3000);
                }

            }

            /**
             * 快速检索查询方法
             *
             */
            protected function queryButton_clickHandler(event:MouseEvent):void
            {
                var evt:SceneEvent = new SceneEvent(SceneEvent.CMS_SCENE_SCENEVIEW_SOURCEBYMO);
                var param:Object = new Object;
                param.name = mx.utils.StringUtil.trim(moQueryText.text);

                if (mx.utils.StringUtil.trim(moQueryText.text) == "")
                {
                    Alert.show("请输入网元名称!", "提示");
                    return;
                }
                param.cityId = user.cityId;
                param.level = user.level;
                param.sceneId = user.sceneId;
                evt.param = param;
                log.debug("快速检索查询参数...");
                log.debug(evt.param);
//                msgDispatcher(evt);
				requestServerUtil.addRequest(evt);
            }

            protected function cameraQuery_clickHandler(event:MouseEvent):void
            {
//                if (StringUtil.trim(cameraName.text).length > 0)
//                {
//                    var evt:SceneEvent = new SceneEvent(SceneEvent.CMS_SCENE_MAPVIEW_CAMERAINFOGETHANDLER);
//                    evt.param = new Object();
//                    evt.param.sceneId = user.sceneId;
//                    evt.param.initSceneId = user.initSceneId;
//                    evt.param.moName = StringUtil.trim(cameraName.text);
//                    cameraName.text = StringUtil.trim(cameraName.text);
//                    msgDispatcher(evt);
//                }
//                else
//                {
//                    Alert.show("请输入终端名称", "提示");
//                    return;
//                }
            }

            [MessageHandler(selector = "DEAL_SCENE_JINGQUKPI")]
            public function jingquTitle(e:SceneEvent):void
            {
                jingquPanel.title = mapViewPM.mapViewDM.userNumList.getItemAt(0).time;

                for (var index:int = 0; index < mapViewPM.mapViewDM.userNumList.length; index++)
                {
                    mapViewPM.mapViewDM.userNumLevel[mapViewPM.mapViewDM.userNumList.getItemAt(index)['areaname']] = index + 1;
                }

                //加载场景下所有景区缩略图
                var sevt:SceneEvent = new SceneEvent(SceneEvent.LOAD_SCENE_SNAPSHOTS_ALL);
                sevt.param = new Object;
                sevt.param.sceneId = user.sceneId;
                sevt.param.level = user.level;
//                msgDispatcher(sevt);
				
				requestServerUtil.addRequest(sevt);
            }

            [MessageHandler(selector = "CMS_SCENE_SCENEVIEW_SHOW_MOLIST")]
            public function showDataGrid(e:SceneEvent):void
            {
                log.debug("展示网元信息...");

                if (mapViewPM.mapViewDM.selectMoList.length > 0)
                {
                    PopUpManager.addPopUp(gisSearchWindow, this.parent as DisplayObject);
                    gisSearchWindow.x = this.width / 2 + 80;
                    gisSearchWindow.y = this.height / 2 - 120;
                    gisSearchWindow.visible = true;
                }
                else
                {
                    Alert.show("没有查询到匹配信息！", "提示");
                }
//				var evt:SceneEvent = new SceneEvent(SceneEvent.CMS_SCENE_SCENEVIEW_SEARCH_OPEN);
//				msgDispatcher(evt);
            }

            protected function advanceddatagrid1_itemClickHandler(event:ListEvent):void
            {
                log.debug("列表定位网元信息....");
                //				sourceLayer.clear();
                log.debug("选择行：" + event.rowIndex);
                var data:Object = mapViewPM.mapViewDM.selectMoList[event.rowIndex];
                log.debug(data);
                var e:SceneEvent = new SceneEvent(SceneEvent.SHOWMO2GIS);
                e.param = new Object();
                e.param.moId = data.moId;
                e.param.moTypeId = data.moTypeId;
                e.param.sceneId = user.initSceneId;
                log.debug("参数信息：...");
                log.debug(e.param);
//                msgDispatcher(e);
				requestServerUtil.addRequest(e);
            }

            protected function gisSearchWindow_closeHandler(event:WindowEvent):void
            {
                PopUpManager.removePopUp(this.gisSearchWindow);
            }

            protected function chartViewStack_changeHandler(event:IndexChangedEvent):void
            {
                if (chartViewStack.selectedIndex == 1)
                {
//                    msgDispatcher(new KPISituationEvent(KPISituationEvent.LOAD_LINE_DATA));
					//requestServerUtil.addRequest(new KPISituationEvent(KPISituationEvent.LOAD_LINE_DATA));
                }
            }

            [MessageHandler(selector = "CMS_SCENE_CAMERALISTSHOWWIN_CAMERALISTSHOWHANDLER")]
            public function showCameraListWin(e:SceneEvent):void
            {
                if (!cameraListShowWin.isShow)
                {
                    cameraListShowWin.isShow = true;
                    cameraListShowWin.width = 280;
                    cameraListShowWin.height = 300;
                    PopUpManager.addPopUp(cameraListShowWin, this.parent as DisplayObject);
                    PopUpManager.centerPopUp(cameraListShowWin);
                }
                cameraListShowWin.cameraListShowHandler(e);
            }

            //备用，该处的导出会导致当前页面重定向，暂时不用该方法。汪炜，2013-9-24
            /* 			private function exportKPI():void
               {
               if(sceneViewPM.kpiSituationDM.kpiCharData.length<=0){
               Alert.show("没有指标数据！");
               return;
               }
               log.info("begin to export：--->");
               var fileRefer:FileReference = new FileReference();
               var fileType:FileFilter=new FileFilter("Excel", "*.xls");
               var fileTypes:Array=new Array(fileType);
               var fileUpDownLoad:FileUpDownLoad=new FileUpDownLoad();
               var downLoadUrl:URLRequest=new URLRequest("/cms/scene/panels/exportSceneKpiTrendAction!exportKpiTrend.action");
               log.debug("[历史指标导出]:参数..user.kpiId=" + user.kpiId + ",user.timeInterval=" + user.timeInterval+",user.moTypeId="+user.moTypeId+",user.dateFlag="+ user.dateFlag);
               //参数。
               var downLoadData:URLVariables = new URLVariables();
               downLoadData.sceneId = user.sceneId;
               downLoadData.cityId = user.cityId;
               downLoadData.kpiId = user.kpiId;
               downLoadData.moTypeId = user.moTypeId;
               downLoadData.isStaticres = user.isStaticres;
               downLoadData.dateFlag = user.dateFlag;
               downLoadData.startTime = user.startTime;
               downLoadData.endTime = user.endTime;
               downLoadData.initSceneId = user.initSceneId;
               downLoadUrl.data=downLoadData;
               fileUpDownLoad.downLoadURLRequest=downLoadUrl;
               fileUpDownLoad.fileFilters=fileTypes;
               fileUpDownLoad.downLoad();
             } */
            private function exportKPI():void
            {
                if (sceneViewPM.kpiSituationDM.kpiCharData.length <= 0)
                {
                    Alert.show("没有指标数据！");
                    return;
                }
                //'account':'ailk','roleId':'1','areaId':'1','context':'/cms/'},
                var sceneName:String;
                var cityName:String = "";

                if (null != naviTree.sceneTree.selectedItem)
                {
                    var data:XML = XML(naviTree.sceneTree.selectedItem);
                    sceneName = String(data.@name);
                    //level 1:场景   2：区域    3：地市
                    log.info("data.parent()---->" + data.parent());

                    if ("2" == data.attribute("level") && undefined != data.parent() && null != data.parent())
                    {
                        cityName = data.parent().@name;
                    }
                }
                else
                {
                    var allData:XML = XML(naviTree.sceneTree.dataProvider);
                    sceneName = String(allData.@name);

                }
                log.info("begin to export：--->sceneName:" + sceneName + ",cityName:" + cityName);
                var url:String = user.context + "/scene/panels/exportSceneKpiTrendAction!exportKpiTrend.action?"
                    + "sceneId=" + user.sceneId + "&sceneName=" + sceneName + "&cityName=" + cityName + "&cityId=" + user.cityId
                    + "&kpiId=" + user.kpiId + "&moTypeId=" + user.moTypeId + "&isStaticres=" + user.isStaticres
                    + "&dateFlag=" + user.dateFlag + "&startTime=" + user.startTime + "&endTime=" + user.endTime
                    + "&floatLevel=" + user.floatLevel + "&showBadMoPoints=" + user.showBadMoPoints + "&mapType=" + user.mapType
                    + "&labelTypeId=" + user.labelTypeId + "&isGisFlag=" + user.isGisFlag + "&pointlongitude=" + user.pointlongitude
                    + "&timeInterval=" + user.timeInterval + "&isNew=" + user.isNew + "&configPerfClass=" + user.configPerfClass
                    + "&kpiIdList=" + user.kpiIdList + "&floatTime=" + user.floatTime + "&layerId=" + user.layerId
                    + "&refreshPolygon=" + user.refreshPolygon + "&floatId=" + user.floatId + "&pointlatitude=" + user.pointlatitude
                    + "&rendeType=" + user.rendeType + "&context=" + user.context + "&initLayerId=" + user.initLayerId
                    + "&newAdded=" + user.newAdded + "&usinglayer=" + user.usinglayer + "&showMoLayer=" + user.showMoLayer
                    + "&level=" + user.level + "&initSceneId=" + user.initSceneId + "&compareDateFlag=" + compareDateFlag;

                if (compareDateFlag == "1")
                {
                    url = url + "&compareDate=" + user.compareDate;
                }
                navigateToURL(new URLRequest(url));
            }

            protected function navigate2LteTopo(event:MouseEvent):void
            {
                var url:String = user.context + "cms/webtopo/topo/topo.action?id=1/lte&topoName=default-topo";
                navigateToURL(new URLRequest(url));
            }

            private var mapWinComp:ThirdDSceneWin;

            protected function button3_clickHandler(event:MouseEvent):void
            {
                if (mapWinComp == null)
                {
                    mapWinComp = new ThirdDSceneWin;
                    this.addElement(mapWinComp);
                }
                mapWinComp.visible = true;
                mapWinComp.includeInLayout = true;

                mapWinComp.width = gisWindow.width;
                mapWinComp.height = gisWindow.height;
                mapWinComp.x = gisWindow.x;
                mapWinComp.y = gisWindow.y;

                if (mapWinComp.mapWin.numElements > 0)
                    mapWinComp.thirdMap.source = "http://10.40.94.181/YOG3DScene/Pages/2DModel/NJ3D.html";
                else
                {
                    var fr:IFrame = new IFrame();
                    fr.percentHeight = 100;
                    fr.percentWidth = 100;

                    fr.source = "http://10.40.94.181/YOG3DScene/Pages/2DModel/NJ3D.html";
                    mapWinComp.mapWin.addElement(fr);
                }
            }

            protected function mapGisLayer_clickHandler(event:MouseEvent):void
            {
                var btn:Image = event.currentTarget as Image;
                log.info("mapGisLayer_clickHandler");

                if (!gisComp.gisLayerMapType)
                {
                    user.currentMapType = "0";
                    gisWindow_resize(1);
                    gisComp.gisLayerMapType = true;
                    gisComp.showLayer();
                }
                else
                {
                    user.currentMapType = "1";
                    gisWindow_resize(2);
                    gisComp.gisLayerMapType = false;

                    gisComp.hideLayer();
                }

                gisComp.visible = user.currentMapType == "0";
                gisComp.includeInLayout = user.currentMapType == "0";

                mapVectorComp.visible = user.currentMapType == "1";
                mapVectorComp.includeInLayout = user.currentMapType == "1";
            }

            protected function TopNBtn_clickHandler(event:MouseEvent):void
            {
                if (sceneTopNFloat == null)
                {
                    sceneTopNFloat = new SceneTopNFloat;
                    sceneTopNFloat.user = this.user;
                    sceneTopNFloat.msgDispatcher = this.msgDispatcher;
                }

                sceneTopNFloat.visible = true;
                sceneTopNFloat.x = gisWindow.x;
                sceneTopNFloat.y = gisWindow.y + 50;
                PopUpManager.addPopUp(sceneTopNFloat, this);

                setTimeout(function():void {
                    sceneTopNFloat.loadData();
                }, 1000);
            }

			//TODO
//            protected function terminalBtn_clickHandler(event:MouseEvent):void
//            {
//                if (sceneTerminalFloat == null)
//                {
//                    sceneTerminalFloat = new SceneTerminalFloat;
//                    sceneTerminalFloat.user = this.user;
//                    sceneTerminalFloat.msgDispatcher = this.msgDispatcher;
//                }
//
//                sceneTerminalFloat.visible = true;
//                sceneTerminalFloat.x = gisWindow.x;
//                sceneTerminalFloat.y = gisWindow.y + 50;
//                PopUpManager.addPopUp(sceneTerminalFloat, this);
//
//                setTimeout(function():void {
//                    sceneTerminalFloat.loadData();
//                }, 1000);
//
//            }

            var webKpiWin:WebKPIWin = new WebKPIWin;

            protected function webkpibtn_clickHandler(event:MouseEvent):void
            {
                PopUpManager.addPopUp(webKpiWin, this);
                PopUpManager.centerPopUp(webKpiWin);

            }
			
//			[MessageHandler(selector = "PANEL_ADD")]
//			public function PANEL_ADD(e:SceneEvent):void
//			{
//				
//			}
//			
//			
//			[MessageHandler(selector = "PANEL_REMOVE")]
//			public function PANEL_REMOVE(e:SceneEvent):void
//			{
//				
//			}
			
			
			protected function mouseOverHandler(event:MouseEvent):void
			{
				event.target.alpha=0.5;
			}
			
			protected function mouseOutHandler(event:MouseEvent):void
			{
				event.target.alpha=1;
			}
			
			protected function refresh_clickHandler(event:MouseEvent):void
			{
				msgDispatcher(new SceneEvent("REFRESH"));
			}
        ]]>
    </fx:Script>
    <s:HGroup width="100%"
              horizontalAlign="center"
              paddingLeft="5"
              paddingRight="5"
              paddingBottom="15"
              paddingTop="5"
              height="100%">
        <s:Scroller verticalScrollPolicy="off"
                    id="scroller_1"
                    width="300"
                    height="100%">
            <s:VGroup id="panelShowGroup_1"
                      clipAndEnableScrolling="true"
                      width="100%"
                      height="100%">
                <components:SceneIntro filterAlarm="{showAlarmFlowByFilter}"
                                       id="sceneIntro"/>
                <components:EmgyResource id="emgyResource"
                                         minHeight="250"
                                         width="100%"/>
                <components:ResMatrixComp id="resMatrixComp"
                                          minHeight="200"
                                          height="100%"
                                          width="100%"/>
            </s:VGroup>
        </s:Scroller>
        <!-- GIS -->
        <ailk_compts:Window id="gisWindow"
                            maximizable="true"
                            minimizable="false"
                            closable="false"
                            styleName="windowSceneGis"
                            maximize="gisWindow_resize(1)"
                            restore="gisWindow_resize(2)"
                            title="GIS 视图"
                            width="100%"
                            height="100%">
            <s:HGroup right="39"
                      top="-23"
                      horizontalAlign="right">

                <s:Button label="3D场景"
                          id="thirdMapBtn"
                          visible="false"
                          click="button3_clickHandler(event)"/>
                <mx:Image buttonMode="true"
                          source="@Embed('../img/guide.png')"
                          id="madePrompt"
                          toolTip="定制提示"
                          click="madePrompt_clickHandler()"/>
                <mx:Image source="{gislayer}"
                          id="mapGisLayer"
                          buttonMode="true"
                          toolTip="显示图层"
                          visible="{'2'!=user.level}"
                          includeInLayout="{'2'!=user.level}"
                          click="mapGisLayer_clickHandler(event)"/>
                <mx:Image id="refreshImg"
                          name="refresh"
                          source="{refresh}"
                          buttonMode="true"
                          toolTip="自动刷新已启动"
                          click="button1_clickHandler(event)"/>
            </s:HGroup>
			
			<s:Group width="100%"
					 height="100%"
					 id="gisGroup">
			</s:Group>

            <s:Group width="100%"
                     height="100%">
                <s:HGroup top="40"
                          right="160"
                          width="100">
                    <s:TextInput id="moQueryText"
                                 width="50"/>
                    <s:Button label="网元检索"
                              buttonMode="true"
                              id="queryButton"
                              click="queryButton_clickHandler(event)"/>
                </s:HGroup>
                <!-- <s:HGroup top="66"
                           right="160"
                           width="100"
                           visible="{user.initSceneId == '1003'}">
                     <s:TextInput id="cameraName"
                                  width="65"/>
                     <s:Button label="摄像查询"
                               buttonMode="true"
                               click="cameraQuery_clickHandler(event)"/>
                 </s:HGroup>-->
                <components:AreaMoConfigPanel id="areaMoConfigPanel"
                                              width="100"
                                              height="50"
                                              right="30"
                                              top="40"/>
                <mx:Box visible="false">
                    <ailk_compts:Window id="gisSearchWindow"
                                        title="网元信息"
                                        dragable="true"
                                        visible="false"
                                        styleName="window"
                                        minimizable="false"
                                        maximizable="false"
                                        width="380"
                                        height="250"
                                        close="gisSearchWindow_closeHandler(event)">
                        <mx:AdvancedDataGrid width="100%"
                                             height="100%"
                                             dataProvider="{mapViewPM.mapViewDM.selectMoList}"
                                             itemClick="advanceddatagrid1_itemClickHandler(event)"
                                             horizontalScrollPolicy="on">
                            <mx:columns>
                                <mx:AdvancedDataGridColumn dataField="areaName"
                                                           headerText="区域名称"/>
                                <mx:AdvancedDataGridColumn dataField="moTypeName"
                                                           headerText="网元类型"/>
                                <mx:AdvancedDataGridColumn dataField="moName"
                                                           headerText="网元名称"/>
                            </mx:columns>
                        </mx:AdvancedDataGrid>
                    </ailk_compts:Window>
                </mx:Box>
                <!-- chart comp -->
                <s:Group id="chartOuterGroup"
                         bottom="0"
                         width="100%"
                         height="170">
                    <mx:Box id="chartGroup"
                              width="100%"
                              height="100%">
                        <!--<mx:Box height="100%"
                                id="kpiChartBox"
                                minWidth="1"
                                horizontalScrollPolicy="off"
                                paddingRight="10"
                                width="100%">-->
                            <ailk_compts:Window id="kpiChartWin"
                                                width="100%"
                                                height="100%"
                                                styleName="windowSceneGisBottom"
                                                maximize="kpiChartWin_maximizeHandler(event)"
                                                restore="kpiChartWin_restoreHandler(event)"
                                                minimizable="false"
                                                closable="false">
                                <s:VGroup width="100%"
                                          height="100%"
                                          gap="0"
                                          top="-22">
                                    <s:TabBar id="chartTabBar"
                                              dataProvider="{chartViewStack}"
                                              buttonMode="true"
                                              styleName="sceneTabBar1"/>
                                    <mx:ViewStack width="100%"
                                                  height="100%"
                                                  styleName="sceneViewStack"
                                                  change="chartViewStack_changeHandler(event)"
                                                  id="chartViewStack"
                                                  creationPolicy="all">
                                        <s:NavigatorContent width="100%"
                                                            id="navtab1"
                                                            height="100%"
                                                            creationPolicy="all"
                                                            label="退服统计"
                                                            mouseOver="navtab1_mouseOverHandler(event)">
                                            <!-- 重点指标详情图表 -->
                                            <s:Scroller width="100%"
                                                        height="100%"
                                                        styleName="sceneScroller">
                                                <s:HGroup width="100%"
                                                          horizontalAlign="center"
                                                          height="100%">
                                                    <ailk_chart:PrettyChart id="quitChart"
                                                                            showYaxisTitle="true"
                                                                            visible="false"
                                                                            width="200"
                                                                            columnWidthRatio="0.3"
                                                                            xAxisFontSize="12"
                                                                            minHeight="150"
                                                                            steadyYAxis="false"
                                                                            pageNum="7"
                                                                            height="68"/>
                                                </s:HGroup>
                                            </s:Scroller>
                                        </s:NavigatorContent>
                                        <s:NavigatorContent width="100%"
                                                            height="100%"
                                                            creationPolicy="all"
                                                            mouseOver="navigatorcontent1_mouseOverHandler(event)"
                                                            mouseOut="navigatorcontent1_mouseOutHandler(event)"
                                                            label="指标趋势">
                                            <!-- 指标趋势图表 -->
                                            <s:Scroller width="100%"
                                                        height="100%"
                                                        bottom="0"
                                                        styleName="sceneScroller">
                                                <s:HGroup width="100%"
                                                          horizontalAlign="center"
                                                          height="100%">
                                                    <ailk_chart:PrettyChart id="kpiChart"
                                                                            width="200"
                                                                            dataTipFunc="dataTipFormate"
                                                                            steadyYAxis="false"
                                                                            xAxisFontSize="12"
                                                                            pageNum="20"
                                                                            minHeight="150"
                                                                            height="68"/>
                                                </s:HGroup>
                                            </s:Scroller>
                                        </s:NavigatorContent>
                                    </mx:ViewStack>
                                </s:VGroup>

                                <s:HGroup visible="{chartTabBar.selectedIndex == 1}"
                                          top="-13"
                                          gap="23"
                                          left="200">
                                    <s:CheckBox label="显示门限"
                                                styleName="label"
                                                click="showKpiChart()"
                                                id="thresholdKpi"/>
                                    <s:RadioButton label="日"
                                                   groupName="statisticsLevelg"
                                                   id="dayLevel"
                                                   styleName="label"
                                                   click="dayLevel_clickHandler()"
                                                   value="1"
                                                   selected="true"/>
                                    <s:RadioButton label="周"
                                                   styleName="label"
                                                   groupName="statisticsLevelg"
                                                   id="weekLevel"
                                                   click="weekLevel_clickHandler()"
                                                   value="2"/>
                                    <s:RadioButton label="月"
                                                   styleName="label"
                                                   groupName="statisticsLevelg"
                                                   id="monthLevel"
                                                   click="monthLevel_clickHandler()"
                                                   value="3"/>
                                    <mx:VBox>
                                        <mx:Image id="addImg"
                                                  source="@Embed('../img/u2.png')"
                                                  buttonMode="true"
                                                  toolTip="比较时间"
                                                  click="openWin1();"/>
                                    </mx:VBox>
                                    <mx:Image id="hisImg"
                                              source="@Embed('../img/clock1.png')"
                                              buttonMode="true"
                                              toolTip="历史查询"
                                              click="openWin();"/>
                                    <mx:Image source="@Embed('../img/icon_export.png')"
                                              buttonMode="true"
                                              toolTip="导出"
                                              click="exportKPI()"/>
                                    <s:Label id="kpiLabel"
                                             styleName="label"/>
                                </s:HGroup>

                                <s:HGroup visible="{chartTabBar.selectedIndex == 0}"
                                          top="-13"
                                          gap="25"
                                          left="210">
                                    <s:CheckBox label="显示门限"
                                                styleName="label"
                                                visible="false"
                                                click="showQuitChartByAreaKpi()"
                                                id="thresholdCB"/>
                                </s:HGroup>
                            </ailk_compts:Window>
                        <!--</mx:Box>-->
                    </mx:Box>



                    <s:VGroup width="15" height="100%"
                              right="0"
                              top="-3"
                              verticalAlign="middle">
                        <mx:Image id="chartImg"
                                  source="{_left_gray}"
                                  name="left"
                                  toolTip="图表面板"
                                  click="resizeWindow(3);"
                                  buttonMode="true"
                                  mouseOver="this.chartImg.name == 'left'? this.chartImg.source = _left_blue : this.chartImg.source = _right_blue;"
                                  mouseOut="this.chartImg.name == 'left' ? this.chartImg.source = _left_gray : this.chartImg.source = _right_gray;"/>
                    </s:VGroup>

                </s:Group>

                <!-- pic comp -->
                <s:Group id="picGroup"
                         visible="false"
                         creationComplete="resizeWindow(2);"
                         bottom="0"
                         right="0"
                         width="100%"
                         height="114"
                         includeInLayout="false">
                    <components:SceneThumbnailComp id="stc"
                                                   width="100%"
                                                   height="100%"/>
                    <s:VGroup width="15"
                              height="100%"
                              left="0"
                              top="-3"
                              verticalAlign="middle">
                        <mx:Image id="picImg"
                                  source="{_right_gray}"
                                  name="right"
                                  toolTip="缩略图面板"
                                  click="resizeWindow(2);"
                                  buttonMode="true"
                                  mouseOver="this.picImg.name == 'left'? this.picImg.source = _left_blue : this.picImg.source = _right_blue;"
                                  mouseOut="this.picImg.name == 'left' ? this.picImg.source = _left_gray : this.picImg.source = _right_gray;"/>
                    </s:VGroup>
                </s:Group>

                <!-- 区域导航树-->
                <components:SceneTreeComp id="naviTree"
                                          x="0"
                                          width="250"
                                          height="250"
                                          top="5"/>

                <!-- 面板配置组件-->
                <ailk_compts:NavBar id="cfgBar"
                                    location="right"
                                    styleName="sceneNavBar"
                                    title="配置"
                                    x="0"
                                    top="220">
                    <s:VGroup width="140"
                              horizontalAlign="right">
                        <s:VGroup id="panelCfgGroup"
                                  width="140"
                                  gap="5">
                            <s:CheckBox label="加载失败"/>
                        </s:VGroup>
                        <s:Button label="保存"
                                  click="config_clickHandler()"/>
                    </s:VGroup>
                </ailk_compts:NavBar>


                <!--指标定制   根据所有指标渲染地图   返回上一层-->
                <s:HGroup top="12"
                          right="20"
                          gap="-2"
                          horizontalAlign="center"
                          verticalAlign="middle">
                    <!--	<s:Button label="定制提示"
                         id="madePrompt"
                         click="madePrompt_clickHandler()"/>-->
                    <s:Button label="指标查询"
                              id="indexDingzhiButton"
                              buttonMode="true"
                              click="button2_clickHandler(event)"
                              mouseOver="indexDingzhiButton_mouseOverHandler(event)"/>
                    <s:Button label="渲染所有"
                              id="dyeMapByAllButton"
                              buttonMode="true"
                              click="dyeMapByAllHandler()"
                              mouseOver="dyeMapByAllButton_mouseOverHandler(event)"/>
                    <s:Button label="漫游数据"
                              id="roamButton"
                              buttonMode="true"
                              click="roam_clickHandler(event)"
                              mouseOver="roamButton_mouseOverHandler(event)"/>
                    <s:Button id="webkpibtn"
                              label="互联网指标"
                              click="webkpibtn_clickHandler(event)"
                              visible="false"
                              includeInLayout="false"/>
                    <s:Button label="返回"
                              id="backButton"
                              buttonMode="true"
                              click="backlastfloor()"
                              mouseOver="backButton_mouseOverHandler(event)"/>
                </s:HGroup>
                <s:Button id="back2vectMapBT"
                          top="33"
                          right="40"
                          visible="false"
                          label="返回矢量图"
                          buttonMode="true"
                          click="back2vectMap()"/>

                <ailk_compts:Window id="jingquPanel"
                                    dragable="true"
                                    maximizable="false"
                                    minimizable="false"
                                    closable="false"
                                    visible="false"
                                    styleName="windowSceneGisBottom"
                                    right="17"
                                    top="103"
                                    width="260"
                                    height="383">
                    <mx:AdvancedDataGrid width="100%"
                                         styleName="sceneDG"
                                         dataProvider="{mapViewPM.mapViewDM.userNumList}"
                                         height="100%">
                        <mx:columns>
                            <mx:AdvancedDataGridColumn dataField="areaname"
                                                       headerText="景区"/>
                            <mx:AdvancedDataGridColumn dataField="cityname"
                                                       headerText="地市"/>
                            <mx:AdvancedDataGridColumn dataField="usernum"
                                                       headerText="用户数"/>
                        </mx:columns>
                    </mx:AdvancedDataGrid>
                </ailk_compts:Window>

                <!--<s:HGroup left="137"
                          top="0">
                    <s:Button id="TopNBtn"
                              label="18大类指标"
                              click="TopNBtn_clickHandler(event)"/>
                    <s:Button id="terminalBtn"
                              label="终端统计"
                              click="terminalBtn_clickHandler(event)"/>
                </s:HGroup>-->
            </s:Group>

            <components:PerformanceIndex id="performanceIndex"
                                         x="140"
                                         y="100"
                                         width="500"
                                         height="300"
                                         visible="false"
                                         includeInLayout="false"/>
            <s:Group id="gisViewGroup"
                     clipAndEnableScrolling="true"
                     width="100%"
                     height="100%"/>
            <s:HGroup id="winListGroup"
                      left="50"
                      gap="0"
                      horizontalAlign="left"
                      verticalAlign="middle"
                      visible="{this.viewMode == '2'}"
                      includeInLayout="{this.viewMode == '2'}"
                      top="5">
                <mx:Image id="winListImg"
                          name="la"
                          alpha=".5"
                          toolTip="收起窗口列表栏"
                          rollOver="{winListImg.alpha = 1}"
                          rollOut="{winListImg.alpha = 0.5}"
                          click="winListImg_clickHandler(event)"
                          source="{la}"/>
                <s:HGroup id="pbh"
                          gap="0"/>
            </s:HGroup>
        </ailk_compts:Window>

        <s:Scroller verticalScrollPolicy="off"
                    id="scroller_2"
                    width="300"
                    height="100%">
            <s:VGroup id="panelShowGroup_2"
                      paddingTop="25"
                      clipAndEnableScrolling="true"
                      width="100%"
                      height="100%">
                <components:KPISituation id="kPISituation"
                                         minHeight="300"
                                         height="100%"
                                         width="100%"/>
                <components:DegradationTOPN id="degradationTOPN"
                                            minHeight="200"
                                            height="100%"
                                            width="100%"/>
                <components:QuitService id="quitService"
                                        minHeight="250"
                                        height="100%"
                                        width="100%"/>
            </s:VGroup>
        </s:Scroller>
    </s:HGroup>

    <ailk_compts:Window id="topobutton"
                        title="LTE 拓扑"
                        minimizable="false"
                        maximizable="false"
                        resizable="false"
                        closable="false"
                        styleName="windowScene"
                        minHeight="20"
                        buttonMode="true"
                        height="20"
                        width="{kPISituation.width}"
                        x="{scroller_2.x}"
                        y="{scroller_2.y}"
                        click="navigate2LteTopo(event)"/>

    <mx:VDividedBox id="mainVdbox"
                    width="100%"
                    verticalGap="0"
                    height="100%">
        <s:Group id="arrowImgGroup"
                 width="100%"
                 height="100%">
            <mx:Image id="leftImg"
                      source="{down}"
                      left="5"
                      bottom="0"
                      click="leftDown_clickHandler(event)"
                      buttonMode="true"/>

            <mx:Image id="rightImg"
                      source="{down}"
                      right="5"
                      bottom="0"
                      click="rightDown_clickHandler(event)"
                      buttonMode="true"/>
        </s:Group>
        <!--告警流水-->
        <s:VGroup id="alarmVgroup"
                  width="100%"
                  height="12"
                  left="5"
                  right="5"
                  gap="0"
                  bottom="0"
                  resize="alarmWindow_resizeHandler(event)">
            <s:Group width="100%"
                     height="100%"
                     id="alarmFlowGroup">
                <s:HGroup width="100%"
                          height="5"
                          horizontalAlign="center"
                          gap="0"
                          y="{alarmComp.y + 2}">
                    <mx:Image id="img"
                              source="{_up_gray}"
                              name="up"
                              click="resizeWindow()"
                              mouseOver="changeImg(1)"
                              mouseOut="changeImg(2)"
                              buttonMode="true"/>
                </s:HGroup>
            </s:Group>
        </s:VGroup>
    </mx:VDividedBox>

    <ailk_compts:Window id="menuWinLowerLevel"
                        width="120"
                        styleName="window"
                        minimizable="false"
                        maximizable="false"
                        dragable="true"
                        closable="false"
                        rollOut="{this.menuWinLowerLevel.visible = false; this.menuWinLowerLevel.includeInLayout = false;}"
                        visible="false"
                        includeInLayout="false">
        <mx:VBox width="100%"
                 top="-16"
                 horizontalAlign="center"
                 height="100%">
            <s:Button id="nextLevelBT"
                      label="下一级钻取"
                      click="lowerLevelDrillingTopo()"/>
            <s:Button label="历史趋势图"
                      click="showHistoryTrend()"/>
            <s:Button id="gisPositionLab"
                      label="GIS 定位"
                      click="gisPositionHandler()"
                      visible="false"
                      includeInLayout="false"/>
        </mx:VBox>
    </ailk_compts:Window>

    <!-- 历史趋势弹出窗口 -->
    <mx:Box visible="false"
            includeInLayout="false">
        <ailk_compts:Window id="hisPopupWin"
                            width="500"
                            height="300"
                            dragable="true"
                            title="历史趋势图"
                            close="{PopUpManager.removePopUp(hisPopupWin);}"
                            styleName="window"
                            maximize="hisPopupWin_maximizeHandler(event)"
                            minimizable="false"
                            closable="true"
                            maximizable="true">
            <s:Scroller width="100%"
                        height="100%"
                        bottom="0"
                        styleName="sceneScroller">
                <s:HGroup width="100%"
                          horizontalAlign="center"
                          height="100%">
                    <ailk_chart:PrettyChart id="hisPopChart"
                                            width="400"
                                            height="220"
                                            dataTipFunc="dataTipFormate"/>
                </s:HGroup>
            </s:Scroller>
        </ailk_compts:Window>
    </mx:Box>
    <!-- 配置窗口-->
    <mx:Box visible="false"
            includeInLayout="false">
        <ailk_compts:Window id="configurationWin"
                            styleName="window"
                            minimizable="false"
                            maximizable="false"
                            dragable="true"
                            close="{PopUpManager.removePopUp(configurationWin);}">
            <s:BorderContainer styleName="borderContainer1"
                               width="100%"
                               height="100%">
                <s:layout>
                    <s:VerticalLayout/>
                </s:layout>
                <mx:Form>
                    <mx:FormItem label="开始时间"
                                 id="startTime1">
                        <mx:DateField id="startTime"
                                      width="200"
                                      formatString="YYYY-MM-DD"/>
                    </mx:FormItem>
                    <mx:FormItem label="结束时间"
                                 id="endTime1">
                        <mx:DateField id="endTime"
                                      width="200"
                                      formatString="YYYY-MM-DD"/>
                    </mx:FormItem>
                    <mx:FormItem direction="vertical">
                        <s:Button label="确定"
                                  click="ok_clickHandler()"/>
                    </mx:FormItem>
                </mx:Form>
            </s:BorderContainer>
        </ailk_compts:Window>
    </mx:Box>
    <!-- 配置窗口-->
    <mx:Box visible="false"
            includeInLayout="false">
        <ailk_compts:Window id="configurationWin1"
                            styleName="window"
                            minimizable="false"
                            maximizable="false"
                            dragable="true"
                            width="300"
                            minHeight="180"
                            close="{PopUpManager.removePopUp(configurationWin1);}">
            <s:BorderContainer styleName="borderContainer1"
                               width="100%"
                               height="100%">
                <mx:Form width="100%"
                         height="100%">
                    <mx:FormItem label="比较日期"
                                 width="100%"
                                 height="100%"
                                 id="compareDateF">
                        <mx:Image id="addSymbol"
                                  source="@Embed('../img/addDate.png')"
                                  toolTip="添加"
                                  buttonMode="true"
                                  click="compareDateAdd()"/>
                    </mx:FormItem>
                    <mx:FormItem width="100%"
                                 height="100%">
                        <s:VGroup id="vgroup"
                                  width="100%"/>
                    </mx:FormItem>
                    <mx:FormItem width="100%"
                                 height="25">
                        <s:Button label="确定"
                                  click="ok_clickHandler1()"/>
                    </mx:FormItem>
                </mx:Form>

            </s:BorderContainer>
        </ailk_compts:Window>
    </mx:Box>
    <s:Group id="topGroup"
             width="100%"
             height="100%">
        <view:KpiCustomView id="kpiCustomView"/>
    </s:Group>

    <components:AreaChangeGridComp id="areaChangeGridComp"
                                   visible="false"
                                   includeInLayout="false"
                                   width="350"
                                   height="200"/>
    <components:SceneThumbNailStartComp id="sceneThumbNailStartComp"
                                        visible="false"
                                        includeInLayout="false"
                                        width="550"
                                        height="350"/>
	
	
	<!--<s:HGroup visible="true" top="10" width="100%" horizontalAlign="center" verticalAlign="middle">
		<s:Label fontSize="18" text="距下次刷新 {sceneViewPM.refreshCount} 秒"/>
		<mx:Image width="16" height="16" buttonMode="true" click="refresh_clickHandler(event)"
				  mouseOut="mouseOutHandler(event)" mouseOver="mouseOverHandler(event)"
				  source="{refresh}" toolTip="刷新"/>
	</s:HGroup>-->
</s:Group>
