<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                      xmlns:s="library://ns.adobe.com/flex/spark"
                      xmlns:mx="library://ns.adobe.com/flex/mx"
                      backgroundColor="0x5D6060"
                      backgroundAlpha=".6"
                      width="100%"
                      height="100%"
                      creationComplete="initData()"
                      xmlns:ailk_compts="http://www.asiainfo-linkage.com.cn/flex/components"
                      xmlns:common="com.linkage.module.cms.gsscenecfg.common.*">
    <fx:Script>
        <![CDATA[
            import com.ailk.common.system.logging.ILogger;
            import com.ailk.common.system.logging.Log;
            import com.ailk.common.system.utils.ExcelUtil;
            import com.linkage.module.cms.gsscenecfg.common.LEvent;
            import com.linkage.module.cms.gsscenecfg.dao.AreaDAO;
            import com.linkage.module.cms.gsscenecfg.dao.SceneDAO;
            
            import mx.collections.ArrayCollection;
            import mx.collections.IList;
            import mx.controls.Alert;
            import mx.managers.PopUpManager;
            
            import spark.components.CheckBox;
            import spark.components.RadioButtonGroup;

            private var mapTypeRadioGroup:RadioButtonGroup = new RadioButtonGroup;

            private var sceneDao:SceneDAO = SceneDAO.getInstance();

            private var sceneTypeAc:ArrayCollection = new ArrayCollection;
            private var gisLayerAc:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var dataTypeList:ArrayCollection = new ArrayCollection([{label: '场景数据', value: '1'},{label: '全网数据', value: '2'}]);
            private var filterAc:ArrayCollection = new ArrayCollection;

            public var context:String;

            private var fileRef:FileReference;

			private var log:ILogger = Log.getLogger("com.linkage.module.cms.gsscenecfg.scene.SceneDetailView");


            private var imagesFilter:FileFilter = new FileFilter("Images", "*.jpg;*.gif;*.png");
            private var excelFilter:FileFilter = new FileFilter("Excel", "*.xls");

            private var specAc:ArrayCollection = new ArrayCollection;
            private var panelAc:ArrayCollection = new ArrayCollection;


            private var selectedKpiAc:ArrayCollection = new ArrayCollection;

            private var selectedPanelAc1:ArrayCollection = new ArrayCollection();
            private var selectedPanelAc2:ArrayCollection = new ArrayCollection();

            private var kpiIdCheckBoxMap:Object = {};
            private var kpiDataChache:ArrayCollection = new ArrayCollection;

            //刷新回调，新增场景成功后刷新场景列表
            public var refreshCallBack:Function;

            private var selectedKpiCahce:Object = {};

            public var ready:Boolean = false;

            public var editData:Object;

            private var sceneid:String="";
			
			private var editPanelFlag:Boolean = false;//是否修改了模板的面板配置，用于是否需要更新场景类型对应的面板布局配置，mod by 汪炜。
            private function initData():void
            {
                ready = true;

                tn.setData(new ArrayCollection([{"name": "基本信息配置"}, {"name": "性能指标配置"}, {"name": "视图布局配置"}]));
                toBeSelectPanelList.addEventListener(LEvent.CHECKBOXCLICKED, panelList_clickHandler);
                selectedKpiList.addEventListener(LEvent.DELETECLICKED, unSelectedKpi);

                init();

                loadPics();
                loadSpecList();
				log.info("sceneDetailView creationComplete");
            }

            public function init():void
            {
                if (editData != null)
                {
                    sceneNameTextInput.text = editData.scenename;
                    sceneImg.source = context + editData.scenepic;
                    outListTa.text = editData.sceneoutline;
					sceneid = editData.sceneid;
					log.info(editData.dataType);
					if('null'!=editData.dataType&&''!=editData.dataType){
						for each (var obj:Object in dataTypeList) 
						{
							if(String(editData.dataType)==obj.value){
								dataTypeDDP.selectedItem = obj;
								break;
							}
						}
					}
                }
                else
                {
					sceneid = "";
                    sceneNameTextInput.text = "";
                    sceneImg.source = null;
                    outListTa.text = "";
					dataTypeDDP.selectedIndex = 0;
                }

                tn.selectedIndex = 0;
                selectedKpiAc.removeAll();
                selectedKpiCahce = {};
                selectedPanelAc1.removeAll();
                selectedPanelAc2.removeAll();

                loadSceneType();
                loadGisLayers();
                loadFilers();
//				if(sceneid!=""){
//					loadSceneKPI();
//				}
            }
			private function loadSceneKPI():void
			{
				var param:Object = {};
				param.sceneid = sceneid;
				sceneDao.loadSceneKPIBySceneId(
					param,
					function(data:Object):void
					{
						selectedKpiAc.removeAll();
						selectedKpiAc.addAll(data as IList);
					});
			}
            private function unSelectedKpi(e:LEvent):void
            {
                selectedKpiAc.removeItemAt(selectedKpiAc.getItemIndex(e.dt));

                var num:int = kpiListGroup.numElements;

                kpiIdCheckBoxMap[e.dt.id].selected = false;
            }

            private function loadSceneType():void
            {
                sceneDao.getGsSceneType(
                    function(data:Object):void
                    {
                        sceneTypeAc.removeAll();
                        sceneTypeAc.addAll(data as IList);

                        if (editData != null)
                        {
                            for each (var motype:Object in sceneTypeAc)
                                if (motype.type_name == editData.scenetypename)
                                {
                                    sceneTypeDDP.selectedItem = motype;
                                    break;
                                }
                        }

                        if (sceneTypeDDP.selectedIndex < 0)
                            sceneTypeDDP.selectedIndex = 0;

                        loadKpiList();
                        loadPanels();
                    });

            }

            private function loadGisLayers():void
            {
                sceneDao.getGsLayer(
                    function(data:Object):void
                    {
                        gisLayerAc.removeAll();
                        gisLayerAc.addItem({"layerid": "-1", "layername": "请选择图层", "layerurl": ""});
                        gisLayerAc.addAll(data as IList);
						
						gisLayerDDP.selectedIndex = 0;
                        if (editData != null)
                        {
                            for each (var obj:Object in gisLayerAc)
                                if (obj.layerurl == editData.layerurl)
                                {
                                    gisLayerDDP.selectedItem = obj;
                                    break;
                                }
                        }
                    });
            }

            private function loadFilers():void
            {
                sceneDao.getCustomRule(
                    function(data:Object):void
                    {
                        filterAc.removeAll();
                        filterAc.addItem({"rule_id": "-1", "rule_name": "请选择过滤器"});
                        filterAc.addAll(data as IList);
						
						filterDDP.selectedIndex = 0;
                        if (editData != null)
                        {
                            for each (var obj:Object in filterAc)
                                if (obj.ruleid == editData.ruleid)
                                {
                                    filterDDP.selectedItem = obj;
                                    break;
                                }
                        }
                    });
            }

            private function loadPics():void
            {
                sceneDao.getScenePic(
                    function(data:Object):void
                    {
                        for each (var d:Object in data)
                        {
                            if (sceneImg.source == null)
                                sceneImg.source = context + d.pic_url;

                            var img:Image = new Image;
                            img.width = 60;
                            img.height = 60;
                            img.source = context + d.pic_url;
                            img.buttonMode = true;
                            img.addEventListener(MouseEvent.CLICK, changeSceneImg);
                            imgGroup.addElement(img);
                        }
                    });
            }

            private function loadSpecList():void
            {
                sceneDao.getAllSpec(
                    function(data:Object):void
                    {
                        specAc.removeAll();
                        specAc.addAll(data as IList);

                        specDDP.selectedIndex = 0;
                    });
            }

            private function changeSceneImg(e:MouseEvent):void
            {
                sceneImg.source = (e.currentTarget as Image).source;
            }

            protected function uploadPic():void
            {
                fileRef = new FileReference;
                fileRef.addEventListener(Event.SELECT, uploadFile);
                fileRef.addEventListener(Event.COMPLETE, uploadComplete);
                fileRef.addEventListener(IOErrorEvent.IO_ERROR, uploadFailed);

                fileRef.browse([imagesFilter]);
            }

            private function uploadFile(e:Event):void
            {
                var urlRequest:URLRequest = new URLRequest(context + "cms/gsscenecfg/sceneconf/sceneConfig!uploadThumbnail.action");
                urlRequest.method = "POST";
                urlRequest.contentType = "multipart/form-data";

                var upLoadData:URLVariables = new URLVariables();
                upLoadData.fileName = fileRef.name;
                urlRequest.data = upLoadData;

                fileRef.upload(urlRequest);
            }

            private function uploadComplete(e:Event):void
            {
                sceneImg.source = context + "cms/images/" + e.target.name;
            }

            private function uploadFailed(e:IOErrorEvent):void
            {
                log.error("error:" + e.text.toString());
                Alert.show("上传失败", "失败");
            }

            private function loadKpiList():void
            {
                kpiListGroup.removeAllElements();
                kpiIdCheckBoxMap = {};
                kpiDataChache.removeAll();

                var param:Object = {};
                param.scenetypeid = sceneTypeDDP.selectedItem.type_id;
				param.sceneid = sceneid;

                if (specRb.selected)
                    param.spec_id = specDDP.selectedItem.spec_id;

                sceneDao.getPerftypeByScenetyeid(
                    param,
                    function(data:Object):void
                    {
                        showKpiList(data as IList);
                    });
            }

            private function showKpiList(data:IList):void
            {
                kpiDataChache.addAll(data);
				log.info(data);
                for each (var kpi:Object in data)
                {
                    var cb:CheckBox = new CheckBox;
                    cb.label = "[" + kpi.mo_type_name + "]" + kpi.show_name;
                    cb.name = kpi.show_name;
                    cb.id = kpi.perf_type_id + "_|_" + kpi.mo_type_id;
					cb.selected=Boolean(Number(kpi.selected));
                    cb.addEventListener(MouseEvent.CLICK, dealKpiSelect);
                    kpiListGroup.addElement(cb);
                    kpiIdCheckBoxMap[cb.id] = cb;
					dealKpiSelectBox(cb);
                }
            }

            private function dealKpiSelect(e:MouseEvent):void
            {
                var cb:CheckBox = e.currentTarget as CheckBox;
				dealKpiSelectBox(cb);
            }
			private function dealKpiSelectBox(cb:CheckBox):void
			{
				if (cb.selected)
				{
					if (selectedKpiCahce[cb.id] == null)
					{
						selectedKpiAc.addItemAt({"id": cb.id,
							"perf_type_id": cb.id.toString().split("_|_")[0],
							"mo_type_id": cb.id.toString().split("_|_")[1],
							"label": cb.label}, 0);
						selectedKpiCahce[cb.id] = "";
					}
				}
				else
				{
					for each (var d:Object in selectedKpiAc)
					{
						if (d.id == cb.id)
						{
							selectedKpiAc.removeItemAt(selectedKpiAc.getItemIndex(d));
							break;
						}
					}
				}
			}
            private function loadPanels():void
            {
                var param:Object = {};

                if (sceneTypeDDP.selectedItem != null)
                    param.scenetypeid = sceneTypeDDP.selectedItem.type_id;

                sceneDao.getSceneTypePanel(param,doDealSceneTypePanel);
            }
			
			protected function doDealSceneTypePanel(result:Object):void
			{
				panelAc.removeAll();
				panelAc.addAll(result as IList);
				
				log.info(selectedPanelAc1);
				this.selectedPanelAc1.removeAll();
				this.selectedPanelAc2.removeAll();
				for each (var data:Object in panelAc){
					if(String(data.location)=="1"||String(data.location)=="2"){
						data.selected = "1";
						this["selectedPanelAc" + data.location].addItem(data);
					}else{
						data.selected = "0";
					}
				}
				log.info(selectedPanelAc1);
				log.info(selectedPanelAc2);
				toBeSelectPanelList.validateNow();
				editPanelFlag = false;
				log.info("3");
			}
            protected function panelList_clickHandler(e:LEvent):void
            {
                var data:Object = toBeSelectPanelList.selectedItem;

                if (data.selected == '0')
                {
                    data.selected = "1";
                    toBeSelectPanelList.validateNow();
					if(data.location=="1"||data.location=="2"){
						this["selectedPanelAc" + data.location].addItem(data);
					}else{
						if(selectedPanelAc1.length>selectedPanelAc2.length){
							selectedPanelAc2.addItem(data);
						}else{
							selectedPanelAc1.addItem(data);
						}
					}
                }
                else
                {
                    data.selected = "0";
                    toBeSelectPanelList.validateNow();

                    for each (var d:Object in selectedPanelAc1)
                        if (d.panel_name == data.panel_name)
                        {
                            selectedPanelAc1.removeItemAt(selectedPanelAc1.getItemIndex(data));
                            break;
                        }

                    for each (var d2:Object in selectedPanelAc2)
                        if (d2.panel_name == data.panel_name)
                        {
                            selectedPanelAc2.removeItemAt(selectedPanelAc2.getItemIndex(data));
                            break;
                        }
                }
				editPanelFlag = true;
            }

            private function selectedAllPanels():void
            {
                selectedPanelAc1.removeAll();
                selectedPanelAc2.removeAll();

                for each (var data:Object in panelAc)
                {
                    data.selected = "1";
                    this["selectedPanelAc" + data.location].addItem(data);
                }

                panelAc.refresh();
                toBeSelectPanelList.validateNow();
            }

            protected function saveSceneConfig(event:MouseEvent):void
            {
                if (sceneNameTextInput.text == null || sceneNameTextInput.text == "")
                {
                    Alert.show("场景名称不可以为空", "提示");
                    return;
                }
				log.info("1");
                var sd:Object = {};
                sd.sceneid = sceneid;
				log.info("2");
				sd.sceneName = sceneNameTextInput.text;
				sd.dataType = dataTypeDDP.selectedItem.value;
				log.info("3");
                sd.scenetypeid = sceneTypeDDP.selectedItem.type_id;
                sd.scenePic = sceneImg.source.toString().substring(context.length, sceneImg.source.toString().length);
				log.info("4");
                sd.outLine = outListTa.text;
                sd.ruleid = filterDDP.selectedItem.rule_id;
				log.info("5");
                sd.isDisplay = mapTypeRadioGroup.selectedValue;
                sd.mapType = mapTypeRadioGroup.selectedValue;
				log.info("6");
                sd.layerUrl = gisLayerDDP.selectedItem.layerurl;
                sd.layerid = gisLayerDDP.selectedItem.layerid;
				log.info("7");
                sd.account = this.parentApplication.parameters.account;
				sd.editPanelFlag = editPanelFlag;
				log.info("8");
                sd.kpis = selectedKpiAc;
                sd.panels = getCfgedPanels();
				
				if(""==sceneid){
					sceneDao.insertSceneInfo(sd,doDealSceneInfo_Handler);
				}else{
					sceneDao.updateSceneInfo(sd,doDealSceneInfo_Handler);
				}
            }
			
			private function doDealSceneInfo_Handler(data:Object):void
			{
				Alert.show(data.toString(), "提示");
				
				if (data.toString().indexOf("成功") >= 0){
					refreshCallBack.call();
					PopUpManager.removePopUp(this);
				}
			}
            private function getCfgedPanels():ArrayCollection
            {
                var ac:ArrayCollection = new ArrayCollection;

                for each (var d:Object in selectedPanelAc1)
                {
                    d.location = "1";
                    d.showindex = selectedPanelAc1.getItemIndex(d) + 1;
                }

                for each (var d:Object in selectedPanelAc2)
                {
                    d.location = "2";
					d.showindex = selectedPanelAc2.getItemIndex(d) + 1;
                }

                ac.addAll(selectedPanelAc1);
                ac.addAll(selectedPanelAc2);

                return ac;
            }

            protected function clearSelectedKpis():void
            {
                selectedKpiAc.removeAll();
                selectedAllKpis(false);

                selectedKpiCahce = {};
            }

            protected function selectedAllKpis(flag:Boolean):void
            {
                var num:int = kpiListGroup.numElements;

                if (flag)
                    selectedKpiAc.removeAll();

                for (var index:int = 0; index < num; index++)
                {
                    var cb:CheckBox = (kpiListGroup.getElementAt(index) as CheckBox);
                    cb.selected = flag;

                    if (flag)
                        selectedKpiAc.addItemAt({"id": cb.id,
                                                    "perf_type_id": cb.id.toString().split("_|_")[0],
                                                    "mo_type_id": cb.id.toString().split("_|_")[1],
                                                    "label": cb.label}, 0);
                }
            }

            protected function filterKpiTileGroup():void
            {
                if (kpiNameInput.text != null && kpiNameInput.text != "")
                {
                    kpiListGroup.removeAllElements();

                    for each (var cb:CheckBox in kpiIdCheckBoxMap)
                        if (cb.name.indexOf(kpiNameInput.text) >= 0 || kpiNameInput.text == "")
                            kpiListGroup.addElement(cb);
                }
            }

            protected function exportKpiList():void
            {
                var headArray:Array = new Array;
                headArray.push({"id": "mo_type_id", "name": "网元类型ID"});
                headArray.push({"id": "mo_type_name", "name": "网元类型名称"});
                headArray.push({"id": "perf_type_id", "name": "指标ID"});
                headArray.push({"id": "show_name", "name": "指标名称"});

                ExcelUtil.exportSimpleExcel("指标列表", headArray, kpiDataChache);
            }

            protected function downloadKpiTemplate():void
            {
                var url:String = context + "cms/scene/quickconf/kpiTmplate.xls";

                navigateToURL(new URLRequest(url));
            }

            protected function importKpi():void
            {
                fileRef = new FileReference;
                fileRef.addEventListener(Event.SELECT, loadKpiExcel);

                fileRef.browse([excelFilter]);
            }

            private function loadKpiExcel(e:Event):void
            {
                var urlRequest:URLRequest = new URLRequest(context + "cms/gsscenecfg/areaconf/areaConfig!importNe.action");
                urlRequest.method = "POST";
                urlRequest.contentType = "multipart/form-data";

                var upLoadParam:URLVariables = new URLVariables();

                upLoadParam.fileName = fileRef.name;
                upLoadParam.resType = "3"; //1网元      2应急资源       3指标

                urlRequest.data = upLoadParam;

                fileRef.addEventListener(Event.COMPLETE, loadKpiExcelComplete);
                fileRef.addEventListener(IOErrorEvent.IO_ERROR, uploadFailed);

                fileRef.upload(urlRequest);
            }

            //加载Excel文件到内存， 读取文件内容到表格。
            private function loadKpiExcelComplete(e:Event):void
            {
                var param:Object = {};
                param.sessionId = this.parentApplication.parameters['sessionId'];
                param.resType = "3";

                Alert.show("导入完成！");

                AreaDAO.getInstance().getTempImportNeList(
                    param,
                    function(data:IList):void
                    {
                        for each (var kpi:Object in data as IList)
                            kpi.label = "[" + kpi.mo_type_name + "]" + kpi.show_name;

                        selectedKpiAc.addAll(data as IList);
                    });
            }

            protected function kpiNameInput_keyUpHandler(event:KeyboardEvent):void
            {
                if (event.keyCode == 13)
                    filterKpiTileGroup();

            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
    </fx:Declarations>

    <s:Group width="900"
             height="506"
             verticalCenter="0"
             horizontalCenter="0">
        <s:VGroup width="100%"
                  height="100%"
                  gap="0">
            <s:HGroup width="100%"
                      horizontalAlign="left"
                      paddingLeft="10">
                <common:NiceTabBar id="tn"/>
            </s:HGroup>
            <s:BorderContainer width="100%"
                               height="100%"
                               borderAlpha="0"
                               cornerRadius="5"
                               backgroundAlpha="1"
                               backgroundImageFillMode="repeat"
                               backgroundImage="@Embed('../img/stackBg.png')">
                <mx:ViewStack id="vs"
                              width="100%"
                              height="100%"
                              selectedIndex="{tn.selectedIndex}"
                              borderAlpha="0"
                              backgroundAlpha="0"
                              contentBackgroundAlpha="0"
                              creationPolicy="all">
                    <mx:Box label="基本信息配置"
                            width="100%"
                            height="100%"
                            paddingLeft="50"
                            paddingTop="45"
                            paddingRight="30">
                        <s:Group width="100%"
                                 height="100%">
                            <mx:Form width="100%"
                                     height="100%"
                                     verticalGap="20">

                                <mx:FormItem label="场景类型：">
                                    <s:DropDownList id="sceneTypeDDP"
                                                    labelField="type_name"
                                                    dataProvider="{sceneTypeAc}"
                                                    change="loadKpiList();loadPanels();"
                                                    width="127"/>
                                </mx:FormItem>

                                <mx:FormItem label="场景名称：">
                                    <s:HGroup>
                                        <s:TextInput id="sceneNameTextInput"/>
                                        <s:Label text="*"
                                                 color="red"/>
                                    </s:HGroup>
                                </mx:FormItem>
								
								<mx:FormItem label="数据类型：">
									<s:HGroup>
										<s:DropDownList id="dataTypeDDP"
														selectedIndex="0"
														dataProvider="{dataTypeList}"
														width="127"/>
									</s:HGroup>
								</mx:FormItem>
								
                                <mx:FormItem label="默认地图选择：">
                                    <s:HGroup>
                                        <s:RadioButton label="矢量图"
                                                       value="1"
                                                       selected="true"
                                                       group="{mapTypeRadioGroup}"/>
                                        <s:RadioButton id="gidRb"
                                                       label="Gis地图"
                                                       value="0"
                                                       group="{mapTypeRadioGroup}"/>
                                        <s:DropDownList id="gisLayerDDP"
                                                        labelField="layername"
                                                        enabled="{gidRb.selected}"
                                                        dataProvider="{gisLayerAc}"
                                                        width="127"/>
                                    </s:HGroup>
                                </mx:FormItem>

                                <mx:FormItem label="告警过滤器选择：">
                                    <s:HGroup>
                                        <s:DropDownList id="filterDDP"
                                                        labelField="rule_name"
                                                        dataProvider="{filterAc}"
                                                        width="127"/>
                                        <!--<s:Button label="选择过滤器"
                                                  click="{filterDDP.openDropDown();}"/>-->
                                        <s:Button label="编辑过滤器"/>
                                    </s:HGroup>
                                </mx:FormItem>

                                <mx:FormItem label="图标选择：">
                                    <s:HGroup>
                                        <s:HGroup width="127"
                                                  horizontalAlign="center">
                                            <mx:Image id="sceneImg"
                                                      width="60"
                                                      height="60"/>
                                        </s:HGroup>
                                        <s:VGroup>
                                            <s:Button label="图片选择"
                                                      click="{imgWin.visible = true}"/>
                                            <s:Button label="本地上传"
                                                      click="uploadPic()"/>
                                        </s:VGroup>
                                    </s:HGroup>
                                </mx:FormItem>

                                <mx:FormItem label="场景描述：">
                                    <s:TextArea id="outListTa"
                                                contentBackgroundAlpha=".8"
                                                width="600"
                                                height="72"/>
                                </mx:FormItem>
                            </mx:Form>

                            <ailk_compts:Window id="imgWin"
                                                width="285"
                                                height="160"
                                                styleName="window"
                                                visible="false"
                                                close="{imgWin.visible = false;}"
                                                dragable="true"
                                                left="350"
                                                top="100">
                                <s:Scroller width="100%"
                                            height="100%"
                                            horizontalScrollPolicy="off"
                                            verticalScrollPolicy="auto">
                                    <s:TileGroup id="imgGroup"
                                                 verticalCenter="0"
                                                 horizontalCenter="0"
                                                 orientation="rows"/>
                                </s:Scroller>
                            </ailk_compts:Window>
                        </s:Group>
                    </mx:Box>

                    <mx:VBox label="性能指标配置"
                             width="100%"
                             height="100%"
                             verticalGap="0"
                             paddingLeft="30"
                             paddingTop="10"
                             paddingRight="30"
                             paddingBottom="42">
                        <s:HGroup width="100%"
                                  height="38"
                                  verticalAlign="middle">
                            <s:Label text="指标选择"/>
                            <s:RadioButton label="全部"
                                           click="loadKpiList()"
                                           selected="true"/>
                            <s:RadioButton id="specRb"
                                           label="专业"
                                           click="loadKpiList()"/>
                            <s:DropDownList id="specDDP"
                                            labelField="spec_name"
                                            dataProvider="{specAc}"
                                            change="loadKpiList()"
                                            enabled="{specRb.selected}"/>
                            <s:RadioButton id="specNameRb"
                                           label="定义"/>
                            <s:HGroup gap="0"
                                      enabled="{specNameRb.selected}">
                                <s:TextInput id="kpiNameInput"
                                             keyUp="kpiNameInput_keyUpHandler(event)"/>
                                <mx:Button icon="@Embed('../img/search.png')"
                                           width="25"
                                           click="filterKpiTileGroup()"/>
                            </s:HGroup>

                            <mx:Spacer width="100%"/>
                            <mx:Button label="模板下载"
                                       click="downloadKpiTemplate()"/>
                            <mx:Button label="导入"
                                       click="importKpi()"
                                       icon="@Embed('../img/import.png')"/>
                            <mx:Button icon="@Embed('../img/export.png')"
                                       label="导出"
                                       click="exportKpiList()"/>
                        </s:HGroup>

                        <s:BorderContainer width="100%"
                                           height="100%"
                                           borderAlpha="0"
                                           cornerRadius="5"
                                           backgroundAlpha="1"
                                           backgroundImageFillMode="repeat"
                                           backgroundImage="@Embed('../img/bcBg.png')">
                            <s:HGroup width="100%"
                                      height="100%"
                                      paddingLeft="40"
                                      paddingRight="33"
                                      paddingBottom="15"
                                      paddingTop="15"
                                      gap="30">
                                <s:VGroup width="100%"
                                          height="100%">
                                    <s:HGroup width="100%">
                                        <s:Label left="3"
                                                 text="{'可选指标    ' + kpiDataChache.length}"/>
                                        <mx:Spacer width="100%"/>
                                        <s:Button right="3"
                                                  label="全选"
                                                  click="selectedAllKpis(true)"/>
                                    </s:HGroup>

                                    <s:BorderContainer width="100%"
                                                       height="100%">
                                        <s:Scroller width="100%"
                                                    height="100%"
                                                    horizontalScrollPolicy="auto">
                                            <s:TileGroup id="kpiListGroup"
                                                         left="10"
                                                         contentBackgroundAlpha=".8"
                                                         orientation="columns"
                                                         width="100%"
                                                         height="100%"/>
                                        </s:Scroller>
                                    </s:BorderContainer>
                                </s:VGroup>

                                <s:VGroup width="275"
                                          height="100%">
                                    <s:HGroup width="100%">
                                        <s:Label left="3"
                                                 text="{'已选指标    ' + selectedKpiAc.length}"/>
                                        <mx:Spacer width="100%"/>
                                        <s:Button right="3"
                                                  label="全删"
                                                  click="clearSelectedKpis()"/>
                                    </s:HGroup>

                                    <s:List id="selectedKpiList"
                                            width="100%"
                                            left="20"
                                            height="100%"
                                            itemRenderer="com.linkage.module.cms.gsscenecfg.common.LineListRenderer"
                                            dataProvider="{selectedKpiAc}"
                                            contentBackgroundAlpha=".8"/>

                                </s:VGroup>
                            </s:HGroup>
                        </s:BorderContainer>
                    </mx:VBox>

                    <mx:HBox label="视图布局配置"
                             width="100%"
                             height="100%"
                             paddingTop="14"
                             paddingRight="14"
                             paddingLeft="14"
                             paddingBottom="42">
                        <ailk_compts:Window title="可选面板"
                                            width="200"
                                            minimizable="false"
                                            maximizable="false"
                                            closable="false"
                                            styleName="window"
                                            height="100%">
                            <s:List id="toBeSelectPanelList"
                                    width="100%"
                                    height="100%"
                                    dataProvider="{panelAc}"
                                    contentBackgroundAlpha="0.3"
                                    itemRenderer="com.linkage.module.cms.gsscenecfg.common.CheckBoxListRenderer"/>
                        </ailk_compts:Window>
                        <s:BorderContainer width="100%"
                                           cornerRadius="5"
                                           height="100%">
                            <s:HGroup width="100%"
                                      height="100%"
                                      paddingLeft="10"
                                      paddingTop="10"
                                      paddingRight="10"
                                      paddingBottom="10">
                                <s:List height="100%"
                                        width="230"
                                        dataProvider="{selectedPanelAc1}"
                                        borderAlpha="0"
                                        itemRenderer="com.linkage.module.cms.gsscenecfg.common.PanelListRenderer"
                                        contentBackgroundAlpha="0"
                                        dragMoveEnabled="true"
                                        dropEnabled="true"
                                        dragEnabled="true"/>
                                <s:VGroup height="100%"
                                          width="100%"
                                          gap="0">
                                    <s:BorderContainer left="10"
                                                       top="10"
                                                       right="10"
                                                       height="28"
                                                       width="100%"
                                                       cornerRadius="4"
                                                       backgroundAlpha="1"
                                                       backgroundImageFillMode="repeat"
                                                       backgroundImage="@Embed('../img/demoPanelTitle.png')">
                                        <s:Label x="8"
                                                 y="6"
                                                 text="地图"/>
                                    </s:BorderContainer>
                                    <mx:Spacer height="100%"/>
                                    <s:BorderContainer backgroundImageFillMode="scale"
                                                       width="100%"
                                                       height="80"
                                                       backgroundAlpha="1"
                                                       cornerRadius="4"
                                                       backgroundImage="@Embed('../img/demoPanelBg.png')">
                                        <s:BorderContainer left="10"
                                                           top="10"
                                                           right="10"
                                                           height="28"
                                                           width="100%"
                                                           cornerRadius="4"
                                                           backgroundAlpha="1"
                                                           backgroundImageFillMode="repeat"
                                                           backgroundImage="@Embed('../img/demoPanelTitle.png')">
                                            <s:Label x="8"
                                                     y="6"
                                                     text="投诉工单"/>
                                        </s:BorderContainer>
                                    </s:BorderContainer>
                                    <s:HGroup width="100%"
                                              gap="0"
                                              horizontalAlign="right">
                                        <s:Button width="32"
                                                  label="告"/>
                                        <s:Button width="32"
                                                  label="故"/>
                                        <s:Button width="32"
                                                  label="性"/>
                                        <s:Button width="32"
                                                  label="工"/>
                                        <s:Button width="32"
                                                  label="投"/>
                                    </s:HGroup>
                                </s:VGroup>
                                <s:List height="100%"
                                        width="230"
                                        dataProvider="{selectedPanelAc2}"
                                        borderAlpha="0"
                                        itemRenderer="com.linkage.module.cms.gsscenecfg.common.PanelListRenderer"
                                        contentBackgroundAlpha="0"
                                        dropEnabled="true"
                                        dragMoveEnabled="true"
                                        dragEnabled="true"/>
                            </s:HGroup>
                        </s:BorderContainer>
                    </mx:HBox>
                </mx:ViewStack>
            </s:BorderContainer>
        </s:VGroup>

        <s:Button label="上一步"
                  width="60"
                  right="86"
                  bottom="12"
                  visible="{tn.selectedIndex != 0}"
                  click="{tn.selectedIndex = tn.selectedIndex - 1;}"/>

        <s:Button label="下一步"
                  width="60"
                  visible="{tn.selectedIndex != 2}"
                  click="{tn.selectedIndex = tn.selectedIndex + 1;}"
                  right="16"
                  bottom="12"/>

        <s:Button label="保存"
                  width="60"
                  right="16"
                  visible="{tn.selectedIndex == 2}"
                  click="saveSceneConfig(event)"
                  bottom="12"/>

        <s:Label bottom="12"
                 left="30"
                 visible="{tn.selectedIndex == 2}"
                 fontFamily="微软雅黑"
                 color="red"
                 text="面板窗口可左右，上下拖动，来配置位置和顺序"/>

        <s:Group right="20"
                 buttonMode="true"
                 click="{PopUpManager.removePopUp(this);}"
                 top="18">
            <mx:Image id="bgimg"
                      source="@Embed('../img/iconBg.png')"/>
            <mx:Image x="4"
                      y="2"
                      source="@Embed('../img/close.png')"/>
        </s:Group>
    </s:Group>
</s:SkinnableContainer>
